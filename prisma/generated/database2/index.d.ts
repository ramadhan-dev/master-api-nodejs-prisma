
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Tenant
 * 
 */
export type Tenant = $Result.DefaultSelection<Prisma.$TenantPayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model Division
 * 
 */
export type Division = $Result.DefaultSelection<Prisma.$DivisionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserCompanyHistory
 * 
 */
export type UserCompanyHistory = $Result.DefaultSelection<Prisma.$UserCompanyHistoryPayload>
/**
 * Model UserDivisionHistory
 * 
 */
export type UserDivisionHistory = $Result.DefaultSelection<Prisma.$UserDivisionHistoryPayload>
/**
 * Model AttendanceLocation
 * 
 */
export type AttendanceLocation = $Result.DefaultSelection<Prisma.$AttendanceLocationPayload>
/**
 * Model UserAttendanceLocation
 * 
 */
export type UserAttendanceLocation = $Result.DefaultSelection<Prisma.$UserAttendanceLocationPayload>
/**
 * Model UserAttendance
 * 
 */
export type UserAttendance = $Result.DefaultSelection<Prisma.$UserAttendancePayload>
/**
 * Model ShiftType
 * 
 */
export type ShiftType = $Result.DefaultSelection<Prisma.$ShiftTypePayload>
/**
 * Model UserShift
 * 
 */
export type UserShift = $Result.DefaultSelection<Prisma.$UserShiftPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model UserRole
 * 
 */
export type UserRole = $Result.DefaultSelection<Prisma.$UserRolePayload>
/**
 * Model MasterMenu
 * 
 */
export type MasterMenu = $Result.DefaultSelection<Prisma.$MasterMenuPayload>
/**
 * Model MasterSubMenu
 * 
 */
export type MasterSubMenu = $Result.DefaultSelection<Prisma.$MasterSubMenuPayload>
/**
 * Model MasterMenuAction
 * 
 */
export type MasterMenuAction = $Result.DefaultSelection<Prisma.$MasterMenuActionPayload>
/**
 * Model CompanyMenu
 * 
 */
export type CompanyMenu = $Result.DefaultSelection<Prisma.$CompanyMenuPayload>
/**
 * Model UserMenu
 * 
 */
export type UserMenu = $Result.DefaultSelection<Prisma.$UserMenuPayload>
/**
 * Model UserMenuAction
 * 
 */
export type UserMenuAction = $Result.DefaultSelection<Prisma.$UserMenuActionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const EmployeeStatus: {
  Active: 'Active',
  Inactive: 'Inactive'
};

export type EmployeeStatus = (typeof EmployeeStatus)[keyof typeof EmployeeStatus]

}

export type EmployeeStatus = $Enums.EmployeeStatus

export const EmployeeStatus: typeof $Enums.EmployeeStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tenants
 * const tenants = await prisma.tenant.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tenants
   * const tenants = await prisma.tenant.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.tenant`: Exposes CRUD operations for the **Tenant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tenants
    * const tenants = await prisma.tenant.findMany()
    * ```
    */
  get tenant(): Prisma.TenantDelegate<ExtArgs>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs>;

  /**
   * `prisma.division`: Exposes CRUD operations for the **Division** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Divisions
    * const divisions = await prisma.division.findMany()
    * ```
    */
  get division(): Prisma.DivisionDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.userCompanyHistory`: Exposes CRUD operations for the **UserCompanyHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserCompanyHistories
    * const userCompanyHistories = await prisma.userCompanyHistory.findMany()
    * ```
    */
  get userCompanyHistory(): Prisma.UserCompanyHistoryDelegate<ExtArgs>;

  /**
   * `prisma.userDivisionHistory`: Exposes CRUD operations for the **UserDivisionHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserDivisionHistories
    * const userDivisionHistories = await prisma.userDivisionHistory.findMany()
    * ```
    */
  get userDivisionHistory(): Prisma.UserDivisionHistoryDelegate<ExtArgs>;

  /**
   * `prisma.attendanceLocation`: Exposes CRUD operations for the **AttendanceLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AttendanceLocations
    * const attendanceLocations = await prisma.attendanceLocation.findMany()
    * ```
    */
  get attendanceLocation(): Prisma.AttendanceLocationDelegate<ExtArgs>;

  /**
   * `prisma.userAttendanceLocation`: Exposes CRUD operations for the **UserAttendanceLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAttendanceLocations
    * const userAttendanceLocations = await prisma.userAttendanceLocation.findMany()
    * ```
    */
  get userAttendanceLocation(): Prisma.UserAttendanceLocationDelegate<ExtArgs>;

  /**
   * `prisma.userAttendance`: Exposes CRUD operations for the **UserAttendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAttendances
    * const userAttendances = await prisma.userAttendance.findMany()
    * ```
    */
  get userAttendance(): Prisma.UserAttendanceDelegate<ExtArgs>;

  /**
   * `prisma.shiftType`: Exposes CRUD operations for the **ShiftType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShiftTypes
    * const shiftTypes = await prisma.shiftType.findMany()
    * ```
    */
  get shiftType(): Prisma.ShiftTypeDelegate<ExtArgs>;

  /**
   * `prisma.userShift`: Exposes CRUD operations for the **UserShift** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserShifts
    * const userShifts = await prisma.userShift.findMany()
    * ```
    */
  get userShift(): Prisma.UserShiftDelegate<ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs>;

  /**
   * `prisma.userRole`: Exposes CRUD operations for the **UserRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRoles
    * const userRoles = await prisma.userRole.findMany()
    * ```
    */
  get userRole(): Prisma.UserRoleDelegate<ExtArgs>;

  /**
   * `prisma.masterMenu`: Exposes CRUD operations for the **MasterMenu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MasterMenus
    * const masterMenus = await prisma.masterMenu.findMany()
    * ```
    */
  get masterMenu(): Prisma.MasterMenuDelegate<ExtArgs>;

  /**
   * `prisma.masterSubMenu`: Exposes CRUD operations for the **MasterSubMenu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MasterSubMenus
    * const masterSubMenus = await prisma.masterSubMenu.findMany()
    * ```
    */
  get masterSubMenu(): Prisma.MasterSubMenuDelegate<ExtArgs>;

  /**
   * `prisma.masterMenuAction`: Exposes CRUD operations for the **MasterMenuAction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MasterMenuActions
    * const masterMenuActions = await prisma.masterMenuAction.findMany()
    * ```
    */
  get masterMenuAction(): Prisma.MasterMenuActionDelegate<ExtArgs>;

  /**
   * `prisma.companyMenu`: Exposes CRUD operations for the **CompanyMenu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompanyMenus
    * const companyMenus = await prisma.companyMenu.findMany()
    * ```
    */
  get companyMenu(): Prisma.CompanyMenuDelegate<ExtArgs>;

  /**
   * `prisma.userMenu`: Exposes CRUD operations for the **UserMenu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserMenus
    * const userMenus = await prisma.userMenu.findMany()
    * ```
    */
  get userMenu(): Prisma.UserMenuDelegate<ExtArgs>;

  /**
   * `prisma.userMenuAction`: Exposes CRUD operations for the **UserMenuAction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserMenuActions
    * const userMenuActions = await prisma.userMenuAction.findMany()
    * ```
    */
  get userMenuAction(): Prisma.UserMenuActionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Tenant: 'Tenant',
    Company: 'Company',
    Division: 'Division',
    User: 'User',
    UserCompanyHistory: 'UserCompanyHistory',
    UserDivisionHistory: 'UserDivisionHistory',
    AttendanceLocation: 'AttendanceLocation',
    UserAttendanceLocation: 'UserAttendanceLocation',
    UserAttendance: 'UserAttendance',
    ShiftType: 'ShiftType',
    UserShift: 'UserShift',
    Role: 'Role',
    UserRole: 'UserRole',
    MasterMenu: 'MasterMenu',
    MasterSubMenu: 'MasterSubMenu',
    MasterMenuAction: 'MasterMenuAction',
    CompanyMenu: 'CompanyMenu',
    UserMenu: 'UserMenu',
    UserMenuAction: 'UserMenuAction'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "tenant" | "company" | "division" | "user" | "userCompanyHistory" | "userDivisionHistory" | "attendanceLocation" | "userAttendanceLocation" | "userAttendance" | "shiftType" | "userShift" | "role" | "userRole" | "masterMenu" | "masterSubMenu" | "masterMenuAction" | "companyMenu" | "userMenu" | "userMenuAction"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Tenant: {
        payload: Prisma.$TenantPayload<ExtArgs>
        fields: Prisma.TenantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TenantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TenantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findFirst: {
            args: Prisma.TenantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TenantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findMany: {
            args: Prisma.TenantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          create: {
            args: Prisma.TenantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          createMany: {
            args: Prisma.TenantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TenantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          delete: {
            args: Prisma.TenantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          update: {
            args: Prisma.TenantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          deleteMany: {
            args: Prisma.TenantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TenantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TenantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          aggregate: {
            args: Prisma.TenantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTenant>
          }
          groupBy: {
            args: Prisma.TenantGroupByArgs<ExtArgs>
            result: $Utils.Optional<TenantGroupByOutputType>[]
          }
          count: {
            args: Prisma.TenantCountArgs<ExtArgs>
            result: $Utils.Optional<TenantCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      Division: {
        payload: Prisma.$DivisionPayload<ExtArgs>
        fields: Prisma.DivisionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DivisionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DivisionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>
          }
          findFirst: {
            args: Prisma.DivisionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DivisionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>
          }
          findMany: {
            args: Prisma.DivisionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>[]
          }
          create: {
            args: Prisma.DivisionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>
          }
          createMany: {
            args: Prisma.DivisionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DivisionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>[]
          }
          delete: {
            args: Prisma.DivisionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>
          }
          update: {
            args: Prisma.DivisionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>
          }
          deleteMany: {
            args: Prisma.DivisionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DivisionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DivisionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>
          }
          aggregate: {
            args: Prisma.DivisionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDivision>
          }
          groupBy: {
            args: Prisma.DivisionGroupByArgs<ExtArgs>
            result: $Utils.Optional<DivisionGroupByOutputType>[]
          }
          count: {
            args: Prisma.DivisionCountArgs<ExtArgs>
            result: $Utils.Optional<DivisionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserCompanyHistory: {
        payload: Prisma.$UserCompanyHistoryPayload<ExtArgs>
        fields: Prisma.UserCompanyHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserCompanyHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserCompanyHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyHistoryPayload>
          }
          findFirst: {
            args: Prisma.UserCompanyHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserCompanyHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyHistoryPayload>
          }
          findMany: {
            args: Prisma.UserCompanyHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyHistoryPayload>[]
          }
          create: {
            args: Prisma.UserCompanyHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyHistoryPayload>
          }
          createMany: {
            args: Prisma.UserCompanyHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCompanyHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyHistoryPayload>[]
          }
          delete: {
            args: Prisma.UserCompanyHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyHistoryPayload>
          }
          update: {
            args: Prisma.UserCompanyHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyHistoryPayload>
          }
          deleteMany: {
            args: Prisma.UserCompanyHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserCompanyHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserCompanyHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyHistoryPayload>
          }
          aggregate: {
            args: Prisma.UserCompanyHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserCompanyHistory>
          }
          groupBy: {
            args: Prisma.UserCompanyHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserCompanyHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCompanyHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<UserCompanyHistoryCountAggregateOutputType> | number
          }
        }
      }
      UserDivisionHistory: {
        payload: Prisma.$UserDivisionHistoryPayload<ExtArgs>
        fields: Prisma.UserDivisionHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserDivisionHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDivisionHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserDivisionHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDivisionHistoryPayload>
          }
          findFirst: {
            args: Prisma.UserDivisionHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDivisionHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserDivisionHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDivisionHistoryPayload>
          }
          findMany: {
            args: Prisma.UserDivisionHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDivisionHistoryPayload>[]
          }
          create: {
            args: Prisma.UserDivisionHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDivisionHistoryPayload>
          }
          createMany: {
            args: Prisma.UserDivisionHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserDivisionHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDivisionHistoryPayload>[]
          }
          delete: {
            args: Prisma.UserDivisionHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDivisionHistoryPayload>
          }
          update: {
            args: Prisma.UserDivisionHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDivisionHistoryPayload>
          }
          deleteMany: {
            args: Prisma.UserDivisionHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserDivisionHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserDivisionHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDivisionHistoryPayload>
          }
          aggregate: {
            args: Prisma.UserDivisionHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserDivisionHistory>
          }
          groupBy: {
            args: Prisma.UserDivisionHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserDivisionHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserDivisionHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<UserDivisionHistoryCountAggregateOutputType> | number
          }
        }
      }
      AttendanceLocation: {
        payload: Prisma.$AttendanceLocationPayload<ExtArgs>
        fields: Prisma.AttendanceLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttendanceLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttendanceLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLocationPayload>
          }
          findFirst: {
            args: Prisma.AttendanceLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttendanceLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLocationPayload>
          }
          findMany: {
            args: Prisma.AttendanceLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLocationPayload>[]
          }
          create: {
            args: Prisma.AttendanceLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLocationPayload>
          }
          createMany: {
            args: Prisma.AttendanceLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttendanceLocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLocationPayload>[]
          }
          delete: {
            args: Prisma.AttendanceLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLocationPayload>
          }
          update: {
            args: Prisma.AttendanceLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLocationPayload>
          }
          deleteMany: {
            args: Prisma.AttendanceLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttendanceLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AttendanceLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceLocationPayload>
          }
          aggregate: {
            args: Prisma.AttendanceLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttendanceLocation>
          }
          groupBy: {
            args: Prisma.AttendanceLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttendanceLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttendanceLocationCountArgs<ExtArgs>
            result: $Utils.Optional<AttendanceLocationCountAggregateOutputType> | number
          }
        }
      }
      UserAttendanceLocation: {
        payload: Prisma.$UserAttendanceLocationPayload<ExtArgs>
        fields: Prisma.UserAttendanceLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserAttendanceLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendanceLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserAttendanceLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendanceLocationPayload>
          }
          findFirst: {
            args: Prisma.UserAttendanceLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendanceLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserAttendanceLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendanceLocationPayload>
          }
          findMany: {
            args: Prisma.UserAttendanceLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendanceLocationPayload>[]
          }
          create: {
            args: Prisma.UserAttendanceLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendanceLocationPayload>
          }
          createMany: {
            args: Prisma.UserAttendanceLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserAttendanceLocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendanceLocationPayload>[]
          }
          delete: {
            args: Prisma.UserAttendanceLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendanceLocationPayload>
          }
          update: {
            args: Prisma.UserAttendanceLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendanceLocationPayload>
          }
          deleteMany: {
            args: Prisma.UserAttendanceLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserAttendanceLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserAttendanceLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendanceLocationPayload>
          }
          aggregate: {
            args: Prisma.UserAttendanceLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserAttendanceLocation>
          }
          groupBy: {
            args: Prisma.UserAttendanceLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserAttendanceLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserAttendanceLocationCountArgs<ExtArgs>
            result: $Utils.Optional<UserAttendanceLocationCountAggregateOutputType> | number
          }
        }
      }
      UserAttendance: {
        payload: Prisma.$UserAttendancePayload<ExtArgs>
        fields: Prisma.UserAttendanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserAttendanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserAttendanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendancePayload>
          }
          findFirst: {
            args: Prisma.UserAttendanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserAttendanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendancePayload>
          }
          findMany: {
            args: Prisma.UserAttendanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendancePayload>[]
          }
          create: {
            args: Prisma.UserAttendanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendancePayload>
          }
          createMany: {
            args: Prisma.UserAttendanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserAttendanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendancePayload>[]
          }
          delete: {
            args: Prisma.UserAttendanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendancePayload>
          }
          update: {
            args: Prisma.UserAttendanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendancePayload>
          }
          deleteMany: {
            args: Prisma.UserAttendanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserAttendanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserAttendanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAttendancePayload>
          }
          aggregate: {
            args: Prisma.UserAttendanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserAttendance>
          }
          groupBy: {
            args: Prisma.UserAttendanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserAttendanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserAttendanceCountArgs<ExtArgs>
            result: $Utils.Optional<UserAttendanceCountAggregateOutputType> | number
          }
        }
      }
      ShiftType: {
        payload: Prisma.$ShiftTypePayload<ExtArgs>
        fields: Prisma.ShiftTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShiftTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShiftTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftTypePayload>
          }
          findFirst: {
            args: Prisma.ShiftTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShiftTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftTypePayload>
          }
          findMany: {
            args: Prisma.ShiftTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftTypePayload>[]
          }
          create: {
            args: Prisma.ShiftTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftTypePayload>
          }
          createMany: {
            args: Prisma.ShiftTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShiftTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftTypePayload>[]
          }
          delete: {
            args: Prisma.ShiftTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftTypePayload>
          }
          update: {
            args: Prisma.ShiftTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftTypePayload>
          }
          deleteMany: {
            args: Prisma.ShiftTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShiftTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShiftTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftTypePayload>
          }
          aggregate: {
            args: Prisma.ShiftTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShiftType>
          }
          groupBy: {
            args: Prisma.ShiftTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShiftTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShiftTypeCountArgs<ExtArgs>
            result: $Utils.Optional<ShiftTypeCountAggregateOutputType> | number
          }
        }
      }
      UserShift: {
        payload: Prisma.$UserShiftPayload<ExtArgs>
        fields: Prisma.UserShiftFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserShiftFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserShiftPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserShiftFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserShiftPayload>
          }
          findFirst: {
            args: Prisma.UserShiftFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserShiftPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserShiftFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserShiftPayload>
          }
          findMany: {
            args: Prisma.UserShiftFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserShiftPayload>[]
          }
          create: {
            args: Prisma.UserShiftCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserShiftPayload>
          }
          createMany: {
            args: Prisma.UserShiftCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserShiftCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserShiftPayload>[]
          }
          delete: {
            args: Prisma.UserShiftDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserShiftPayload>
          }
          update: {
            args: Prisma.UserShiftUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserShiftPayload>
          }
          deleteMany: {
            args: Prisma.UserShiftDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserShiftUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserShiftUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserShiftPayload>
          }
          aggregate: {
            args: Prisma.UserShiftAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserShift>
          }
          groupBy: {
            args: Prisma.UserShiftGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserShiftGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserShiftCountArgs<ExtArgs>
            result: $Utils.Optional<UserShiftCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      UserRole: {
        payload: Prisma.$UserRolePayload<ExtArgs>
        fields: Prisma.UserRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findFirst: {
            args: Prisma.UserRoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findMany: {
            args: Prisma.UserRoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          create: {
            args: Prisma.UserRoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          createMany: {
            args: Prisma.UserRoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserRoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          delete: {
            args: Prisma.UserRoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          update: {
            args: Prisma.UserRoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          deleteMany: {
            args: Prisma.UserRoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserRoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          aggregate: {
            args: Prisma.UserRoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserRole>
          }
          groupBy: {
            args: Prisma.UserRoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRoleCountArgs<ExtArgs>
            result: $Utils.Optional<UserRoleCountAggregateOutputType> | number
          }
        }
      }
      MasterMenu: {
        payload: Prisma.$MasterMenuPayload<ExtArgs>
        fields: Prisma.MasterMenuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MasterMenuFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MasterMenuFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuPayload>
          }
          findFirst: {
            args: Prisma.MasterMenuFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MasterMenuFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuPayload>
          }
          findMany: {
            args: Prisma.MasterMenuFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuPayload>[]
          }
          create: {
            args: Prisma.MasterMenuCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuPayload>
          }
          createMany: {
            args: Prisma.MasterMenuCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MasterMenuCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuPayload>[]
          }
          delete: {
            args: Prisma.MasterMenuDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuPayload>
          }
          update: {
            args: Prisma.MasterMenuUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuPayload>
          }
          deleteMany: {
            args: Prisma.MasterMenuDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MasterMenuUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MasterMenuUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuPayload>
          }
          aggregate: {
            args: Prisma.MasterMenuAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMasterMenu>
          }
          groupBy: {
            args: Prisma.MasterMenuGroupByArgs<ExtArgs>
            result: $Utils.Optional<MasterMenuGroupByOutputType>[]
          }
          count: {
            args: Prisma.MasterMenuCountArgs<ExtArgs>
            result: $Utils.Optional<MasterMenuCountAggregateOutputType> | number
          }
        }
      }
      MasterSubMenu: {
        payload: Prisma.$MasterSubMenuPayload<ExtArgs>
        fields: Prisma.MasterSubMenuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MasterSubMenuFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSubMenuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MasterSubMenuFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSubMenuPayload>
          }
          findFirst: {
            args: Prisma.MasterSubMenuFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSubMenuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MasterSubMenuFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSubMenuPayload>
          }
          findMany: {
            args: Prisma.MasterSubMenuFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSubMenuPayload>[]
          }
          create: {
            args: Prisma.MasterSubMenuCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSubMenuPayload>
          }
          createMany: {
            args: Prisma.MasterSubMenuCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MasterSubMenuCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSubMenuPayload>[]
          }
          delete: {
            args: Prisma.MasterSubMenuDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSubMenuPayload>
          }
          update: {
            args: Prisma.MasterSubMenuUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSubMenuPayload>
          }
          deleteMany: {
            args: Prisma.MasterSubMenuDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MasterSubMenuUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MasterSubMenuUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterSubMenuPayload>
          }
          aggregate: {
            args: Prisma.MasterSubMenuAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMasterSubMenu>
          }
          groupBy: {
            args: Prisma.MasterSubMenuGroupByArgs<ExtArgs>
            result: $Utils.Optional<MasterSubMenuGroupByOutputType>[]
          }
          count: {
            args: Prisma.MasterSubMenuCountArgs<ExtArgs>
            result: $Utils.Optional<MasterSubMenuCountAggregateOutputType> | number
          }
        }
      }
      MasterMenuAction: {
        payload: Prisma.$MasterMenuActionPayload<ExtArgs>
        fields: Prisma.MasterMenuActionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MasterMenuActionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuActionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MasterMenuActionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuActionPayload>
          }
          findFirst: {
            args: Prisma.MasterMenuActionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuActionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MasterMenuActionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuActionPayload>
          }
          findMany: {
            args: Prisma.MasterMenuActionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuActionPayload>[]
          }
          create: {
            args: Prisma.MasterMenuActionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuActionPayload>
          }
          createMany: {
            args: Prisma.MasterMenuActionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MasterMenuActionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuActionPayload>[]
          }
          delete: {
            args: Prisma.MasterMenuActionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuActionPayload>
          }
          update: {
            args: Prisma.MasterMenuActionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuActionPayload>
          }
          deleteMany: {
            args: Prisma.MasterMenuActionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MasterMenuActionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MasterMenuActionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterMenuActionPayload>
          }
          aggregate: {
            args: Prisma.MasterMenuActionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMasterMenuAction>
          }
          groupBy: {
            args: Prisma.MasterMenuActionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MasterMenuActionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MasterMenuActionCountArgs<ExtArgs>
            result: $Utils.Optional<MasterMenuActionCountAggregateOutputType> | number
          }
        }
      }
      CompanyMenu: {
        payload: Prisma.$CompanyMenuPayload<ExtArgs>
        fields: Prisma.CompanyMenuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyMenuFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMenuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyMenuFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMenuPayload>
          }
          findFirst: {
            args: Prisma.CompanyMenuFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMenuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyMenuFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMenuPayload>
          }
          findMany: {
            args: Prisma.CompanyMenuFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMenuPayload>[]
          }
          create: {
            args: Prisma.CompanyMenuCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMenuPayload>
          }
          createMany: {
            args: Prisma.CompanyMenuCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyMenuCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMenuPayload>[]
          }
          delete: {
            args: Prisma.CompanyMenuDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMenuPayload>
          }
          update: {
            args: Prisma.CompanyMenuUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMenuPayload>
          }
          deleteMany: {
            args: Prisma.CompanyMenuDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyMenuUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompanyMenuUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMenuPayload>
          }
          aggregate: {
            args: Prisma.CompanyMenuAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompanyMenu>
          }
          groupBy: {
            args: Prisma.CompanyMenuGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyMenuGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyMenuCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyMenuCountAggregateOutputType> | number
          }
        }
      }
      UserMenu: {
        payload: Prisma.$UserMenuPayload<ExtArgs>
        fields: Prisma.UserMenuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserMenuFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserMenuFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuPayload>
          }
          findFirst: {
            args: Prisma.UserMenuFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserMenuFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuPayload>
          }
          findMany: {
            args: Prisma.UserMenuFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuPayload>[]
          }
          create: {
            args: Prisma.UserMenuCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuPayload>
          }
          createMany: {
            args: Prisma.UserMenuCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserMenuCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuPayload>[]
          }
          delete: {
            args: Prisma.UserMenuDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuPayload>
          }
          update: {
            args: Prisma.UserMenuUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuPayload>
          }
          deleteMany: {
            args: Prisma.UserMenuDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserMenuUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserMenuUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuPayload>
          }
          aggregate: {
            args: Prisma.UserMenuAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserMenu>
          }
          groupBy: {
            args: Prisma.UserMenuGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserMenuGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserMenuCountArgs<ExtArgs>
            result: $Utils.Optional<UserMenuCountAggregateOutputType> | number
          }
        }
      }
      UserMenuAction: {
        payload: Prisma.$UserMenuActionPayload<ExtArgs>
        fields: Prisma.UserMenuActionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserMenuActionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuActionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserMenuActionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuActionPayload>
          }
          findFirst: {
            args: Prisma.UserMenuActionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuActionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserMenuActionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuActionPayload>
          }
          findMany: {
            args: Prisma.UserMenuActionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuActionPayload>[]
          }
          create: {
            args: Prisma.UserMenuActionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuActionPayload>
          }
          createMany: {
            args: Prisma.UserMenuActionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserMenuActionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuActionPayload>[]
          }
          delete: {
            args: Prisma.UserMenuActionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuActionPayload>
          }
          update: {
            args: Prisma.UserMenuActionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuActionPayload>
          }
          deleteMany: {
            args: Prisma.UserMenuActionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserMenuActionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserMenuActionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMenuActionPayload>
          }
          aggregate: {
            args: Prisma.UserMenuActionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserMenuAction>
          }
          groupBy: {
            args: Prisma.UserMenuActionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserMenuActionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserMenuActionCountArgs<ExtArgs>
            result: $Utils.Optional<UserMenuActionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TenantCountOutputType
   */

  export type TenantCountOutputType = {
    companies: number
    user: number
  }

  export type TenantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | TenantCountOutputTypeCountCompaniesArgs
    user?: boolean | TenantCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantCountOutputType
     */
    select?: TenantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    divisions: number
    user_history: number
    user: number
    attendance_location: number
    sift_type: number
    menu: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    divisions?: boolean | CompanyCountOutputTypeCountDivisionsArgs
    user_history?: boolean | CompanyCountOutputTypeCountUser_historyArgs
    user?: boolean | CompanyCountOutputTypeCountUserArgs
    attendance_location?: boolean | CompanyCountOutputTypeCountAttendance_locationArgs
    sift_type?: boolean | CompanyCountOutputTypeCountSift_typeArgs
    menu?: boolean | CompanyCountOutputTypeCountMenuArgs
  }

  // Custom InputTypes
  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountDivisionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DivisionWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountUser_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCompanyHistoryWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountAttendance_locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceLocationWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountSift_typeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShiftTypeWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountMenuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyMenuWhereInput
  }


  /**
   * Count Type DivisionCountOutputType
   */

  export type DivisionCountOutputType = {
    user_history: number
    user: number
  }

  export type DivisionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_history?: boolean | DivisionCountOutputTypeCountUser_historyArgs
    user?: boolean | DivisionCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * DivisionCountOutputType without action
   */
  export type DivisionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DivisionCountOutputType
     */
    select?: DivisionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DivisionCountOutputType without action
   */
  export type DivisionCountOutputTypeCountUser_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserDivisionHistoryWhereInput
  }

  /**
   * DivisionCountOutputType without action
   */
  export type DivisionCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    company_history: number
    division_history: number
    attendances_location: number
    user_attendance: number
    roles: number
    user_shifts: number
    userMenus: number
    userMenuAction: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company_history?: boolean | UserCountOutputTypeCountCompany_historyArgs
    division_history?: boolean | UserCountOutputTypeCountDivision_historyArgs
    attendances_location?: boolean | UserCountOutputTypeCountAttendances_locationArgs
    user_attendance?: boolean | UserCountOutputTypeCountUser_attendanceArgs
    roles?: boolean | UserCountOutputTypeCountRolesArgs
    user_shifts?: boolean | UserCountOutputTypeCountUser_shiftsArgs
    userMenus?: boolean | UserCountOutputTypeCountUserMenusArgs
    userMenuAction?: boolean | UserCountOutputTypeCountUserMenuActionArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCompany_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCompanyHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDivision_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserDivisionHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAttendances_locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAttendanceLocationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUser_attendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAttendanceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUser_shiftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserShiftWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserMenusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMenuWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserMenuActionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMenuActionWhereInput
  }


  /**
   * Count Type AttendanceLocationCountOutputType
   */

  export type AttendanceLocationCountOutputType = {
    user_attendance_location: number
  }

  export type AttendanceLocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_attendance_location?: boolean | AttendanceLocationCountOutputTypeCountUser_attendance_locationArgs
  }

  // Custom InputTypes
  /**
   * AttendanceLocationCountOutputType without action
   */
  export type AttendanceLocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLocationCountOutputType
     */
    select?: AttendanceLocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AttendanceLocationCountOutputType without action
   */
  export type AttendanceLocationCountOutputTypeCountUser_attendance_locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAttendanceLocationWhereInput
  }


  /**
   * Count Type ShiftTypeCountOutputType
   */

  export type ShiftTypeCountOutputType = {
    user_shifts: number
  }

  export type ShiftTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_shifts?: boolean | ShiftTypeCountOutputTypeCountUser_shiftsArgs
  }

  // Custom InputTypes
  /**
   * ShiftTypeCountOutputType without action
   */
  export type ShiftTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftTypeCountOutputType
     */
    select?: ShiftTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShiftTypeCountOutputType without action
   */
  export type ShiftTypeCountOutputTypeCountUser_shiftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserShiftWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    users: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | RoleCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }


  /**
   * Count Type MasterMenuCountOutputType
   */

  export type MasterMenuCountOutputType = {
    sub_menu: number
  }

  export type MasterMenuCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sub_menu?: boolean | MasterMenuCountOutputTypeCountSub_menuArgs
  }

  // Custom InputTypes
  /**
   * MasterMenuCountOutputType without action
   */
  export type MasterMenuCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenuCountOutputType
     */
    select?: MasterMenuCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MasterMenuCountOutputType without action
   */
  export type MasterMenuCountOutputTypeCountSub_menuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterSubMenuWhereInput
  }


  /**
   * Count Type MasterSubMenuCountOutputType
   */

  export type MasterSubMenuCountOutputType = {
    actions: number
  }

  export type MasterSubMenuCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actions?: boolean | MasterSubMenuCountOutputTypeCountActionsArgs
  }

  // Custom InputTypes
  /**
   * MasterSubMenuCountOutputType without action
   */
  export type MasterSubMenuCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSubMenuCountOutputType
     */
    select?: MasterSubMenuCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MasterSubMenuCountOutputType without action
   */
  export type MasterSubMenuCountOutputTypeCountActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterMenuActionWhereInput
  }


  /**
   * Count Type MasterMenuActionCountOutputType
   */

  export type MasterMenuActionCountOutputType = {
    users: number
  }

  export type MasterMenuActionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | MasterMenuActionCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * MasterMenuActionCountOutputType without action
   */
  export type MasterMenuActionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenuActionCountOutputType
     */
    select?: MasterMenuActionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MasterMenuActionCountOutputType without action
   */
  export type MasterMenuActionCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMenuActionWhereInput
  }


  /**
   * Count Type CompanyMenuCountOutputType
   */

  export type CompanyMenuCountOutputType = {
    user_menu: number
  }

  export type CompanyMenuCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_menu?: boolean | CompanyMenuCountOutputTypeCountUser_menuArgs
  }

  // Custom InputTypes
  /**
   * CompanyMenuCountOutputType without action
   */
  export type CompanyMenuCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMenuCountOutputType
     */
    select?: CompanyMenuCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyMenuCountOutputType without action
   */
  export type CompanyMenuCountOutputTypeCountUser_menuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMenuWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Tenant
   */

  export type AggregateTenant = {
    _count: TenantCountAggregateOutputType | null
    _avg: TenantAvgAggregateOutputType | null
    _sum: TenantSumAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  export type TenantAvgAggregateOutputType = {
    id: number | null
  }

  export type TenantSumAggregateOutputType = {
    id: number | null
  }

  export type TenantMinAggregateOutputType = {
    id: number | null
    tenant_code: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantMaxAggregateOutputType = {
    id: number | null
    tenant_code: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantCountAggregateOutputType = {
    id: number
    tenant_code: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TenantAvgAggregateInputType = {
    id?: true
  }

  export type TenantSumAggregateInputType = {
    id?: true
  }

  export type TenantMinAggregateInputType = {
    id?: true
    tenant_code?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantMaxAggregateInputType = {
    id?: true
    tenant_code?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantCountAggregateInputType = {
    id?: true
    tenant_code?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TenantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenant to aggregate.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tenants
    **/
    _count?: true | TenantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TenantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TenantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantMaxAggregateInputType
  }

  export type GetTenantAggregateType<T extends TenantAggregateArgs> = {
        [P in keyof T & keyof AggregateTenant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenant[P]>
      : GetScalarType<T[P], AggregateTenant[P]>
  }




  export type TenantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantWhereInput
    orderBy?: TenantOrderByWithAggregationInput | TenantOrderByWithAggregationInput[]
    by: TenantScalarFieldEnum[] | TenantScalarFieldEnum
    having?: TenantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantCountAggregateInputType | true
    _avg?: TenantAvgAggregateInputType
    _sum?: TenantSumAggregateInputType
    _min?: TenantMinAggregateInputType
    _max?: TenantMaxAggregateInputType
  }

  export type TenantGroupByOutputType = {
    id: number
    tenant_code: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: TenantCountAggregateOutputType | null
    _avg: TenantAvgAggregateOutputType | null
    _sum: TenantSumAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  type GetTenantGroupByPayload<T extends TenantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TenantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantGroupByOutputType[P]>
            : GetScalarType<T[P], TenantGroupByOutputType[P]>
        }
      >
    >


  export type TenantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenant_code?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companies?: boolean | Tenant$companiesArgs<ExtArgs>
    user?: boolean | Tenant$userArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenant_code?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectScalar = {
    id?: boolean
    tenant_code?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TenantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | Tenant$companiesArgs<ExtArgs>
    user?: boolean | Tenant$userArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TenantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TenantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tenant"
    objects: {
      companies: Prisma.$CompanyPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tenant_code: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tenant"]>
    composites: {}
  }

  type TenantGetPayload<S extends boolean | null | undefined | TenantDefaultArgs> = $Result.GetResult<Prisma.$TenantPayload, S>

  type TenantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TenantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TenantCountAggregateInputType | true
    }

  export interface TenantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tenant'], meta: { name: 'Tenant' } }
    /**
     * Find zero or one Tenant that matches the filter.
     * @param {TenantFindUniqueArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TenantFindUniqueArgs>(args: SelectSubset<T, TenantFindUniqueArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tenant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TenantFindUniqueOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TenantFindUniqueOrThrowArgs>(args: SelectSubset<T, TenantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tenant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TenantFindFirstArgs>(args?: SelectSubset<T, TenantFindFirstArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tenant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TenantFindFirstOrThrowArgs>(args?: SelectSubset<T, TenantFindFirstOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tenants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tenants
     * const tenants = await prisma.tenant.findMany()
     * 
     * // Get first 10 Tenants
     * const tenants = await prisma.tenant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tenantWithIdOnly = await prisma.tenant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TenantFindManyArgs>(args?: SelectSubset<T, TenantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tenant.
     * @param {TenantCreateArgs} args - Arguments to create a Tenant.
     * @example
     * // Create one Tenant
     * const Tenant = await prisma.tenant.create({
     *   data: {
     *     // ... data to create a Tenant
     *   }
     * })
     * 
     */
    create<T extends TenantCreateArgs>(args: SelectSubset<T, TenantCreateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tenants.
     * @param {TenantCreateManyArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TenantCreateManyArgs>(args?: SelectSubset<T, TenantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tenants and returns the data saved in the database.
     * @param {TenantCreateManyAndReturnArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tenants and only return the `id`
     * const tenantWithIdOnly = await prisma.tenant.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TenantCreateManyAndReturnArgs>(args?: SelectSubset<T, TenantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tenant.
     * @param {TenantDeleteArgs} args - Arguments to delete one Tenant.
     * @example
     * // Delete one Tenant
     * const Tenant = await prisma.tenant.delete({
     *   where: {
     *     // ... filter to delete one Tenant
     *   }
     * })
     * 
     */
    delete<T extends TenantDeleteArgs>(args: SelectSubset<T, TenantDeleteArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tenant.
     * @param {TenantUpdateArgs} args - Arguments to update one Tenant.
     * @example
     * // Update one Tenant
     * const tenant = await prisma.tenant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TenantUpdateArgs>(args: SelectSubset<T, TenantUpdateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tenants.
     * @param {TenantDeleteManyArgs} args - Arguments to filter Tenants to delete.
     * @example
     * // Delete a few Tenants
     * const { count } = await prisma.tenant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TenantDeleteManyArgs>(args?: SelectSubset<T, TenantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tenants
     * const tenant = await prisma.tenant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TenantUpdateManyArgs>(args: SelectSubset<T, TenantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tenant.
     * @param {TenantUpsertArgs} args - Arguments to update or create a Tenant.
     * @example
     * // Update or create a Tenant
     * const tenant = await prisma.tenant.upsert({
     *   create: {
     *     // ... data to create a Tenant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tenant we want to update
     *   }
     * })
     */
    upsert<T extends TenantUpsertArgs>(args: SelectSubset<T, TenantUpsertArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantCountArgs} args - Arguments to filter Tenants to count.
     * @example
     * // Count the number of Tenants
     * const count = await prisma.tenant.count({
     *   where: {
     *     // ... the filter for the Tenants we want to count
     *   }
     * })
    **/
    count<T extends TenantCountArgs>(
      args?: Subset<T, TenantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantAggregateArgs>(args: Subset<T, TenantAggregateArgs>): Prisma.PrismaPromise<GetTenantAggregateType<T>>

    /**
     * Group by Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantGroupByArgs['orderBy'] }
        : { orderBy?: TenantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tenant model
   */
  readonly fields: TenantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tenant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TenantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    companies<T extends Tenant$companiesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$companiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany"> | Null>
    user<T extends Tenant$userArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tenant model
   */ 
  interface TenantFieldRefs {
    readonly id: FieldRef<"Tenant", 'Int'>
    readonly tenant_code: FieldRef<"Tenant", 'String'>
    readonly name: FieldRef<"Tenant", 'String'>
    readonly createdAt: FieldRef<"Tenant", 'DateTime'>
    readonly updatedAt: FieldRef<"Tenant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tenant findUnique
   */
  export type TenantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findUniqueOrThrow
   */
  export type TenantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findFirst
   */
  export type TenantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findFirstOrThrow
   */
  export type TenantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findMany
   */
  export type TenantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenants to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant create
   */
  export type TenantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to create a Tenant.
     */
    data: XOR<TenantCreateInput, TenantUncheckedCreateInput>
  }

  /**
   * Tenant createMany
   */
  export type TenantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tenant createManyAndReturn
   */
  export type TenantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tenant update
   */
  export type TenantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to update a Tenant.
     */
    data: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
    /**
     * Choose, which Tenant to update.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant updateMany
   */
  export type TenantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tenants.
     */
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyInput>
    /**
     * Filter which Tenants to update
     */
    where?: TenantWhereInput
  }

  /**
   * Tenant upsert
   */
  export type TenantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The filter to search for the Tenant to update in case it exists.
     */
    where: TenantWhereUniqueInput
    /**
     * In case the Tenant found by the `where` argument doesn't exist, create a new Tenant with this data.
     */
    create: XOR<TenantCreateInput, TenantUncheckedCreateInput>
    /**
     * In case the Tenant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
  }

  /**
   * Tenant delete
   */
  export type TenantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter which Tenant to delete.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant deleteMany
   */
  export type TenantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenants to delete
     */
    where?: TenantWhereInput
  }

  /**
   * Tenant.companies
   */
  export type Tenant$companiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    cursor?: CompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Tenant.user
   */
  export type Tenant$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Tenant without action
   */
  export type TenantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
  }


  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyAvgAggregateOutputType = {
    id: number | null
  }

  export type CompanySumAggregateOutputType = {
    id: number | null
  }

  export type CompanyMinAggregateOutputType = {
    id: number | null
    company_code: string | null
    name: string | null
    tenant_code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: number | null
    company_code: string | null
    name: string | null
    tenant_code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    company_code: number
    name: number
    tenant_code: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompanyAvgAggregateInputType = {
    id?: true
  }

  export type CompanySumAggregateInputType = {
    id?: true
  }

  export type CompanyMinAggregateInputType = {
    id?: true
    company_code?: true
    name?: true
    tenant_code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    company_code?: true
    name?: true
    tenant_code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    company_code?: true
    name?: true
    tenant_code?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _avg?: CompanyAvgAggregateInputType
    _sum?: CompanySumAggregateInputType
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: number
    company_code: string
    name: string
    tenant_code: string
    createdAt: Date
    updatedAt: Date
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_code?: boolean
    name?: boolean
    tenant_code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    divisions?: boolean | Company$divisionsArgs<ExtArgs>
    user_history?: boolean | Company$user_historyArgs<ExtArgs>
    user?: boolean | Company$userArgs<ExtArgs>
    attendance_location?: boolean | Company$attendance_locationArgs<ExtArgs>
    sift_type?: boolean | Company$sift_typeArgs<ExtArgs>
    menu?: boolean | Company$menuArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_code?: boolean
    name?: boolean
    tenant_code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    company_code?: boolean
    name?: boolean
    tenant_code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    divisions?: boolean | Company$divisionsArgs<ExtArgs>
    user_history?: boolean | Company$user_historyArgs<ExtArgs>
    user?: boolean | Company$userArgs<ExtArgs>
    attendance_location?: boolean | Company$attendance_locationArgs<ExtArgs>
    sift_type?: boolean | Company$sift_typeArgs<ExtArgs>
    menu?: boolean | Company$menuArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      divisions: Prisma.$DivisionPayload<ExtArgs>[]
      user_history: Prisma.$UserCompanyHistoryPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>[]
      attendance_location: Prisma.$AttendanceLocationPayload<ExtArgs>[]
      sift_type: Prisma.$ShiftTypePayload<ExtArgs>[]
      menu: Prisma.$CompanyMenuPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      company_code: string
      name: string
      tenant_code: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {CompanyCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    divisions<T extends Company$divisionsArgs<ExtArgs> = {}>(args?: Subset<T, Company$divisionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findMany"> | Null>
    user_history<T extends Company$user_historyArgs<ExtArgs> = {}>(args?: Subset<T, Company$user_historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCompanyHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    user<T extends Company$userArgs<ExtArgs> = {}>(args?: Subset<T, Company$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    attendance_location<T extends Company$attendance_locationArgs<ExtArgs> = {}>(args?: Subset<T, Company$attendance_locationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceLocationPayload<ExtArgs>, T, "findMany"> | Null>
    sift_type<T extends Company$sift_typeArgs<ExtArgs> = {}>(args?: Subset<T, Company$sift_typeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftTypePayload<ExtArgs>, T, "findMany"> | Null>
    menu<T extends Company$menuArgs<ExtArgs> = {}>(args?: Subset<T, Company$menuArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyMenuPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */ 
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'Int'>
    readonly company_code: FieldRef<"Company", 'String'>
    readonly name: FieldRef<"Company", 'String'>
    readonly tenant_code: FieldRef<"Company", 'String'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company createManyAndReturn
   */
  export type CompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
  }

  /**
   * Company.divisions
   */
  export type Company$divisionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    where?: DivisionWhereInput
    orderBy?: DivisionOrderByWithRelationInput | DivisionOrderByWithRelationInput[]
    cursor?: DivisionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DivisionScalarFieldEnum | DivisionScalarFieldEnum[]
  }

  /**
   * Company.user_history
   */
  export type Company$user_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompanyHistory
     */
    select?: UserCompanyHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyHistoryInclude<ExtArgs> | null
    where?: UserCompanyHistoryWhereInput
    orderBy?: UserCompanyHistoryOrderByWithRelationInput | UserCompanyHistoryOrderByWithRelationInput[]
    cursor?: UserCompanyHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCompanyHistoryScalarFieldEnum | UserCompanyHistoryScalarFieldEnum[]
  }

  /**
   * Company.user
   */
  export type Company$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Company.attendance_location
   */
  export type Company$attendance_locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLocation
     */
    select?: AttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLocationInclude<ExtArgs> | null
    where?: AttendanceLocationWhereInput
    orderBy?: AttendanceLocationOrderByWithRelationInput | AttendanceLocationOrderByWithRelationInput[]
    cursor?: AttendanceLocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceLocationScalarFieldEnum | AttendanceLocationScalarFieldEnum[]
  }

  /**
   * Company.sift_type
   */
  export type Company$sift_typeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftType
     */
    select?: ShiftTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftTypeInclude<ExtArgs> | null
    where?: ShiftTypeWhereInput
    orderBy?: ShiftTypeOrderByWithRelationInput | ShiftTypeOrderByWithRelationInput[]
    cursor?: ShiftTypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShiftTypeScalarFieldEnum | ShiftTypeScalarFieldEnum[]
  }

  /**
   * Company.menu
   */
  export type Company$menuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMenu
     */
    select?: CompanyMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMenuInclude<ExtArgs> | null
    where?: CompanyMenuWhereInput
    orderBy?: CompanyMenuOrderByWithRelationInput | CompanyMenuOrderByWithRelationInput[]
    cursor?: CompanyMenuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyMenuScalarFieldEnum | CompanyMenuScalarFieldEnum[]
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model Division
   */

  export type AggregateDivision = {
    _count: DivisionCountAggregateOutputType | null
    _avg: DivisionAvgAggregateOutputType | null
    _sum: DivisionSumAggregateOutputType | null
    _min: DivisionMinAggregateOutputType | null
    _max: DivisionMaxAggregateOutputType | null
  }

  export type DivisionAvgAggregateOutputType = {
    id: number | null
  }

  export type DivisionSumAggregateOutputType = {
    id: number | null
  }

  export type DivisionMinAggregateOutputType = {
    id: number | null
    division_code: string | null
    name: string | null
    company_code: string | null
    tenant_code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DivisionMaxAggregateOutputType = {
    id: number | null
    division_code: string | null
    name: string | null
    company_code: string | null
    tenant_code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DivisionCountAggregateOutputType = {
    id: number
    division_code: number
    name: number
    company_code: number
    tenant_code: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DivisionAvgAggregateInputType = {
    id?: true
  }

  export type DivisionSumAggregateInputType = {
    id?: true
  }

  export type DivisionMinAggregateInputType = {
    id?: true
    division_code?: true
    name?: true
    company_code?: true
    tenant_code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DivisionMaxAggregateInputType = {
    id?: true
    division_code?: true
    name?: true
    company_code?: true
    tenant_code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DivisionCountAggregateInputType = {
    id?: true
    division_code?: true
    name?: true
    company_code?: true
    tenant_code?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DivisionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Division to aggregate.
     */
    where?: DivisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Divisions to fetch.
     */
    orderBy?: DivisionOrderByWithRelationInput | DivisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DivisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Divisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Divisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Divisions
    **/
    _count?: true | DivisionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DivisionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DivisionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DivisionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DivisionMaxAggregateInputType
  }

  export type GetDivisionAggregateType<T extends DivisionAggregateArgs> = {
        [P in keyof T & keyof AggregateDivision]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDivision[P]>
      : GetScalarType<T[P], AggregateDivision[P]>
  }




  export type DivisionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DivisionWhereInput
    orderBy?: DivisionOrderByWithAggregationInput | DivisionOrderByWithAggregationInput[]
    by: DivisionScalarFieldEnum[] | DivisionScalarFieldEnum
    having?: DivisionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DivisionCountAggregateInputType | true
    _avg?: DivisionAvgAggregateInputType
    _sum?: DivisionSumAggregateInputType
    _min?: DivisionMinAggregateInputType
    _max?: DivisionMaxAggregateInputType
  }

  export type DivisionGroupByOutputType = {
    id: number
    division_code: string
    name: string
    company_code: string
    tenant_code: string
    createdAt: Date
    updatedAt: Date
    _count: DivisionCountAggregateOutputType | null
    _avg: DivisionAvgAggregateOutputType | null
    _sum: DivisionSumAggregateOutputType | null
    _min: DivisionMinAggregateOutputType | null
    _max: DivisionMaxAggregateOutputType | null
  }

  type GetDivisionGroupByPayload<T extends DivisionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DivisionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DivisionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DivisionGroupByOutputType[P]>
            : GetScalarType<T[P], DivisionGroupByOutputType[P]>
        }
      >
    >


  export type DivisionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    division_code?: boolean
    name?: boolean
    company_code?: boolean
    tenant_code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user_history?: boolean | Division$user_historyArgs<ExtArgs>
    user?: boolean | Division$userArgs<ExtArgs>
    _count?: boolean | DivisionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["division"]>

  export type DivisionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    division_code?: boolean
    name?: boolean
    company_code?: boolean
    tenant_code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["division"]>

  export type DivisionSelectScalar = {
    id?: boolean
    division_code?: boolean
    name?: boolean
    company_code?: boolean
    tenant_code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DivisionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user_history?: boolean | Division$user_historyArgs<ExtArgs>
    user?: boolean | Division$userArgs<ExtArgs>
    _count?: boolean | DivisionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DivisionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $DivisionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Division"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      user_history: Prisma.$UserDivisionHistoryPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      division_code: string
      name: string
      company_code: string
      tenant_code: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["division"]>
    composites: {}
  }

  type DivisionGetPayload<S extends boolean | null | undefined | DivisionDefaultArgs> = $Result.GetResult<Prisma.$DivisionPayload, S>

  type DivisionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DivisionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DivisionCountAggregateInputType | true
    }

  export interface DivisionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Division'], meta: { name: 'Division' } }
    /**
     * Find zero or one Division that matches the filter.
     * @param {DivisionFindUniqueArgs} args - Arguments to find a Division
     * @example
     * // Get one Division
     * const division = await prisma.division.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DivisionFindUniqueArgs>(args: SelectSubset<T, DivisionFindUniqueArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Division that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DivisionFindUniqueOrThrowArgs} args - Arguments to find a Division
     * @example
     * // Get one Division
     * const division = await prisma.division.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DivisionFindUniqueOrThrowArgs>(args: SelectSubset<T, DivisionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Division that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionFindFirstArgs} args - Arguments to find a Division
     * @example
     * // Get one Division
     * const division = await prisma.division.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DivisionFindFirstArgs>(args?: SelectSubset<T, DivisionFindFirstArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Division that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionFindFirstOrThrowArgs} args - Arguments to find a Division
     * @example
     * // Get one Division
     * const division = await prisma.division.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DivisionFindFirstOrThrowArgs>(args?: SelectSubset<T, DivisionFindFirstOrThrowArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Divisions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Divisions
     * const divisions = await prisma.division.findMany()
     * 
     * // Get first 10 Divisions
     * const divisions = await prisma.division.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const divisionWithIdOnly = await prisma.division.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DivisionFindManyArgs>(args?: SelectSubset<T, DivisionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Division.
     * @param {DivisionCreateArgs} args - Arguments to create a Division.
     * @example
     * // Create one Division
     * const Division = await prisma.division.create({
     *   data: {
     *     // ... data to create a Division
     *   }
     * })
     * 
     */
    create<T extends DivisionCreateArgs>(args: SelectSubset<T, DivisionCreateArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Divisions.
     * @param {DivisionCreateManyArgs} args - Arguments to create many Divisions.
     * @example
     * // Create many Divisions
     * const division = await prisma.division.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DivisionCreateManyArgs>(args?: SelectSubset<T, DivisionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Divisions and returns the data saved in the database.
     * @param {DivisionCreateManyAndReturnArgs} args - Arguments to create many Divisions.
     * @example
     * // Create many Divisions
     * const division = await prisma.division.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Divisions and only return the `id`
     * const divisionWithIdOnly = await prisma.division.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DivisionCreateManyAndReturnArgs>(args?: SelectSubset<T, DivisionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Division.
     * @param {DivisionDeleteArgs} args - Arguments to delete one Division.
     * @example
     * // Delete one Division
     * const Division = await prisma.division.delete({
     *   where: {
     *     // ... filter to delete one Division
     *   }
     * })
     * 
     */
    delete<T extends DivisionDeleteArgs>(args: SelectSubset<T, DivisionDeleteArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Division.
     * @param {DivisionUpdateArgs} args - Arguments to update one Division.
     * @example
     * // Update one Division
     * const division = await prisma.division.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DivisionUpdateArgs>(args: SelectSubset<T, DivisionUpdateArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Divisions.
     * @param {DivisionDeleteManyArgs} args - Arguments to filter Divisions to delete.
     * @example
     * // Delete a few Divisions
     * const { count } = await prisma.division.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DivisionDeleteManyArgs>(args?: SelectSubset<T, DivisionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Divisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Divisions
     * const division = await prisma.division.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DivisionUpdateManyArgs>(args: SelectSubset<T, DivisionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Division.
     * @param {DivisionUpsertArgs} args - Arguments to update or create a Division.
     * @example
     * // Update or create a Division
     * const division = await prisma.division.upsert({
     *   create: {
     *     // ... data to create a Division
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Division we want to update
     *   }
     * })
     */
    upsert<T extends DivisionUpsertArgs>(args: SelectSubset<T, DivisionUpsertArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Divisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionCountArgs} args - Arguments to filter Divisions to count.
     * @example
     * // Count the number of Divisions
     * const count = await prisma.division.count({
     *   where: {
     *     // ... the filter for the Divisions we want to count
     *   }
     * })
    **/
    count<T extends DivisionCountArgs>(
      args?: Subset<T, DivisionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DivisionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Division.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DivisionAggregateArgs>(args: Subset<T, DivisionAggregateArgs>): Prisma.PrismaPromise<GetDivisionAggregateType<T>>

    /**
     * Group by Division.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DivisionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DivisionGroupByArgs['orderBy'] }
        : { orderBy?: DivisionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DivisionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDivisionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Division model
   */
  readonly fields: DivisionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Division.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DivisionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user_history<T extends Division$user_historyArgs<ExtArgs> = {}>(args?: Subset<T, Division$user_historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDivisionHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    user<T extends Division$userArgs<ExtArgs> = {}>(args?: Subset<T, Division$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Division model
   */ 
  interface DivisionFieldRefs {
    readonly id: FieldRef<"Division", 'Int'>
    readonly division_code: FieldRef<"Division", 'String'>
    readonly name: FieldRef<"Division", 'String'>
    readonly company_code: FieldRef<"Division", 'String'>
    readonly tenant_code: FieldRef<"Division", 'String'>
    readonly createdAt: FieldRef<"Division", 'DateTime'>
    readonly updatedAt: FieldRef<"Division", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Division findUnique
   */
  export type DivisionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * Filter, which Division to fetch.
     */
    where: DivisionWhereUniqueInput
  }

  /**
   * Division findUniqueOrThrow
   */
  export type DivisionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * Filter, which Division to fetch.
     */
    where: DivisionWhereUniqueInput
  }

  /**
   * Division findFirst
   */
  export type DivisionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * Filter, which Division to fetch.
     */
    where?: DivisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Divisions to fetch.
     */
    orderBy?: DivisionOrderByWithRelationInput | DivisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Divisions.
     */
    cursor?: DivisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Divisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Divisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Divisions.
     */
    distinct?: DivisionScalarFieldEnum | DivisionScalarFieldEnum[]
  }

  /**
   * Division findFirstOrThrow
   */
  export type DivisionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * Filter, which Division to fetch.
     */
    where?: DivisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Divisions to fetch.
     */
    orderBy?: DivisionOrderByWithRelationInput | DivisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Divisions.
     */
    cursor?: DivisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Divisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Divisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Divisions.
     */
    distinct?: DivisionScalarFieldEnum | DivisionScalarFieldEnum[]
  }

  /**
   * Division findMany
   */
  export type DivisionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * Filter, which Divisions to fetch.
     */
    where?: DivisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Divisions to fetch.
     */
    orderBy?: DivisionOrderByWithRelationInput | DivisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Divisions.
     */
    cursor?: DivisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Divisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Divisions.
     */
    skip?: number
    distinct?: DivisionScalarFieldEnum | DivisionScalarFieldEnum[]
  }

  /**
   * Division create
   */
  export type DivisionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * The data needed to create a Division.
     */
    data: XOR<DivisionCreateInput, DivisionUncheckedCreateInput>
  }

  /**
   * Division createMany
   */
  export type DivisionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Divisions.
     */
    data: DivisionCreateManyInput | DivisionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Division createManyAndReturn
   */
  export type DivisionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Divisions.
     */
    data: DivisionCreateManyInput | DivisionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Division update
   */
  export type DivisionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * The data needed to update a Division.
     */
    data: XOR<DivisionUpdateInput, DivisionUncheckedUpdateInput>
    /**
     * Choose, which Division to update.
     */
    where: DivisionWhereUniqueInput
  }

  /**
   * Division updateMany
   */
  export type DivisionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Divisions.
     */
    data: XOR<DivisionUpdateManyMutationInput, DivisionUncheckedUpdateManyInput>
    /**
     * Filter which Divisions to update
     */
    where?: DivisionWhereInput
  }

  /**
   * Division upsert
   */
  export type DivisionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * The filter to search for the Division to update in case it exists.
     */
    where: DivisionWhereUniqueInput
    /**
     * In case the Division found by the `where` argument doesn't exist, create a new Division with this data.
     */
    create: XOR<DivisionCreateInput, DivisionUncheckedCreateInput>
    /**
     * In case the Division was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DivisionUpdateInput, DivisionUncheckedUpdateInput>
  }

  /**
   * Division delete
   */
  export type DivisionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * Filter which Division to delete.
     */
    where: DivisionWhereUniqueInput
  }

  /**
   * Division deleteMany
   */
  export type DivisionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Divisions to delete
     */
    where?: DivisionWhereInput
  }

  /**
   * Division.user_history
   */
  export type Division$user_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDivisionHistory
     */
    select?: UserDivisionHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDivisionHistoryInclude<ExtArgs> | null
    where?: UserDivisionHistoryWhereInput
    orderBy?: UserDivisionHistoryOrderByWithRelationInput | UserDivisionHistoryOrderByWithRelationInput[]
    cursor?: UserDivisionHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserDivisionHistoryScalarFieldEnum | UserDivisionHistoryScalarFieldEnum[]
  }

  /**
   * Division.user
   */
  export type Division$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Division without action
   */
  export type DivisionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    user_code: string | null
    email: string | null
    name: string | null
    password: string | null
    status: $Enums.EmployeeStatus | null
    tenant_code: string | null
    company_code: string | null
    division_code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    user_code: string | null
    email: string | null
    name: string | null
    password: string | null
    status: $Enums.EmployeeStatus | null
    tenant_code: string | null
    company_code: string | null
    division_code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    user_code: number
    email: number
    name: number
    password: number
    status: number
    tenant_code: number
    company_code: number
    division_code: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    user_code?: true
    email?: true
    name?: true
    password?: true
    status?: true
    tenant_code?: true
    company_code?: true
    division_code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    user_code?: true
    email?: true
    name?: true
    password?: true
    status?: true
    tenant_code?: true
    company_code?: true
    division_code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    user_code?: true
    email?: true
    name?: true
    password?: true
    status?: true
    tenant_code?: true
    company_code?: true
    division_code?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    tenant_code: string
    company_code: string
    division_code: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_code?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    status?: boolean
    tenant_code?: boolean
    company_code?: boolean
    division_code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company_history?: boolean | User$company_historyArgs<ExtArgs>
    division_history?: boolean | User$division_historyArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    division?: boolean | DivisionDefaultArgs<ExtArgs>
    attendances_location?: boolean | User$attendances_locationArgs<ExtArgs>
    user_attendance?: boolean | User$user_attendanceArgs<ExtArgs>
    roles?: boolean | User$rolesArgs<ExtArgs>
    user_shifts?: boolean | User$user_shiftsArgs<ExtArgs>
    userMenus?: boolean | User$userMenusArgs<ExtArgs>
    userMenuAction?: boolean | User$userMenuActionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_code?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    status?: boolean
    tenant_code?: boolean
    company_code?: boolean
    division_code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    division?: boolean | DivisionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    user_code?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    status?: boolean
    tenant_code?: boolean
    company_code?: boolean
    division_code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company_history?: boolean | User$company_historyArgs<ExtArgs>
    division_history?: boolean | User$division_historyArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    division?: boolean | DivisionDefaultArgs<ExtArgs>
    attendances_location?: boolean | User$attendances_locationArgs<ExtArgs>
    user_attendance?: boolean | User$user_attendanceArgs<ExtArgs>
    roles?: boolean | User$rolesArgs<ExtArgs>
    user_shifts?: boolean | User$user_shiftsArgs<ExtArgs>
    userMenus?: boolean | User$userMenusArgs<ExtArgs>
    userMenuAction?: boolean | User$userMenuActionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    division?: boolean | DivisionDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      company_history: Prisma.$UserCompanyHistoryPayload<ExtArgs>[]
      division_history: Prisma.$UserDivisionHistoryPayload<ExtArgs>[]
      tenant: Prisma.$TenantPayload<ExtArgs>
      company: Prisma.$CompanyPayload<ExtArgs>
      division: Prisma.$DivisionPayload<ExtArgs>
      attendances_location: Prisma.$UserAttendanceLocationPayload<ExtArgs>[]
      user_attendance: Prisma.$UserAttendancePayload<ExtArgs>[]
      roles: Prisma.$UserRolePayload<ExtArgs>[]
      user_shifts: Prisma.$UserShiftPayload<ExtArgs>[]
      userMenus: Prisma.$UserMenuPayload<ExtArgs>[]
      userMenuAction: Prisma.$UserMenuActionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_code: string
      email: string
      name: string
      password: string
      status: $Enums.EmployeeStatus
      tenant_code: string
      company_code: string
      division_code: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company_history<T extends User$company_historyArgs<ExtArgs> = {}>(args?: Subset<T, User$company_historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCompanyHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    division_history<T extends User$division_historyArgs<ExtArgs> = {}>(args?: Subset<T, User$division_historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDivisionHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    division<T extends DivisionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DivisionDefaultArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    attendances_location<T extends User$attendances_locationArgs<ExtArgs> = {}>(args?: Subset<T, User$attendances_locationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAttendanceLocationPayload<ExtArgs>, T, "findMany"> | Null>
    user_attendance<T extends User$user_attendanceArgs<ExtArgs> = {}>(args?: Subset<T, User$user_attendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "findMany"> | Null>
    roles<T extends User$rolesArgs<ExtArgs> = {}>(args?: Subset<T, User$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany"> | Null>
    user_shifts<T extends User$user_shiftsArgs<ExtArgs> = {}>(args?: Subset<T, User$user_shiftsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserShiftPayload<ExtArgs>, T, "findMany"> | Null>
    userMenus<T extends User$userMenusArgs<ExtArgs> = {}>(args?: Subset<T, User$userMenusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMenuPayload<ExtArgs>, T, "findMany"> | Null>
    userMenuAction<T extends User$userMenuActionArgs<ExtArgs> = {}>(args?: Subset<T, User$userMenuActionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMenuActionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly user_code: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'EmployeeStatus'>
    readonly tenant_code: FieldRef<"User", 'String'>
    readonly company_code: FieldRef<"User", 'String'>
    readonly division_code: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.company_history
   */
  export type User$company_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompanyHistory
     */
    select?: UserCompanyHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyHistoryInclude<ExtArgs> | null
    where?: UserCompanyHistoryWhereInput
    orderBy?: UserCompanyHistoryOrderByWithRelationInput | UserCompanyHistoryOrderByWithRelationInput[]
    cursor?: UserCompanyHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCompanyHistoryScalarFieldEnum | UserCompanyHistoryScalarFieldEnum[]
  }

  /**
   * User.division_history
   */
  export type User$division_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDivisionHistory
     */
    select?: UserDivisionHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDivisionHistoryInclude<ExtArgs> | null
    where?: UserDivisionHistoryWhereInput
    orderBy?: UserDivisionHistoryOrderByWithRelationInput | UserDivisionHistoryOrderByWithRelationInput[]
    cursor?: UserDivisionHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserDivisionHistoryScalarFieldEnum | UserDivisionHistoryScalarFieldEnum[]
  }

  /**
   * User.attendances_location
   */
  export type User$attendances_locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendanceLocation
     */
    select?: UserAttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceLocationInclude<ExtArgs> | null
    where?: UserAttendanceLocationWhereInput
    orderBy?: UserAttendanceLocationOrderByWithRelationInput | UserAttendanceLocationOrderByWithRelationInput[]
    cursor?: UserAttendanceLocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAttendanceLocationScalarFieldEnum | UserAttendanceLocationScalarFieldEnum[]
  }

  /**
   * User.user_attendance
   */
  export type User$user_attendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendance
     */
    select?: UserAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceInclude<ExtArgs> | null
    where?: UserAttendanceWhereInput
    orderBy?: UserAttendanceOrderByWithRelationInput | UserAttendanceOrderByWithRelationInput[]
    cursor?: UserAttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAttendanceScalarFieldEnum | UserAttendanceScalarFieldEnum[]
  }

  /**
   * User.roles
   */
  export type User$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * User.user_shifts
   */
  export type User$user_shiftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShift
     */
    select?: UserShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShiftInclude<ExtArgs> | null
    where?: UserShiftWhereInput
    orderBy?: UserShiftOrderByWithRelationInput | UserShiftOrderByWithRelationInput[]
    cursor?: UserShiftWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserShiftScalarFieldEnum | UserShiftScalarFieldEnum[]
  }

  /**
   * User.userMenus
   */
  export type User$userMenusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenu
     */
    select?: UserMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuInclude<ExtArgs> | null
    where?: UserMenuWhereInput
    orderBy?: UserMenuOrderByWithRelationInput | UserMenuOrderByWithRelationInput[]
    cursor?: UserMenuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserMenuScalarFieldEnum | UserMenuScalarFieldEnum[]
  }

  /**
   * User.userMenuAction
   */
  export type User$userMenuActionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenuAction
     */
    select?: UserMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuActionInclude<ExtArgs> | null
    where?: UserMenuActionWhereInput
    orderBy?: UserMenuActionOrderByWithRelationInput | UserMenuActionOrderByWithRelationInput[]
    cursor?: UserMenuActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserMenuActionScalarFieldEnum | UserMenuActionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserCompanyHistory
   */

  export type AggregateUserCompanyHistory = {
    _count: UserCompanyHistoryCountAggregateOutputType | null
    _avg: UserCompanyHistoryAvgAggregateOutputType | null
    _sum: UserCompanyHistorySumAggregateOutputType | null
    _min: UserCompanyHistoryMinAggregateOutputType | null
    _max: UserCompanyHistoryMaxAggregateOutputType | null
  }

  export type UserCompanyHistoryAvgAggregateOutputType = {
    id: number | null
  }

  export type UserCompanyHistorySumAggregateOutputType = {
    id: number | null
  }

  export type UserCompanyHistoryMinAggregateOutputType = {
    id: number | null
    user_code: string | null
    company_code: string | null
    division_code: string | null
    tenant_code: string | null
    startDate: Date | null
    endDate: Date | null
  }

  export type UserCompanyHistoryMaxAggregateOutputType = {
    id: number | null
    user_code: string | null
    company_code: string | null
    division_code: string | null
    tenant_code: string | null
    startDate: Date | null
    endDate: Date | null
  }

  export type UserCompanyHistoryCountAggregateOutputType = {
    id: number
    user_code: number
    company_code: number
    division_code: number
    tenant_code: number
    startDate: number
    endDate: number
    _all: number
  }


  export type UserCompanyHistoryAvgAggregateInputType = {
    id?: true
  }

  export type UserCompanyHistorySumAggregateInputType = {
    id?: true
  }

  export type UserCompanyHistoryMinAggregateInputType = {
    id?: true
    user_code?: true
    company_code?: true
    division_code?: true
    tenant_code?: true
    startDate?: true
    endDate?: true
  }

  export type UserCompanyHistoryMaxAggregateInputType = {
    id?: true
    user_code?: true
    company_code?: true
    division_code?: true
    tenant_code?: true
    startDate?: true
    endDate?: true
  }

  export type UserCompanyHistoryCountAggregateInputType = {
    id?: true
    user_code?: true
    company_code?: true
    division_code?: true
    tenant_code?: true
    startDate?: true
    endDate?: true
    _all?: true
  }

  export type UserCompanyHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCompanyHistory to aggregate.
     */
    where?: UserCompanyHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCompanyHistories to fetch.
     */
    orderBy?: UserCompanyHistoryOrderByWithRelationInput | UserCompanyHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserCompanyHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCompanyHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCompanyHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserCompanyHistories
    **/
    _count?: true | UserCompanyHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserCompanyHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserCompanyHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserCompanyHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserCompanyHistoryMaxAggregateInputType
  }

  export type GetUserCompanyHistoryAggregateType<T extends UserCompanyHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateUserCompanyHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserCompanyHistory[P]>
      : GetScalarType<T[P], AggregateUserCompanyHistory[P]>
  }




  export type UserCompanyHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCompanyHistoryWhereInput
    orderBy?: UserCompanyHistoryOrderByWithAggregationInput | UserCompanyHistoryOrderByWithAggregationInput[]
    by: UserCompanyHistoryScalarFieldEnum[] | UserCompanyHistoryScalarFieldEnum
    having?: UserCompanyHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCompanyHistoryCountAggregateInputType | true
    _avg?: UserCompanyHistoryAvgAggregateInputType
    _sum?: UserCompanyHistorySumAggregateInputType
    _min?: UserCompanyHistoryMinAggregateInputType
    _max?: UserCompanyHistoryMaxAggregateInputType
  }

  export type UserCompanyHistoryGroupByOutputType = {
    id: number
    user_code: string
    company_code: string
    division_code: string
    tenant_code: string
    startDate: Date
    endDate: Date | null
    _count: UserCompanyHistoryCountAggregateOutputType | null
    _avg: UserCompanyHistoryAvgAggregateOutputType | null
    _sum: UserCompanyHistorySumAggregateOutputType | null
    _min: UserCompanyHistoryMinAggregateOutputType | null
    _max: UserCompanyHistoryMaxAggregateOutputType | null
  }

  type GetUserCompanyHistoryGroupByPayload<T extends UserCompanyHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserCompanyHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserCompanyHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserCompanyHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], UserCompanyHistoryGroupByOutputType[P]>
        }
      >
    >


  export type UserCompanyHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_code?: boolean
    company_code?: boolean
    division_code?: boolean
    tenant_code?: boolean
    startDate?: boolean
    endDate?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCompanyHistory"]>

  export type UserCompanyHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_code?: boolean
    company_code?: boolean
    division_code?: boolean
    tenant_code?: boolean
    startDate?: boolean
    endDate?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCompanyHistory"]>

  export type UserCompanyHistorySelectScalar = {
    id?: boolean
    user_code?: boolean
    company_code?: boolean
    division_code?: boolean
    tenant_code?: boolean
    startDate?: boolean
    endDate?: boolean
  }

  export type UserCompanyHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type UserCompanyHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $UserCompanyHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserCompanyHistory"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_code: string
      company_code: string
      division_code: string
      tenant_code: string
      startDate: Date
      endDate: Date | null
    }, ExtArgs["result"]["userCompanyHistory"]>
    composites: {}
  }

  type UserCompanyHistoryGetPayload<S extends boolean | null | undefined | UserCompanyHistoryDefaultArgs> = $Result.GetResult<Prisma.$UserCompanyHistoryPayload, S>

  type UserCompanyHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserCompanyHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCompanyHistoryCountAggregateInputType | true
    }

  export interface UserCompanyHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserCompanyHistory'], meta: { name: 'UserCompanyHistory' } }
    /**
     * Find zero or one UserCompanyHistory that matches the filter.
     * @param {UserCompanyHistoryFindUniqueArgs} args - Arguments to find a UserCompanyHistory
     * @example
     * // Get one UserCompanyHistory
     * const userCompanyHistory = await prisma.userCompanyHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserCompanyHistoryFindUniqueArgs>(args: SelectSubset<T, UserCompanyHistoryFindUniqueArgs<ExtArgs>>): Prisma__UserCompanyHistoryClient<$Result.GetResult<Prisma.$UserCompanyHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserCompanyHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserCompanyHistoryFindUniqueOrThrowArgs} args - Arguments to find a UserCompanyHistory
     * @example
     * // Get one UserCompanyHistory
     * const userCompanyHistory = await prisma.userCompanyHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserCompanyHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, UserCompanyHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserCompanyHistoryClient<$Result.GetResult<Prisma.$UserCompanyHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserCompanyHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyHistoryFindFirstArgs} args - Arguments to find a UserCompanyHistory
     * @example
     * // Get one UserCompanyHistory
     * const userCompanyHistory = await prisma.userCompanyHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserCompanyHistoryFindFirstArgs>(args?: SelectSubset<T, UserCompanyHistoryFindFirstArgs<ExtArgs>>): Prisma__UserCompanyHistoryClient<$Result.GetResult<Prisma.$UserCompanyHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserCompanyHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyHistoryFindFirstOrThrowArgs} args - Arguments to find a UserCompanyHistory
     * @example
     * // Get one UserCompanyHistory
     * const userCompanyHistory = await prisma.userCompanyHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserCompanyHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, UserCompanyHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserCompanyHistoryClient<$Result.GetResult<Prisma.$UserCompanyHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserCompanyHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserCompanyHistories
     * const userCompanyHistories = await prisma.userCompanyHistory.findMany()
     * 
     * // Get first 10 UserCompanyHistories
     * const userCompanyHistories = await prisma.userCompanyHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userCompanyHistoryWithIdOnly = await prisma.userCompanyHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserCompanyHistoryFindManyArgs>(args?: SelectSubset<T, UserCompanyHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCompanyHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserCompanyHistory.
     * @param {UserCompanyHistoryCreateArgs} args - Arguments to create a UserCompanyHistory.
     * @example
     * // Create one UserCompanyHistory
     * const UserCompanyHistory = await prisma.userCompanyHistory.create({
     *   data: {
     *     // ... data to create a UserCompanyHistory
     *   }
     * })
     * 
     */
    create<T extends UserCompanyHistoryCreateArgs>(args: SelectSubset<T, UserCompanyHistoryCreateArgs<ExtArgs>>): Prisma__UserCompanyHistoryClient<$Result.GetResult<Prisma.$UserCompanyHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserCompanyHistories.
     * @param {UserCompanyHistoryCreateManyArgs} args - Arguments to create many UserCompanyHistories.
     * @example
     * // Create many UserCompanyHistories
     * const userCompanyHistory = await prisma.userCompanyHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCompanyHistoryCreateManyArgs>(args?: SelectSubset<T, UserCompanyHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserCompanyHistories and returns the data saved in the database.
     * @param {UserCompanyHistoryCreateManyAndReturnArgs} args - Arguments to create many UserCompanyHistories.
     * @example
     * // Create many UserCompanyHistories
     * const userCompanyHistory = await prisma.userCompanyHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserCompanyHistories and only return the `id`
     * const userCompanyHistoryWithIdOnly = await prisma.userCompanyHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCompanyHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCompanyHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCompanyHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserCompanyHistory.
     * @param {UserCompanyHistoryDeleteArgs} args - Arguments to delete one UserCompanyHistory.
     * @example
     * // Delete one UserCompanyHistory
     * const UserCompanyHistory = await prisma.userCompanyHistory.delete({
     *   where: {
     *     // ... filter to delete one UserCompanyHistory
     *   }
     * })
     * 
     */
    delete<T extends UserCompanyHistoryDeleteArgs>(args: SelectSubset<T, UserCompanyHistoryDeleteArgs<ExtArgs>>): Prisma__UserCompanyHistoryClient<$Result.GetResult<Prisma.$UserCompanyHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserCompanyHistory.
     * @param {UserCompanyHistoryUpdateArgs} args - Arguments to update one UserCompanyHistory.
     * @example
     * // Update one UserCompanyHistory
     * const userCompanyHistory = await prisma.userCompanyHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserCompanyHistoryUpdateArgs>(args: SelectSubset<T, UserCompanyHistoryUpdateArgs<ExtArgs>>): Prisma__UserCompanyHistoryClient<$Result.GetResult<Prisma.$UserCompanyHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserCompanyHistories.
     * @param {UserCompanyHistoryDeleteManyArgs} args - Arguments to filter UserCompanyHistories to delete.
     * @example
     * // Delete a few UserCompanyHistories
     * const { count } = await prisma.userCompanyHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserCompanyHistoryDeleteManyArgs>(args?: SelectSubset<T, UserCompanyHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCompanyHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserCompanyHistories
     * const userCompanyHistory = await prisma.userCompanyHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserCompanyHistoryUpdateManyArgs>(args: SelectSubset<T, UserCompanyHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserCompanyHistory.
     * @param {UserCompanyHistoryUpsertArgs} args - Arguments to update or create a UserCompanyHistory.
     * @example
     * // Update or create a UserCompanyHistory
     * const userCompanyHistory = await prisma.userCompanyHistory.upsert({
     *   create: {
     *     // ... data to create a UserCompanyHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserCompanyHistory we want to update
     *   }
     * })
     */
    upsert<T extends UserCompanyHistoryUpsertArgs>(args: SelectSubset<T, UserCompanyHistoryUpsertArgs<ExtArgs>>): Prisma__UserCompanyHistoryClient<$Result.GetResult<Prisma.$UserCompanyHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserCompanyHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyHistoryCountArgs} args - Arguments to filter UserCompanyHistories to count.
     * @example
     * // Count the number of UserCompanyHistories
     * const count = await prisma.userCompanyHistory.count({
     *   where: {
     *     // ... the filter for the UserCompanyHistories we want to count
     *   }
     * })
    **/
    count<T extends UserCompanyHistoryCountArgs>(
      args?: Subset<T, UserCompanyHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCompanyHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserCompanyHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserCompanyHistoryAggregateArgs>(args: Subset<T, UserCompanyHistoryAggregateArgs>): Prisma.PrismaPromise<GetUserCompanyHistoryAggregateType<T>>

    /**
     * Group by UserCompanyHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserCompanyHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserCompanyHistoryGroupByArgs['orderBy'] }
        : { orderBy?: UserCompanyHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserCompanyHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserCompanyHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserCompanyHistory model
   */
  readonly fields: UserCompanyHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserCompanyHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserCompanyHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserCompanyHistory model
   */ 
  interface UserCompanyHistoryFieldRefs {
    readonly id: FieldRef<"UserCompanyHistory", 'Int'>
    readonly user_code: FieldRef<"UserCompanyHistory", 'String'>
    readonly company_code: FieldRef<"UserCompanyHistory", 'String'>
    readonly division_code: FieldRef<"UserCompanyHistory", 'String'>
    readonly tenant_code: FieldRef<"UserCompanyHistory", 'String'>
    readonly startDate: FieldRef<"UserCompanyHistory", 'DateTime'>
    readonly endDate: FieldRef<"UserCompanyHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserCompanyHistory findUnique
   */
  export type UserCompanyHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompanyHistory
     */
    select?: UserCompanyHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyHistoryInclude<ExtArgs> | null
    /**
     * Filter, which UserCompanyHistory to fetch.
     */
    where: UserCompanyHistoryWhereUniqueInput
  }

  /**
   * UserCompanyHistory findUniqueOrThrow
   */
  export type UserCompanyHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompanyHistory
     */
    select?: UserCompanyHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyHistoryInclude<ExtArgs> | null
    /**
     * Filter, which UserCompanyHistory to fetch.
     */
    where: UserCompanyHistoryWhereUniqueInput
  }

  /**
   * UserCompanyHistory findFirst
   */
  export type UserCompanyHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompanyHistory
     */
    select?: UserCompanyHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyHistoryInclude<ExtArgs> | null
    /**
     * Filter, which UserCompanyHistory to fetch.
     */
    where?: UserCompanyHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCompanyHistories to fetch.
     */
    orderBy?: UserCompanyHistoryOrderByWithRelationInput | UserCompanyHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCompanyHistories.
     */
    cursor?: UserCompanyHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCompanyHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCompanyHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCompanyHistories.
     */
    distinct?: UserCompanyHistoryScalarFieldEnum | UserCompanyHistoryScalarFieldEnum[]
  }

  /**
   * UserCompanyHistory findFirstOrThrow
   */
  export type UserCompanyHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompanyHistory
     */
    select?: UserCompanyHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyHistoryInclude<ExtArgs> | null
    /**
     * Filter, which UserCompanyHistory to fetch.
     */
    where?: UserCompanyHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCompanyHistories to fetch.
     */
    orderBy?: UserCompanyHistoryOrderByWithRelationInput | UserCompanyHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCompanyHistories.
     */
    cursor?: UserCompanyHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCompanyHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCompanyHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCompanyHistories.
     */
    distinct?: UserCompanyHistoryScalarFieldEnum | UserCompanyHistoryScalarFieldEnum[]
  }

  /**
   * UserCompanyHistory findMany
   */
  export type UserCompanyHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompanyHistory
     */
    select?: UserCompanyHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyHistoryInclude<ExtArgs> | null
    /**
     * Filter, which UserCompanyHistories to fetch.
     */
    where?: UserCompanyHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCompanyHistories to fetch.
     */
    orderBy?: UserCompanyHistoryOrderByWithRelationInput | UserCompanyHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserCompanyHistories.
     */
    cursor?: UserCompanyHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCompanyHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCompanyHistories.
     */
    skip?: number
    distinct?: UserCompanyHistoryScalarFieldEnum | UserCompanyHistoryScalarFieldEnum[]
  }

  /**
   * UserCompanyHistory create
   */
  export type UserCompanyHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompanyHistory
     */
    select?: UserCompanyHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a UserCompanyHistory.
     */
    data: XOR<UserCompanyHistoryCreateInput, UserCompanyHistoryUncheckedCreateInput>
  }

  /**
   * UserCompanyHistory createMany
   */
  export type UserCompanyHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserCompanyHistories.
     */
    data: UserCompanyHistoryCreateManyInput | UserCompanyHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserCompanyHistory createManyAndReturn
   */
  export type UserCompanyHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompanyHistory
     */
    select?: UserCompanyHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserCompanyHistories.
     */
    data: UserCompanyHistoryCreateManyInput | UserCompanyHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserCompanyHistory update
   */
  export type UserCompanyHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompanyHistory
     */
    select?: UserCompanyHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a UserCompanyHistory.
     */
    data: XOR<UserCompanyHistoryUpdateInput, UserCompanyHistoryUncheckedUpdateInput>
    /**
     * Choose, which UserCompanyHistory to update.
     */
    where: UserCompanyHistoryWhereUniqueInput
  }

  /**
   * UserCompanyHistory updateMany
   */
  export type UserCompanyHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserCompanyHistories.
     */
    data: XOR<UserCompanyHistoryUpdateManyMutationInput, UserCompanyHistoryUncheckedUpdateManyInput>
    /**
     * Filter which UserCompanyHistories to update
     */
    where?: UserCompanyHistoryWhereInput
  }

  /**
   * UserCompanyHistory upsert
   */
  export type UserCompanyHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompanyHistory
     */
    select?: UserCompanyHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the UserCompanyHistory to update in case it exists.
     */
    where: UserCompanyHistoryWhereUniqueInput
    /**
     * In case the UserCompanyHistory found by the `where` argument doesn't exist, create a new UserCompanyHistory with this data.
     */
    create: XOR<UserCompanyHistoryCreateInput, UserCompanyHistoryUncheckedCreateInput>
    /**
     * In case the UserCompanyHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserCompanyHistoryUpdateInput, UserCompanyHistoryUncheckedUpdateInput>
  }

  /**
   * UserCompanyHistory delete
   */
  export type UserCompanyHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompanyHistory
     */
    select?: UserCompanyHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyHistoryInclude<ExtArgs> | null
    /**
     * Filter which UserCompanyHistory to delete.
     */
    where: UserCompanyHistoryWhereUniqueInput
  }

  /**
   * UserCompanyHistory deleteMany
   */
  export type UserCompanyHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCompanyHistories to delete
     */
    where?: UserCompanyHistoryWhereInput
  }

  /**
   * UserCompanyHistory without action
   */
  export type UserCompanyHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompanyHistory
     */
    select?: UserCompanyHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyHistoryInclude<ExtArgs> | null
  }


  /**
   * Model UserDivisionHistory
   */

  export type AggregateUserDivisionHistory = {
    _count: UserDivisionHistoryCountAggregateOutputType | null
    _avg: UserDivisionHistoryAvgAggregateOutputType | null
    _sum: UserDivisionHistorySumAggregateOutputType | null
    _min: UserDivisionHistoryMinAggregateOutputType | null
    _max: UserDivisionHistoryMaxAggregateOutputType | null
  }

  export type UserDivisionHistoryAvgAggregateOutputType = {
    id: number | null
  }

  export type UserDivisionHistorySumAggregateOutputType = {
    id: number | null
  }

  export type UserDivisionHistoryMinAggregateOutputType = {
    id: number | null
    user_code: string | null
    division_code: string | null
    company_code: string | null
    tenant_code: string | null
    startDate: Date | null
    endDate: Date | null
  }

  export type UserDivisionHistoryMaxAggregateOutputType = {
    id: number | null
    user_code: string | null
    division_code: string | null
    company_code: string | null
    tenant_code: string | null
    startDate: Date | null
    endDate: Date | null
  }

  export type UserDivisionHistoryCountAggregateOutputType = {
    id: number
    user_code: number
    division_code: number
    company_code: number
    tenant_code: number
    startDate: number
    endDate: number
    _all: number
  }


  export type UserDivisionHistoryAvgAggregateInputType = {
    id?: true
  }

  export type UserDivisionHistorySumAggregateInputType = {
    id?: true
  }

  export type UserDivisionHistoryMinAggregateInputType = {
    id?: true
    user_code?: true
    division_code?: true
    company_code?: true
    tenant_code?: true
    startDate?: true
    endDate?: true
  }

  export type UserDivisionHistoryMaxAggregateInputType = {
    id?: true
    user_code?: true
    division_code?: true
    company_code?: true
    tenant_code?: true
    startDate?: true
    endDate?: true
  }

  export type UserDivisionHistoryCountAggregateInputType = {
    id?: true
    user_code?: true
    division_code?: true
    company_code?: true
    tenant_code?: true
    startDate?: true
    endDate?: true
    _all?: true
  }

  export type UserDivisionHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserDivisionHistory to aggregate.
     */
    where?: UserDivisionHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDivisionHistories to fetch.
     */
    orderBy?: UserDivisionHistoryOrderByWithRelationInput | UserDivisionHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserDivisionHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDivisionHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDivisionHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserDivisionHistories
    **/
    _count?: true | UserDivisionHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserDivisionHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserDivisionHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserDivisionHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserDivisionHistoryMaxAggregateInputType
  }

  export type GetUserDivisionHistoryAggregateType<T extends UserDivisionHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateUserDivisionHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserDivisionHistory[P]>
      : GetScalarType<T[P], AggregateUserDivisionHistory[P]>
  }




  export type UserDivisionHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserDivisionHistoryWhereInput
    orderBy?: UserDivisionHistoryOrderByWithAggregationInput | UserDivisionHistoryOrderByWithAggregationInput[]
    by: UserDivisionHistoryScalarFieldEnum[] | UserDivisionHistoryScalarFieldEnum
    having?: UserDivisionHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserDivisionHistoryCountAggregateInputType | true
    _avg?: UserDivisionHistoryAvgAggregateInputType
    _sum?: UserDivisionHistorySumAggregateInputType
    _min?: UserDivisionHistoryMinAggregateInputType
    _max?: UserDivisionHistoryMaxAggregateInputType
  }

  export type UserDivisionHistoryGroupByOutputType = {
    id: number
    user_code: string
    division_code: string
    company_code: string
    tenant_code: string
    startDate: Date
    endDate: Date | null
    _count: UserDivisionHistoryCountAggregateOutputType | null
    _avg: UserDivisionHistoryAvgAggregateOutputType | null
    _sum: UserDivisionHistorySumAggregateOutputType | null
    _min: UserDivisionHistoryMinAggregateOutputType | null
    _max: UserDivisionHistoryMaxAggregateOutputType | null
  }

  type GetUserDivisionHistoryGroupByPayload<T extends UserDivisionHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserDivisionHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserDivisionHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserDivisionHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], UserDivisionHistoryGroupByOutputType[P]>
        }
      >
    >


  export type UserDivisionHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_code?: boolean
    division_code?: boolean
    company_code?: boolean
    tenant_code?: boolean
    startDate?: boolean
    endDate?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    division?: boolean | DivisionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userDivisionHistory"]>

  export type UserDivisionHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_code?: boolean
    division_code?: boolean
    company_code?: boolean
    tenant_code?: boolean
    startDate?: boolean
    endDate?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    division?: boolean | DivisionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userDivisionHistory"]>

  export type UserDivisionHistorySelectScalar = {
    id?: boolean
    user_code?: boolean
    division_code?: boolean
    company_code?: boolean
    tenant_code?: boolean
    startDate?: boolean
    endDate?: boolean
  }

  export type UserDivisionHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    division?: boolean | DivisionDefaultArgs<ExtArgs>
  }
  export type UserDivisionHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    division?: boolean | DivisionDefaultArgs<ExtArgs>
  }

  export type $UserDivisionHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserDivisionHistory"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      division: Prisma.$DivisionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_code: string
      division_code: string
      company_code: string
      tenant_code: string
      startDate: Date
      endDate: Date | null
    }, ExtArgs["result"]["userDivisionHistory"]>
    composites: {}
  }

  type UserDivisionHistoryGetPayload<S extends boolean | null | undefined | UserDivisionHistoryDefaultArgs> = $Result.GetResult<Prisma.$UserDivisionHistoryPayload, S>

  type UserDivisionHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserDivisionHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserDivisionHistoryCountAggregateInputType | true
    }

  export interface UserDivisionHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserDivisionHistory'], meta: { name: 'UserDivisionHistory' } }
    /**
     * Find zero or one UserDivisionHistory that matches the filter.
     * @param {UserDivisionHistoryFindUniqueArgs} args - Arguments to find a UserDivisionHistory
     * @example
     * // Get one UserDivisionHistory
     * const userDivisionHistory = await prisma.userDivisionHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserDivisionHistoryFindUniqueArgs>(args: SelectSubset<T, UserDivisionHistoryFindUniqueArgs<ExtArgs>>): Prisma__UserDivisionHistoryClient<$Result.GetResult<Prisma.$UserDivisionHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserDivisionHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserDivisionHistoryFindUniqueOrThrowArgs} args - Arguments to find a UserDivisionHistory
     * @example
     * // Get one UserDivisionHistory
     * const userDivisionHistory = await prisma.userDivisionHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserDivisionHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, UserDivisionHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserDivisionHistoryClient<$Result.GetResult<Prisma.$UserDivisionHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserDivisionHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDivisionHistoryFindFirstArgs} args - Arguments to find a UserDivisionHistory
     * @example
     * // Get one UserDivisionHistory
     * const userDivisionHistory = await prisma.userDivisionHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserDivisionHistoryFindFirstArgs>(args?: SelectSubset<T, UserDivisionHistoryFindFirstArgs<ExtArgs>>): Prisma__UserDivisionHistoryClient<$Result.GetResult<Prisma.$UserDivisionHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserDivisionHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDivisionHistoryFindFirstOrThrowArgs} args - Arguments to find a UserDivisionHistory
     * @example
     * // Get one UserDivisionHistory
     * const userDivisionHistory = await prisma.userDivisionHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserDivisionHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, UserDivisionHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserDivisionHistoryClient<$Result.GetResult<Prisma.$UserDivisionHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserDivisionHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDivisionHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserDivisionHistories
     * const userDivisionHistories = await prisma.userDivisionHistory.findMany()
     * 
     * // Get first 10 UserDivisionHistories
     * const userDivisionHistories = await prisma.userDivisionHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userDivisionHistoryWithIdOnly = await prisma.userDivisionHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserDivisionHistoryFindManyArgs>(args?: SelectSubset<T, UserDivisionHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDivisionHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserDivisionHistory.
     * @param {UserDivisionHistoryCreateArgs} args - Arguments to create a UserDivisionHistory.
     * @example
     * // Create one UserDivisionHistory
     * const UserDivisionHistory = await prisma.userDivisionHistory.create({
     *   data: {
     *     // ... data to create a UserDivisionHistory
     *   }
     * })
     * 
     */
    create<T extends UserDivisionHistoryCreateArgs>(args: SelectSubset<T, UserDivisionHistoryCreateArgs<ExtArgs>>): Prisma__UserDivisionHistoryClient<$Result.GetResult<Prisma.$UserDivisionHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserDivisionHistories.
     * @param {UserDivisionHistoryCreateManyArgs} args - Arguments to create many UserDivisionHistories.
     * @example
     * // Create many UserDivisionHistories
     * const userDivisionHistory = await prisma.userDivisionHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserDivisionHistoryCreateManyArgs>(args?: SelectSubset<T, UserDivisionHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserDivisionHistories and returns the data saved in the database.
     * @param {UserDivisionHistoryCreateManyAndReturnArgs} args - Arguments to create many UserDivisionHistories.
     * @example
     * // Create many UserDivisionHistories
     * const userDivisionHistory = await prisma.userDivisionHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserDivisionHistories and only return the `id`
     * const userDivisionHistoryWithIdOnly = await prisma.userDivisionHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserDivisionHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, UserDivisionHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDivisionHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserDivisionHistory.
     * @param {UserDivisionHistoryDeleteArgs} args - Arguments to delete one UserDivisionHistory.
     * @example
     * // Delete one UserDivisionHistory
     * const UserDivisionHistory = await prisma.userDivisionHistory.delete({
     *   where: {
     *     // ... filter to delete one UserDivisionHistory
     *   }
     * })
     * 
     */
    delete<T extends UserDivisionHistoryDeleteArgs>(args: SelectSubset<T, UserDivisionHistoryDeleteArgs<ExtArgs>>): Prisma__UserDivisionHistoryClient<$Result.GetResult<Prisma.$UserDivisionHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserDivisionHistory.
     * @param {UserDivisionHistoryUpdateArgs} args - Arguments to update one UserDivisionHistory.
     * @example
     * // Update one UserDivisionHistory
     * const userDivisionHistory = await prisma.userDivisionHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserDivisionHistoryUpdateArgs>(args: SelectSubset<T, UserDivisionHistoryUpdateArgs<ExtArgs>>): Prisma__UserDivisionHistoryClient<$Result.GetResult<Prisma.$UserDivisionHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserDivisionHistories.
     * @param {UserDivisionHistoryDeleteManyArgs} args - Arguments to filter UserDivisionHistories to delete.
     * @example
     * // Delete a few UserDivisionHistories
     * const { count } = await prisma.userDivisionHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDivisionHistoryDeleteManyArgs>(args?: SelectSubset<T, UserDivisionHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserDivisionHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDivisionHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserDivisionHistories
     * const userDivisionHistory = await prisma.userDivisionHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserDivisionHistoryUpdateManyArgs>(args: SelectSubset<T, UserDivisionHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserDivisionHistory.
     * @param {UserDivisionHistoryUpsertArgs} args - Arguments to update or create a UserDivisionHistory.
     * @example
     * // Update or create a UserDivisionHistory
     * const userDivisionHistory = await prisma.userDivisionHistory.upsert({
     *   create: {
     *     // ... data to create a UserDivisionHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserDivisionHistory we want to update
     *   }
     * })
     */
    upsert<T extends UserDivisionHistoryUpsertArgs>(args: SelectSubset<T, UserDivisionHistoryUpsertArgs<ExtArgs>>): Prisma__UserDivisionHistoryClient<$Result.GetResult<Prisma.$UserDivisionHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserDivisionHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDivisionHistoryCountArgs} args - Arguments to filter UserDivisionHistories to count.
     * @example
     * // Count the number of UserDivisionHistories
     * const count = await prisma.userDivisionHistory.count({
     *   where: {
     *     // ... the filter for the UserDivisionHistories we want to count
     *   }
     * })
    **/
    count<T extends UserDivisionHistoryCountArgs>(
      args?: Subset<T, UserDivisionHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserDivisionHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserDivisionHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDivisionHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserDivisionHistoryAggregateArgs>(args: Subset<T, UserDivisionHistoryAggregateArgs>): Prisma.PrismaPromise<GetUserDivisionHistoryAggregateType<T>>

    /**
     * Group by UserDivisionHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDivisionHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserDivisionHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserDivisionHistoryGroupByArgs['orderBy'] }
        : { orderBy?: UserDivisionHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserDivisionHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserDivisionHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserDivisionHistory model
   */
  readonly fields: UserDivisionHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserDivisionHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserDivisionHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    division<T extends DivisionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DivisionDefaultArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserDivisionHistory model
   */ 
  interface UserDivisionHistoryFieldRefs {
    readonly id: FieldRef<"UserDivisionHistory", 'Int'>
    readonly user_code: FieldRef<"UserDivisionHistory", 'String'>
    readonly division_code: FieldRef<"UserDivisionHistory", 'String'>
    readonly company_code: FieldRef<"UserDivisionHistory", 'String'>
    readonly tenant_code: FieldRef<"UserDivisionHistory", 'String'>
    readonly startDate: FieldRef<"UserDivisionHistory", 'DateTime'>
    readonly endDate: FieldRef<"UserDivisionHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserDivisionHistory findUnique
   */
  export type UserDivisionHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDivisionHistory
     */
    select?: UserDivisionHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDivisionHistoryInclude<ExtArgs> | null
    /**
     * Filter, which UserDivisionHistory to fetch.
     */
    where: UserDivisionHistoryWhereUniqueInput
  }

  /**
   * UserDivisionHistory findUniqueOrThrow
   */
  export type UserDivisionHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDivisionHistory
     */
    select?: UserDivisionHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDivisionHistoryInclude<ExtArgs> | null
    /**
     * Filter, which UserDivisionHistory to fetch.
     */
    where: UserDivisionHistoryWhereUniqueInput
  }

  /**
   * UserDivisionHistory findFirst
   */
  export type UserDivisionHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDivisionHistory
     */
    select?: UserDivisionHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDivisionHistoryInclude<ExtArgs> | null
    /**
     * Filter, which UserDivisionHistory to fetch.
     */
    where?: UserDivisionHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDivisionHistories to fetch.
     */
    orderBy?: UserDivisionHistoryOrderByWithRelationInput | UserDivisionHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserDivisionHistories.
     */
    cursor?: UserDivisionHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDivisionHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDivisionHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserDivisionHistories.
     */
    distinct?: UserDivisionHistoryScalarFieldEnum | UserDivisionHistoryScalarFieldEnum[]
  }

  /**
   * UserDivisionHistory findFirstOrThrow
   */
  export type UserDivisionHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDivisionHistory
     */
    select?: UserDivisionHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDivisionHistoryInclude<ExtArgs> | null
    /**
     * Filter, which UserDivisionHistory to fetch.
     */
    where?: UserDivisionHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDivisionHistories to fetch.
     */
    orderBy?: UserDivisionHistoryOrderByWithRelationInput | UserDivisionHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserDivisionHistories.
     */
    cursor?: UserDivisionHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDivisionHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDivisionHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserDivisionHistories.
     */
    distinct?: UserDivisionHistoryScalarFieldEnum | UserDivisionHistoryScalarFieldEnum[]
  }

  /**
   * UserDivisionHistory findMany
   */
  export type UserDivisionHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDivisionHistory
     */
    select?: UserDivisionHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDivisionHistoryInclude<ExtArgs> | null
    /**
     * Filter, which UserDivisionHistories to fetch.
     */
    where?: UserDivisionHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDivisionHistories to fetch.
     */
    orderBy?: UserDivisionHistoryOrderByWithRelationInput | UserDivisionHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserDivisionHistories.
     */
    cursor?: UserDivisionHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDivisionHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDivisionHistories.
     */
    skip?: number
    distinct?: UserDivisionHistoryScalarFieldEnum | UserDivisionHistoryScalarFieldEnum[]
  }

  /**
   * UserDivisionHistory create
   */
  export type UserDivisionHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDivisionHistory
     */
    select?: UserDivisionHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDivisionHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a UserDivisionHistory.
     */
    data: XOR<UserDivisionHistoryCreateInput, UserDivisionHistoryUncheckedCreateInput>
  }

  /**
   * UserDivisionHistory createMany
   */
  export type UserDivisionHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserDivisionHistories.
     */
    data: UserDivisionHistoryCreateManyInput | UserDivisionHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserDivisionHistory createManyAndReturn
   */
  export type UserDivisionHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDivisionHistory
     */
    select?: UserDivisionHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserDivisionHistories.
     */
    data: UserDivisionHistoryCreateManyInput | UserDivisionHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDivisionHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserDivisionHistory update
   */
  export type UserDivisionHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDivisionHistory
     */
    select?: UserDivisionHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDivisionHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a UserDivisionHistory.
     */
    data: XOR<UserDivisionHistoryUpdateInput, UserDivisionHistoryUncheckedUpdateInput>
    /**
     * Choose, which UserDivisionHistory to update.
     */
    where: UserDivisionHistoryWhereUniqueInput
  }

  /**
   * UserDivisionHistory updateMany
   */
  export type UserDivisionHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserDivisionHistories.
     */
    data: XOR<UserDivisionHistoryUpdateManyMutationInput, UserDivisionHistoryUncheckedUpdateManyInput>
    /**
     * Filter which UserDivisionHistories to update
     */
    where?: UserDivisionHistoryWhereInput
  }

  /**
   * UserDivisionHistory upsert
   */
  export type UserDivisionHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDivisionHistory
     */
    select?: UserDivisionHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDivisionHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the UserDivisionHistory to update in case it exists.
     */
    where: UserDivisionHistoryWhereUniqueInput
    /**
     * In case the UserDivisionHistory found by the `where` argument doesn't exist, create a new UserDivisionHistory with this data.
     */
    create: XOR<UserDivisionHistoryCreateInput, UserDivisionHistoryUncheckedCreateInput>
    /**
     * In case the UserDivisionHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserDivisionHistoryUpdateInput, UserDivisionHistoryUncheckedUpdateInput>
  }

  /**
   * UserDivisionHistory delete
   */
  export type UserDivisionHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDivisionHistory
     */
    select?: UserDivisionHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDivisionHistoryInclude<ExtArgs> | null
    /**
     * Filter which UserDivisionHistory to delete.
     */
    where: UserDivisionHistoryWhereUniqueInput
  }

  /**
   * UserDivisionHistory deleteMany
   */
  export type UserDivisionHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserDivisionHistories to delete
     */
    where?: UserDivisionHistoryWhereInput
  }

  /**
   * UserDivisionHistory without action
   */
  export type UserDivisionHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDivisionHistory
     */
    select?: UserDivisionHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDivisionHistoryInclude<ExtArgs> | null
  }


  /**
   * Model AttendanceLocation
   */

  export type AggregateAttendanceLocation = {
    _count: AttendanceLocationCountAggregateOutputType | null
    _avg: AttendanceLocationAvgAggregateOutputType | null
    _sum: AttendanceLocationSumAggregateOutputType | null
    _min: AttendanceLocationMinAggregateOutputType | null
    _max: AttendanceLocationMaxAggregateOutputType | null
  }

  export type AttendanceLocationAvgAggregateOutputType = {
    id: number | null
  }

  export type AttendanceLocationSumAggregateOutputType = {
    id: number | null
  }

  export type AttendanceLocationMinAggregateOutputType = {
    id: number | null
    company_code: string | null
    attendance_location_code: string | null
    tenant_code: string | null
    name: string | null
    lat: string | null
    lng: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AttendanceLocationMaxAggregateOutputType = {
    id: number | null
    company_code: string | null
    attendance_location_code: string | null
    tenant_code: string | null
    name: string | null
    lat: string | null
    lng: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AttendanceLocationCountAggregateOutputType = {
    id: number
    company_code: number
    attendance_location_code: number
    tenant_code: number
    name: number
    lat: number
    lng: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AttendanceLocationAvgAggregateInputType = {
    id?: true
  }

  export type AttendanceLocationSumAggregateInputType = {
    id?: true
  }

  export type AttendanceLocationMinAggregateInputType = {
    id?: true
    company_code?: true
    attendance_location_code?: true
    tenant_code?: true
    name?: true
    lat?: true
    lng?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AttendanceLocationMaxAggregateInputType = {
    id?: true
    company_code?: true
    attendance_location_code?: true
    tenant_code?: true
    name?: true
    lat?: true
    lng?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AttendanceLocationCountAggregateInputType = {
    id?: true
    company_code?: true
    attendance_location_code?: true
    tenant_code?: true
    name?: true
    lat?: true
    lng?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AttendanceLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AttendanceLocation to aggregate.
     */
    where?: AttendanceLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceLocations to fetch.
     */
    orderBy?: AttendanceLocationOrderByWithRelationInput | AttendanceLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttendanceLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AttendanceLocations
    **/
    _count?: true | AttendanceLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttendanceLocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttendanceLocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceLocationMaxAggregateInputType
  }

  export type GetAttendanceLocationAggregateType<T extends AttendanceLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendanceLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendanceLocation[P]>
      : GetScalarType<T[P], AggregateAttendanceLocation[P]>
  }




  export type AttendanceLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceLocationWhereInput
    orderBy?: AttendanceLocationOrderByWithAggregationInput | AttendanceLocationOrderByWithAggregationInput[]
    by: AttendanceLocationScalarFieldEnum[] | AttendanceLocationScalarFieldEnum
    having?: AttendanceLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceLocationCountAggregateInputType | true
    _avg?: AttendanceLocationAvgAggregateInputType
    _sum?: AttendanceLocationSumAggregateInputType
    _min?: AttendanceLocationMinAggregateInputType
    _max?: AttendanceLocationMaxAggregateInputType
  }

  export type AttendanceLocationGroupByOutputType = {
    id: number
    company_code: string
    attendance_location_code: string
    tenant_code: string
    name: string
    lat: string
    lng: string
    createdAt: Date
    updatedAt: Date
    _count: AttendanceLocationCountAggregateOutputType | null
    _avg: AttendanceLocationAvgAggregateOutputType | null
    _sum: AttendanceLocationSumAggregateOutputType | null
    _min: AttendanceLocationMinAggregateOutputType | null
    _max: AttendanceLocationMaxAggregateOutputType | null
  }

  type GetAttendanceLocationGroupByPayload<T extends AttendanceLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendanceLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceLocationGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceLocationGroupByOutputType[P]>
        }
      >
    >


  export type AttendanceLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_code?: boolean
    attendance_location_code?: boolean
    tenant_code?: boolean
    name?: boolean
    lat?: boolean
    lng?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user_attendance_location?: boolean | AttendanceLocation$user_attendance_locationArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    _count?: boolean | AttendanceLocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendanceLocation"]>

  export type AttendanceLocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_code?: boolean
    attendance_location_code?: boolean
    tenant_code?: boolean
    name?: boolean
    lat?: boolean
    lng?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendanceLocation"]>

  export type AttendanceLocationSelectScalar = {
    id?: boolean
    company_code?: boolean
    attendance_location_code?: boolean
    tenant_code?: boolean
    name?: boolean
    lat?: boolean
    lng?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AttendanceLocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_attendance_location?: boolean | AttendanceLocation$user_attendance_locationArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    _count?: boolean | AttendanceLocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AttendanceLocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $AttendanceLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AttendanceLocation"
    objects: {
      user_attendance_location: Prisma.$UserAttendanceLocationPayload<ExtArgs>[]
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      company_code: string
      attendance_location_code: string
      tenant_code: string
      name: string
      lat: string
      lng: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["attendanceLocation"]>
    composites: {}
  }

  type AttendanceLocationGetPayload<S extends boolean | null | undefined | AttendanceLocationDefaultArgs> = $Result.GetResult<Prisma.$AttendanceLocationPayload, S>

  type AttendanceLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AttendanceLocationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AttendanceLocationCountAggregateInputType | true
    }

  export interface AttendanceLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AttendanceLocation'], meta: { name: 'AttendanceLocation' } }
    /**
     * Find zero or one AttendanceLocation that matches the filter.
     * @param {AttendanceLocationFindUniqueArgs} args - Arguments to find a AttendanceLocation
     * @example
     * // Get one AttendanceLocation
     * const attendanceLocation = await prisma.attendanceLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttendanceLocationFindUniqueArgs>(args: SelectSubset<T, AttendanceLocationFindUniqueArgs<ExtArgs>>): Prisma__AttendanceLocationClient<$Result.GetResult<Prisma.$AttendanceLocationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AttendanceLocation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AttendanceLocationFindUniqueOrThrowArgs} args - Arguments to find a AttendanceLocation
     * @example
     * // Get one AttendanceLocation
     * const attendanceLocation = await prisma.attendanceLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttendanceLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, AttendanceLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttendanceLocationClient<$Result.GetResult<Prisma.$AttendanceLocationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AttendanceLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLocationFindFirstArgs} args - Arguments to find a AttendanceLocation
     * @example
     * // Get one AttendanceLocation
     * const attendanceLocation = await prisma.attendanceLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttendanceLocationFindFirstArgs>(args?: SelectSubset<T, AttendanceLocationFindFirstArgs<ExtArgs>>): Prisma__AttendanceLocationClient<$Result.GetResult<Prisma.$AttendanceLocationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AttendanceLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLocationFindFirstOrThrowArgs} args - Arguments to find a AttendanceLocation
     * @example
     * // Get one AttendanceLocation
     * const attendanceLocation = await prisma.attendanceLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttendanceLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, AttendanceLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttendanceLocationClient<$Result.GetResult<Prisma.$AttendanceLocationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AttendanceLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AttendanceLocations
     * const attendanceLocations = await prisma.attendanceLocation.findMany()
     * 
     * // Get first 10 AttendanceLocations
     * const attendanceLocations = await prisma.attendanceLocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendanceLocationWithIdOnly = await prisma.attendanceLocation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttendanceLocationFindManyArgs>(args?: SelectSubset<T, AttendanceLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceLocationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AttendanceLocation.
     * @param {AttendanceLocationCreateArgs} args - Arguments to create a AttendanceLocation.
     * @example
     * // Create one AttendanceLocation
     * const AttendanceLocation = await prisma.attendanceLocation.create({
     *   data: {
     *     // ... data to create a AttendanceLocation
     *   }
     * })
     * 
     */
    create<T extends AttendanceLocationCreateArgs>(args: SelectSubset<T, AttendanceLocationCreateArgs<ExtArgs>>): Prisma__AttendanceLocationClient<$Result.GetResult<Prisma.$AttendanceLocationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AttendanceLocations.
     * @param {AttendanceLocationCreateManyArgs} args - Arguments to create many AttendanceLocations.
     * @example
     * // Create many AttendanceLocations
     * const attendanceLocation = await prisma.attendanceLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttendanceLocationCreateManyArgs>(args?: SelectSubset<T, AttendanceLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AttendanceLocations and returns the data saved in the database.
     * @param {AttendanceLocationCreateManyAndReturnArgs} args - Arguments to create many AttendanceLocations.
     * @example
     * // Create many AttendanceLocations
     * const attendanceLocation = await prisma.attendanceLocation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AttendanceLocations and only return the `id`
     * const attendanceLocationWithIdOnly = await prisma.attendanceLocation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttendanceLocationCreateManyAndReturnArgs>(args?: SelectSubset<T, AttendanceLocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceLocationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AttendanceLocation.
     * @param {AttendanceLocationDeleteArgs} args - Arguments to delete one AttendanceLocation.
     * @example
     * // Delete one AttendanceLocation
     * const AttendanceLocation = await prisma.attendanceLocation.delete({
     *   where: {
     *     // ... filter to delete one AttendanceLocation
     *   }
     * })
     * 
     */
    delete<T extends AttendanceLocationDeleteArgs>(args: SelectSubset<T, AttendanceLocationDeleteArgs<ExtArgs>>): Prisma__AttendanceLocationClient<$Result.GetResult<Prisma.$AttendanceLocationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AttendanceLocation.
     * @param {AttendanceLocationUpdateArgs} args - Arguments to update one AttendanceLocation.
     * @example
     * // Update one AttendanceLocation
     * const attendanceLocation = await prisma.attendanceLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttendanceLocationUpdateArgs>(args: SelectSubset<T, AttendanceLocationUpdateArgs<ExtArgs>>): Prisma__AttendanceLocationClient<$Result.GetResult<Prisma.$AttendanceLocationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AttendanceLocations.
     * @param {AttendanceLocationDeleteManyArgs} args - Arguments to filter AttendanceLocations to delete.
     * @example
     * // Delete a few AttendanceLocations
     * const { count } = await prisma.attendanceLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttendanceLocationDeleteManyArgs>(args?: SelectSubset<T, AttendanceLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AttendanceLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AttendanceLocations
     * const attendanceLocation = await prisma.attendanceLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttendanceLocationUpdateManyArgs>(args: SelectSubset<T, AttendanceLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AttendanceLocation.
     * @param {AttendanceLocationUpsertArgs} args - Arguments to update or create a AttendanceLocation.
     * @example
     * // Update or create a AttendanceLocation
     * const attendanceLocation = await prisma.attendanceLocation.upsert({
     *   create: {
     *     // ... data to create a AttendanceLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AttendanceLocation we want to update
     *   }
     * })
     */
    upsert<T extends AttendanceLocationUpsertArgs>(args: SelectSubset<T, AttendanceLocationUpsertArgs<ExtArgs>>): Prisma__AttendanceLocationClient<$Result.GetResult<Prisma.$AttendanceLocationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AttendanceLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLocationCountArgs} args - Arguments to filter AttendanceLocations to count.
     * @example
     * // Count the number of AttendanceLocations
     * const count = await prisma.attendanceLocation.count({
     *   where: {
     *     // ... the filter for the AttendanceLocations we want to count
     *   }
     * })
    **/
    count<T extends AttendanceLocationCountArgs>(
      args?: Subset<T, AttendanceLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AttendanceLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceLocationAggregateArgs>(args: Subset<T, AttendanceLocationAggregateArgs>): Prisma.PrismaPromise<GetAttendanceLocationAggregateType<T>>

    /**
     * Group by AttendanceLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttendanceLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttendanceLocationGroupByArgs['orderBy'] }
        : { orderBy?: AttendanceLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttendanceLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AttendanceLocation model
   */
  readonly fields: AttendanceLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AttendanceLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttendanceLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user_attendance_location<T extends AttendanceLocation$user_attendance_locationArgs<ExtArgs> = {}>(args?: Subset<T, AttendanceLocation$user_attendance_locationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAttendanceLocationPayload<ExtArgs>, T, "findMany"> | Null>
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AttendanceLocation model
   */ 
  interface AttendanceLocationFieldRefs {
    readonly id: FieldRef<"AttendanceLocation", 'Int'>
    readonly company_code: FieldRef<"AttendanceLocation", 'String'>
    readonly attendance_location_code: FieldRef<"AttendanceLocation", 'String'>
    readonly tenant_code: FieldRef<"AttendanceLocation", 'String'>
    readonly name: FieldRef<"AttendanceLocation", 'String'>
    readonly lat: FieldRef<"AttendanceLocation", 'String'>
    readonly lng: FieldRef<"AttendanceLocation", 'String'>
    readonly createdAt: FieldRef<"AttendanceLocation", 'DateTime'>
    readonly updatedAt: FieldRef<"AttendanceLocation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AttendanceLocation findUnique
   */
  export type AttendanceLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLocation
     */
    select?: AttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLocationInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceLocation to fetch.
     */
    where: AttendanceLocationWhereUniqueInput
  }

  /**
   * AttendanceLocation findUniqueOrThrow
   */
  export type AttendanceLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLocation
     */
    select?: AttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLocationInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceLocation to fetch.
     */
    where: AttendanceLocationWhereUniqueInput
  }

  /**
   * AttendanceLocation findFirst
   */
  export type AttendanceLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLocation
     */
    select?: AttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLocationInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceLocation to fetch.
     */
    where?: AttendanceLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceLocations to fetch.
     */
    orderBy?: AttendanceLocationOrderByWithRelationInput | AttendanceLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttendanceLocations.
     */
    cursor?: AttendanceLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttendanceLocations.
     */
    distinct?: AttendanceLocationScalarFieldEnum | AttendanceLocationScalarFieldEnum[]
  }

  /**
   * AttendanceLocation findFirstOrThrow
   */
  export type AttendanceLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLocation
     */
    select?: AttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLocationInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceLocation to fetch.
     */
    where?: AttendanceLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceLocations to fetch.
     */
    orderBy?: AttendanceLocationOrderByWithRelationInput | AttendanceLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttendanceLocations.
     */
    cursor?: AttendanceLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttendanceLocations.
     */
    distinct?: AttendanceLocationScalarFieldEnum | AttendanceLocationScalarFieldEnum[]
  }

  /**
   * AttendanceLocation findMany
   */
  export type AttendanceLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLocation
     */
    select?: AttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLocationInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceLocations to fetch.
     */
    where?: AttendanceLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceLocations to fetch.
     */
    orderBy?: AttendanceLocationOrderByWithRelationInput | AttendanceLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AttendanceLocations.
     */
    cursor?: AttendanceLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceLocations.
     */
    skip?: number
    distinct?: AttendanceLocationScalarFieldEnum | AttendanceLocationScalarFieldEnum[]
  }

  /**
   * AttendanceLocation create
   */
  export type AttendanceLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLocation
     */
    select?: AttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLocationInclude<ExtArgs> | null
    /**
     * The data needed to create a AttendanceLocation.
     */
    data: XOR<AttendanceLocationCreateInput, AttendanceLocationUncheckedCreateInput>
  }

  /**
   * AttendanceLocation createMany
   */
  export type AttendanceLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AttendanceLocations.
     */
    data: AttendanceLocationCreateManyInput | AttendanceLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AttendanceLocation createManyAndReturn
   */
  export type AttendanceLocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLocation
     */
    select?: AttendanceLocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AttendanceLocations.
     */
    data: AttendanceLocationCreateManyInput | AttendanceLocationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLocationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AttendanceLocation update
   */
  export type AttendanceLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLocation
     */
    select?: AttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLocationInclude<ExtArgs> | null
    /**
     * The data needed to update a AttendanceLocation.
     */
    data: XOR<AttendanceLocationUpdateInput, AttendanceLocationUncheckedUpdateInput>
    /**
     * Choose, which AttendanceLocation to update.
     */
    where: AttendanceLocationWhereUniqueInput
  }

  /**
   * AttendanceLocation updateMany
   */
  export type AttendanceLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AttendanceLocations.
     */
    data: XOR<AttendanceLocationUpdateManyMutationInput, AttendanceLocationUncheckedUpdateManyInput>
    /**
     * Filter which AttendanceLocations to update
     */
    where?: AttendanceLocationWhereInput
  }

  /**
   * AttendanceLocation upsert
   */
  export type AttendanceLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLocation
     */
    select?: AttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLocationInclude<ExtArgs> | null
    /**
     * The filter to search for the AttendanceLocation to update in case it exists.
     */
    where: AttendanceLocationWhereUniqueInput
    /**
     * In case the AttendanceLocation found by the `where` argument doesn't exist, create a new AttendanceLocation with this data.
     */
    create: XOR<AttendanceLocationCreateInput, AttendanceLocationUncheckedCreateInput>
    /**
     * In case the AttendanceLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttendanceLocationUpdateInput, AttendanceLocationUncheckedUpdateInput>
  }

  /**
   * AttendanceLocation delete
   */
  export type AttendanceLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLocation
     */
    select?: AttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLocationInclude<ExtArgs> | null
    /**
     * Filter which AttendanceLocation to delete.
     */
    where: AttendanceLocationWhereUniqueInput
  }

  /**
   * AttendanceLocation deleteMany
   */
  export type AttendanceLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AttendanceLocations to delete
     */
    where?: AttendanceLocationWhereInput
  }

  /**
   * AttendanceLocation.user_attendance_location
   */
  export type AttendanceLocation$user_attendance_locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendanceLocation
     */
    select?: UserAttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceLocationInclude<ExtArgs> | null
    where?: UserAttendanceLocationWhereInput
    orderBy?: UserAttendanceLocationOrderByWithRelationInput | UserAttendanceLocationOrderByWithRelationInput[]
    cursor?: UserAttendanceLocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAttendanceLocationScalarFieldEnum | UserAttendanceLocationScalarFieldEnum[]
  }

  /**
   * AttendanceLocation without action
   */
  export type AttendanceLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceLocation
     */
    select?: AttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceLocationInclude<ExtArgs> | null
  }


  /**
   * Model UserAttendanceLocation
   */

  export type AggregateUserAttendanceLocation = {
    _count: UserAttendanceLocationCountAggregateOutputType | null
    _avg: UserAttendanceLocationAvgAggregateOutputType | null
    _sum: UserAttendanceLocationSumAggregateOutputType | null
    _min: UserAttendanceLocationMinAggregateOutputType | null
    _max: UserAttendanceLocationMaxAggregateOutputType | null
  }

  export type UserAttendanceLocationAvgAggregateOutputType = {
    id: number | null
  }

  export type UserAttendanceLocationSumAggregateOutputType = {
    id: number | null
  }

  export type UserAttendanceLocationMinAggregateOutputType = {
    id: number | null
    name: string | null
    user_attendance_loaction_code: string | null
    user_code: string | null
    company_code: string | null
    tenant_code: string | null
    division_code: string | null
    attendance_location_code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserAttendanceLocationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    user_attendance_loaction_code: string | null
    user_code: string | null
    company_code: string | null
    tenant_code: string | null
    division_code: string | null
    attendance_location_code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserAttendanceLocationCountAggregateOutputType = {
    id: number
    name: number
    user_attendance_loaction_code: number
    user_code: number
    company_code: number
    tenant_code: number
    division_code: number
    attendance_location_code: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAttendanceLocationAvgAggregateInputType = {
    id?: true
  }

  export type UserAttendanceLocationSumAggregateInputType = {
    id?: true
  }

  export type UserAttendanceLocationMinAggregateInputType = {
    id?: true
    name?: true
    user_attendance_loaction_code?: true
    user_code?: true
    company_code?: true
    tenant_code?: true
    division_code?: true
    attendance_location_code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserAttendanceLocationMaxAggregateInputType = {
    id?: true
    name?: true
    user_attendance_loaction_code?: true
    user_code?: true
    company_code?: true
    tenant_code?: true
    division_code?: true
    attendance_location_code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserAttendanceLocationCountAggregateInputType = {
    id?: true
    name?: true
    user_attendance_loaction_code?: true
    user_code?: true
    company_code?: true
    tenant_code?: true
    division_code?: true
    attendance_location_code?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAttendanceLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAttendanceLocation to aggregate.
     */
    where?: UserAttendanceLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAttendanceLocations to fetch.
     */
    orderBy?: UserAttendanceLocationOrderByWithRelationInput | UserAttendanceLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserAttendanceLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAttendanceLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAttendanceLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAttendanceLocations
    **/
    _count?: true | UserAttendanceLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAttendanceLocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserAttendanceLocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAttendanceLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAttendanceLocationMaxAggregateInputType
  }

  export type GetUserAttendanceLocationAggregateType<T extends UserAttendanceLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAttendanceLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAttendanceLocation[P]>
      : GetScalarType<T[P], AggregateUserAttendanceLocation[P]>
  }




  export type UserAttendanceLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAttendanceLocationWhereInput
    orderBy?: UserAttendanceLocationOrderByWithAggregationInput | UserAttendanceLocationOrderByWithAggregationInput[]
    by: UserAttendanceLocationScalarFieldEnum[] | UserAttendanceLocationScalarFieldEnum
    having?: UserAttendanceLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAttendanceLocationCountAggregateInputType | true
    _avg?: UserAttendanceLocationAvgAggregateInputType
    _sum?: UserAttendanceLocationSumAggregateInputType
    _min?: UserAttendanceLocationMinAggregateInputType
    _max?: UserAttendanceLocationMaxAggregateInputType
  }

  export type UserAttendanceLocationGroupByOutputType = {
    id: number
    name: string
    user_attendance_loaction_code: string
    user_code: string
    company_code: string
    tenant_code: string
    division_code: string
    attendance_location_code: string
    createdAt: Date
    updatedAt: Date
    _count: UserAttendanceLocationCountAggregateOutputType | null
    _avg: UserAttendanceLocationAvgAggregateOutputType | null
    _sum: UserAttendanceLocationSumAggregateOutputType | null
    _min: UserAttendanceLocationMinAggregateOutputType | null
    _max: UserAttendanceLocationMaxAggregateOutputType | null
  }

  type GetUserAttendanceLocationGroupByPayload<T extends UserAttendanceLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserAttendanceLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAttendanceLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAttendanceLocationGroupByOutputType[P]>
            : GetScalarType<T[P], UserAttendanceLocationGroupByOutputType[P]>
        }
      >
    >


  export type UserAttendanceLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    user_attendance_loaction_code?: boolean
    user_code?: boolean
    company_code?: boolean
    tenant_code?: boolean
    division_code?: boolean
    attendance_location_code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    location?: boolean | AttendanceLocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAttendanceLocation"]>

  export type UserAttendanceLocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    user_attendance_loaction_code?: boolean
    user_code?: boolean
    company_code?: boolean
    tenant_code?: boolean
    division_code?: boolean
    attendance_location_code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    location?: boolean | AttendanceLocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAttendanceLocation"]>

  export type UserAttendanceLocationSelectScalar = {
    id?: boolean
    name?: boolean
    user_attendance_loaction_code?: boolean
    user_code?: boolean
    company_code?: boolean
    tenant_code?: boolean
    division_code?: boolean
    attendance_location_code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserAttendanceLocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    location?: boolean | AttendanceLocationDefaultArgs<ExtArgs>
  }
  export type UserAttendanceLocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    location?: boolean | AttendanceLocationDefaultArgs<ExtArgs>
  }

  export type $UserAttendanceLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserAttendanceLocation"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      location: Prisma.$AttendanceLocationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      user_attendance_loaction_code: string
      user_code: string
      company_code: string
      tenant_code: string
      division_code: string
      attendance_location_code: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userAttendanceLocation"]>
    composites: {}
  }

  type UserAttendanceLocationGetPayload<S extends boolean | null | undefined | UserAttendanceLocationDefaultArgs> = $Result.GetResult<Prisma.$UserAttendanceLocationPayload, S>

  type UserAttendanceLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserAttendanceLocationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserAttendanceLocationCountAggregateInputType | true
    }

  export interface UserAttendanceLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAttendanceLocation'], meta: { name: 'UserAttendanceLocation' } }
    /**
     * Find zero or one UserAttendanceLocation that matches the filter.
     * @param {UserAttendanceLocationFindUniqueArgs} args - Arguments to find a UserAttendanceLocation
     * @example
     * // Get one UserAttendanceLocation
     * const userAttendanceLocation = await prisma.userAttendanceLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserAttendanceLocationFindUniqueArgs>(args: SelectSubset<T, UserAttendanceLocationFindUniqueArgs<ExtArgs>>): Prisma__UserAttendanceLocationClient<$Result.GetResult<Prisma.$UserAttendanceLocationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserAttendanceLocation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserAttendanceLocationFindUniqueOrThrowArgs} args - Arguments to find a UserAttendanceLocation
     * @example
     * // Get one UserAttendanceLocation
     * const userAttendanceLocation = await prisma.userAttendanceLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserAttendanceLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, UserAttendanceLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserAttendanceLocationClient<$Result.GetResult<Prisma.$UserAttendanceLocationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserAttendanceLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttendanceLocationFindFirstArgs} args - Arguments to find a UserAttendanceLocation
     * @example
     * // Get one UserAttendanceLocation
     * const userAttendanceLocation = await prisma.userAttendanceLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserAttendanceLocationFindFirstArgs>(args?: SelectSubset<T, UserAttendanceLocationFindFirstArgs<ExtArgs>>): Prisma__UserAttendanceLocationClient<$Result.GetResult<Prisma.$UserAttendanceLocationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserAttendanceLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttendanceLocationFindFirstOrThrowArgs} args - Arguments to find a UserAttendanceLocation
     * @example
     * // Get one UserAttendanceLocation
     * const userAttendanceLocation = await prisma.userAttendanceLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserAttendanceLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, UserAttendanceLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserAttendanceLocationClient<$Result.GetResult<Prisma.$UserAttendanceLocationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserAttendanceLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttendanceLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAttendanceLocations
     * const userAttendanceLocations = await prisma.userAttendanceLocation.findMany()
     * 
     * // Get first 10 UserAttendanceLocations
     * const userAttendanceLocations = await prisma.userAttendanceLocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userAttendanceLocationWithIdOnly = await prisma.userAttendanceLocation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserAttendanceLocationFindManyArgs>(args?: SelectSubset<T, UserAttendanceLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAttendanceLocationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserAttendanceLocation.
     * @param {UserAttendanceLocationCreateArgs} args - Arguments to create a UserAttendanceLocation.
     * @example
     * // Create one UserAttendanceLocation
     * const UserAttendanceLocation = await prisma.userAttendanceLocation.create({
     *   data: {
     *     // ... data to create a UserAttendanceLocation
     *   }
     * })
     * 
     */
    create<T extends UserAttendanceLocationCreateArgs>(args: SelectSubset<T, UserAttendanceLocationCreateArgs<ExtArgs>>): Prisma__UserAttendanceLocationClient<$Result.GetResult<Prisma.$UserAttendanceLocationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserAttendanceLocations.
     * @param {UserAttendanceLocationCreateManyArgs} args - Arguments to create many UserAttendanceLocations.
     * @example
     * // Create many UserAttendanceLocations
     * const userAttendanceLocation = await prisma.userAttendanceLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserAttendanceLocationCreateManyArgs>(args?: SelectSubset<T, UserAttendanceLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserAttendanceLocations and returns the data saved in the database.
     * @param {UserAttendanceLocationCreateManyAndReturnArgs} args - Arguments to create many UserAttendanceLocations.
     * @example
     * // Create many UserAttendanceLocations
     * const userAttendanceLocation = await prisma.userAttendanceLocation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserAttendanceLocations and only return the `id`
     * const userAttendanceLocationWithIdOnly = await prisma.userAttendanceLocation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserAttendanceLocationCreateManyAndReturnArgs>(args?: SelectSubset<T, UserAttendanceLocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAttendanceLocationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserAttendanceLocation.
     * @param {UserAttendanceLocationDeleteArgs} args - Arguments to delete one UserAttendanceLocation.
     * @example
     * // Delete one UserAttendanceLocation
     * const UserAttendanceLocation = await prisma.userAttendanceLocation.delete({
     *   where: {
     *     // ... filter to delete one UserAttendanceLocation
     *   }
     * })
     * 
     */
    delete<T extends UserAttendanceLocationDeleteArgs>(args: SelectSubset<T, UserAttendanceLocationDeleteArgs<ExtArgs>>): Prisma__UserAttendanceLocationClient<$Result.GetResult<Prisma.$UserAttendanceLocationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserAttendanceLocation.
     * @param {UserAttendanceLocationUpdateArgs} args - Arguments to update one UserAttendanceLocation.
     * @example
     * // Update one UserAttendanceLocation
     * const userAttendanceLocation = await prisma.userAttendanceLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserAttendanceLocationUpdateArgs>(args: SelectSubset<T, UserAttendanceLocationUpdateArgs<ExtArgs>>): Prisma__UserAttendanceLocationClient<$Result.GetResult<Prisma.$UserAttendanceLocationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserAttendanceLocations.
     * @param {UserAttendanceLocationDeleteManyArgs} args - Arguments to filter UserAttendanceLocations to delete.
     * @example
     * // Delete a few UserAttendanceLocations
     * const { count } = await prisma.userAttendanceLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserAttendanceLocationDeleteManyArgs>(args?: SelectSubset<T, UserAttendanceLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAttendanceLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttendanceLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAttendanceLocations
     * const userAttendanceLocation = await prisma.userAttendanceLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserAttendanceLocationUpdateManyArgs>(args: SelectSubset<T, UserAttendanceLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserAttendanceLocation.
     * @param {UserAttendanceLocationUpsertArgs} args - Arguments to update or create a UserAttendanceLocation.
     * @example
     * // Update or create a UserAttendanceLocation
     * const userAttendanceLocation = await prisma.userAttendanceLocation.upsert({
     *   create: {
     *     // ... data to create a UserAttendanceLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAttendanceLocation we want to update
     *   }
     * })
     */
    upsert<T extends UserAttendanceLocationUpsertArgs>(args: SelectSubset<T, UserAttendanceLocationUpsertArgs<ExtArgs>>): Prisma__UserAttendanceLocationClient<$Result.GetResult<Prisma.$UserAttendanceLocationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserAttendanceLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttendanceLocationCountArgs} args - Arguments to filter UserAttendanceLocations to count.
     * @example
     * // Count the number of UserAttendanceLocations
     * const count = await prisma.userAttendanceLocation.count({
     *   where: {
     *     // ... the filter for the UserAttendanceLocations we want to count
     *   }
     * })
    **/
    count<T extends UserAttendanceLocationCountArgs>(
      args?: Subset<T, UserAttendanceLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAttendanceLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAttendanceLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttendanceLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAttendanceLocationAggregateArgs>(args: Subset<T, UserAttendanceLocationAggregateArgs>): Prisma.PrismaPromise<GetUserAttendanceLocationAggregateType<T>>

    /**
     * Group by UserAttendanceLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttendanceLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAttendanceLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAttendanceLocationGroupByArgs['orderBy'] }
        : { orderBy?: UserAttendanceLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAttendanceLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAttendanceLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserAttendanceLocation model
   */
  readonly fields: UserAttendanceLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAttendanceLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserAttendanceLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    location<T extends AttendanceLocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AttendanceLocationDefaultArgs<ExtArgs>>): Prisma__AttendanceLocationClient<$Result.GetResult<Prisma.$AttendanceLocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserAttendanceLocation model
   */ 
  interface UserAttendanceLocationFieldRefs {
    readonly id: FieldRef<"UserAttendanceLocation", 'Int'>
    readonly name: FieldRef<"UserAttendanceLocation", 'String'>
    readonly user_attendance_loaction_code: FieldRef<"UserAttendanceLocation", 'String'>
    readonly user_code: FieldRef<"UserAttendanceLocation", 'String'>
    readonly company_code: FieldRef<"UserAttendanceLocation", 'String'>
    readonly tenant_code: FieldRef<"UserAttendanceLocation", 'String'>
    readonly division_code: FieldRef<"UserAttendanceLocation", 'String'>
    readonly attendance_location_code: FieldRef<"UserAttendanceLocation", 'String'>
    readonly createdAt: FieldRef<"UserAttendanceLocation", 'DateTime'>
    readonly updatedAt: FieldRef<"UserAttendanceLocation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserAttendanceLocation findUnique
   */
  export type UserAttendanceLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendanceLocation
     */
    select?: UserAttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceLocationInclude<ExtArgs> | null
    /**
     * Filter, which UserAttendanceLocation to fetch.
     */
    where: UserAttendanceLocationWhereUniqueInput
  }

  /**
   * UserAttendanceLocation findUniqueOrThrow
   */
  export type UserAttendanceLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendanceLocation
     */
    select?: UserAttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceLocationInclude<ExtArgs> | null
    /**
     * Filter, which UserAttendanceLocation to fetch.
     */
    where: UserAttendanceLocationWhereUniqueInput
  }

  /**
   * UserAttendanceLocation findFirst
   */
  export type UserAttendanceLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendanceLocation
     */
    select?: UserAttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceLocationInclude<ExtArgs> | null
    /**
     * Filter, which UserAttendanceLocation to fetch.
     */
    where?: UserAttendanceLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAttendanceLocations to fetch.
     */
    orderBy?: UserAttendanceLocationOrderByWithRelationInput | UserAttendanceLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAttendanceLocations.
     */
    cursor?: UserAttendanceLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAttendanceLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAttendanceLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAttendanceLocations.
     */
    distinct?: UserAttendanceLocationScalarFieldEnum | UserAttendanceLocationScalarFieldEnum[]
  }

  /**
   * UserAttendanceLocation findFirstOrThrow
   */
  export type UserAttendanceLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendanceLocation
     */
    select?: UserAttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceLocationInclude<ExtArgs> | null
    /**
     * Filter, which UserAttendanceLocation to fetch.
     */
    where?: UserAttendanceLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAttendanceLocations to fetch.
     */
    orderBy?: UserAttendanceLocationOrderByWithRelationInput | UserAttendanceLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAttendanceLocations.
     */
    cursor?: UserAttendanceLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAttendanceLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAttendanceLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAttendanceLocations.
     */
    distinct?: UserAttendanceLocationScalarFieldEnum | UserAttendanceLocationScalarFieldEnum[]
  }

  /**
   * UserAttendanceLocation findMany
   */
  export type UserAttendanceLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendanceLocation
     */
    select?: UserAttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceLocationInclude<ExtArgs> | null
    /**
     * Filter, which UserAttendanceLocations to fetch.
     */
    where?: UserAttendanceLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAttendanceLocations to fetch.
     */
    orderBy?: UserAttendanceLocationOrderByWithRelationInput | UserAttendanceLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAttendanceLocations.
     */
    cursor?: UserAttendanceLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAttendanceLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAttendanceLocations.
     */
    skip?: number
    distinct?: UserAttendanceLocationScalarFieldEnum | UserAttendanceLocationScalarFieldEnum[]
  }

  /**
   * UserAttendanceLocation create
   */
  export type UserAttendanceLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendanceLocation
     */
    select?: UserAttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceLocationInclude<ExtArgs> | null
    /**
     * The data needed to create a UserAttendanceLocation.
     */
    data: XOR<UserAttendanceLocationCreateInput, UserAttendanceLocationUncheckedCreateInput>
  }

  /**
   * UserAttendanceLocation createMany
   */
  export type UserAttendanceLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserAttendanceLocations.
     */
    data: UserAttendanceLocationCreateManyInput | UserAttendanceLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserAttendanceLocation createManyAndReturn
   */
  export type UserAttendanceLocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendanceLocation
     */
    select?: UserAttendanceLocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserAttendanceLocations.
     */
    data: UserAttendanceLocationCreateManyInput | UserAttendanceLocationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceLocationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserAttendanceLocation update
   */
  export type UserAttendanceLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendanceLocation
     */
    select?: UserAttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceLocationInclude<ExtArgs> | null
    /**
     * The data needed to update a UserAttendanceLocation.
     */
    data: XOR<UserAttendanceLocationUpdateInput, UserAttendanceLocationUncheckedUpdateInput>
    /**
     * Choose, which UserAttendanceLocation to update.
     */
    where: UserAttendanceLocationWhereUniqueInput
  }

  /**
   * UserAttendanceLocation updateMany
   */
  export type UserAttendanceLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserAttendanceLocations.
     */
    data: XOR<UserAttendanceLocationUpdateManyMutationInput, UserAttendanceLocationUncheckedUpdateManyInput>
    /**
     * Filter which UserAttendanceLocations to update
     */
    where?: UserAttendanceLocationWhereInput
  }

  /**
   * UserAttendanceLocation upsert
   */
  export type UserAttendanceLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendanceLocation
     */
    select?: UserAttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceLocationInclude<ExtArgs> | null
    /**
     * The filter to search for the UserAttendanceLocation to update in case it exists.
     */
    where: UserAttendanceLocationWhereUniqueInput
    /**
     * In case the UserAttendanceLocation found by the `where` argument doesn't exist, create a new UserAttendanceLocation with this data.
     */
    create: XOR<UserAttendanceLocationCreateInput, UserAttendanceLocationUncheckedCreateInput>
    /**
     * In case the UserAttendanceLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserAttendanceLocationUpdateInput, UserAttendanceLocationUncheckedUpdateInput>
  }

  /**
   * UserAttendanceLocation delete
   */
  export type UserAttendanceLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendanceLocation
     */
    select?: UserAttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceLocationInclude<ExtArgs> | null
    /**
     * Filter which UserAttendanceLocation to delete.
     */
    where: UserAttendanceLocationWhereUniqueInput
  }

  /**
   * UserAttendanceLocation deleteMany
   */
  export type UserAttendanceLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAttendanceLocations to delete
     */
    where?: UserAttendanceLocationWhereInput
  }

  /**
   * UserAttendanceLocation without action
   */
  export type UserAttendanceLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendanceLocation
     */
    select?: UserAttendanceLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceLocationInclude<ExtArgs> | null
  }


  /**
   * Model UserAttendance
   */

  export type AggregateUserAttendance = {
    _count: UserAttendanceCountAggregateOutputType | null
    _avg: UserAttendanceAvgAggregateOutputType | null
    _sum: UserAttendanceSumAggregateOutputType | null
    _min: UserAttendanceMinAggregateOutputType | null
    _max: UserAttendanceMaxAggregateOutputType | null
  }

  export type UserAttendanceAvgAggregateOutputType = {
    id: number | null
  }

  export type UserAttendanceSumAggregateOutputType = {
    id: number | null
  }

  export type UserAttendanceMinAggregateOutputType = {
    id: number | null
    status: string | null
    clockInLat: string | null
    clockInLng: string | null
    clockOutLat: string | null
    clockOutLng: string | null
    clockIn: Date | null
    clockOut: Date | null
    company_code: string | null
    tenant_code: string | null
    division_code: string | null
    user_code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserAttendanceMaxAggregateOutputType = {
    id: number | null
    status: string | null
    clockInLat: string | null
    clockInLng: string | null
    clockOutLat: string | null
    clockOutLng: string | null
    clockIn: Date | null
    clockOut: Date | null
    company_code: string | null
    tenant_code: string | null
    division_code: string | null
    user_code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserAttendanceCountAggregateOutputType = {
    id: number
    status: number
    clockInLat: number
    clockInLng: number
    clockOutLat: number
    clockOutLng: number
    clockIn: number
    clockOut: number
    company_code: number
    tenant_code: number
    division_code: number
    user_code: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAttendanceAvgAggregateInputType = {
    id?: true
  }

  export type UserAttendanceSumAggregateInputType = {
    id?: true
  }

  export type UserAttendanceMinAggregateInputType = {
    id?: true
    status?: true
    clockInLat?: true
    clockInLng?: true
    clockOutLat?: true
    clockOutLng?: true
    clockIn?: true
    clockOut?: true
    company_code?: true
    tenant_code?: true
    division_code?: true
    user_code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserAttendanceMaxAggregateInputType = {
    id?: true
    status?: true
    clockInLat?: true
    clockInLng?: true
    clockOutLat?: true
    clockOutLng?: true
    clockIn?: true
    clockOut?: true
    company_code?: true
    tenant_code?: true
    division_code?: true
    user_code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserAttendanceCountAggregateInputType = {
    id?: true
    status?: true
    clockInLat?: true
    clockInLng?: true
    clockOutLat?: true
    clockOutLng?: true
    clockIn?: true
    clockOut?: true
    company_code?: true
    tenant_code?: true
    division_code?: true
    user_code?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAttendanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAttendance to aggregate.
     */
    where?: UserAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAttendances to fetch.
     */
    orderBy?: UserAttendanceOrderByWithRelationInput | UserAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAttendances
    **/
    _count?: true | UserAttendanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAttendanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserAttendanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAttendanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAttendanceMaxAggregateInputType
  }

  export type GetUserAttendanceAggregateType<T extends UserAttendanceAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAttendance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAttendance[P]>
      : GetScalarType<T[P], AggregateUserAttendance[P]>
  }




  export type UserAttendanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAttendanceWhereInput
    orderBy?: UserAttendanceOrderByWithAggregationInput | UserAttendanceOrderByWithAggregationInput[]
    by: UserAttendanceScalarFieldEnum[] | UserAttendanceScalarFieldEnum
    having?: UserAttendanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAttendanceCountAggregateInputType | true
    _avg?: UserAttendanceAvgAggregateInputType
    _sum?: UserAttendanceSumAggregateInputType
    _min?: UserAttendanceMinAggregateInputType
    _max?: UserAttendanceMaxAggregateInputType
  }

  export type UserAttendanceGroupByOutputType = {
    id: number
    status: string
    clockInLat: string | null
    clockInLng: string | null
    clockOutLat: string | null
    clockOutLng: string | null
    clockIn: Date | null
    clockOut: Date | null
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    createdAt: Date
    updatedAt: Date
    _count: UserAttendanceCountAggregateOutputType | null
    _avg: UserAttendanceAvgAggregateOutputType | null
    _sum: UserAttendanceSumAggregateOutputType | null
    _min: UserAttendanceMinAggregateOutputType | null
    _max: UserAttendanceMaxAggregateOutputType | null
  }

  type GetUserAttendanceGroupByPayload<T extends UserAttendanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserAttendanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAttendanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAttendanceGroupByOutputType[P]>
            : GetScalarType<T[P], UserAttendanceGroupByOutputType[P]>
        }
      >
    >


  export type UserAttendanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    clockInLat?: boolean
    clockInLng?: boolean
    clockOutLat?: boolean
    clockOutLng?: boolean
    clockIn?: boolean
    clockOut?: boolean
    company_code?: boolean
    tenant_code?: boolean
    division_code?: boolean
    user_code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAttendance"]>

  export type UserAttendanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    clockInLat?: boolean
    clockInLng?: boolean
    clockOutLat?: boolean
    clockOutLng?: boolean
    clockIn?: boolean
    clockOut?: boolean
    company_code?: boolean
    tenant_code?: boolean
    division_code?: boolean
    user_code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAttendance"]>

  export type UserAttendanceSelectScalar = {
    id?: boolean
    status?: boolean
    clockInLat?: boolean
    clockInLng?: boolean
    clockOutLat?: boolean
    clockOutLng?: boolean
    clockIn?: boolean
    clockOut?: boolean
    company_code?: boolean
    tenant_code?: boolean
    division_code?: boolean
    user_code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserAttendanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserAttendanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserAttendancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserAttendance"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      status: string
      clockInLat: string | null
      clockInLng: string | null
      clockOutLat: string | null
      clockOutLng: string | null
      clockIn: Date | null
      clockOut: Date | null
      company_code: string
      tenant_code: string
      division_code: string
      user_code: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userAttendance"]>
    composites: {}
  }

  type UserAttendanceGetPayload<S extends boolean | null | undefined | UserAttendanceDefaultArgs> = $Result.GetResult<Prisma.$UserAttendancePayload, S>

  type UserAttendanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserAttendanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserAttendanceCountAggregateInputType | true
    }

  export interface UserAttendanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAttendance'], meta: { name: 'UserAttendance' } }
    /**
     * Find zero or one UserAttendance that matches the filter.
     * @param {UserAttendanceFindUniqueArgs} args - Arguments to find a UserAttendance
     * @example
     * // Get one UserAttendance
     * const userAttendance = await prisma.userAttendance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserAttendanceFindUniqueArgs>(args: SelectSubset<T, UserAttendanceFindUniqueArgs<ExtArgs>>): Prisma__UserAttendanceClient<$Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserAttendance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserAttendanceFindUniqueOrThrowArgs} args - Arguments to find a UserAttendance
     * @example
     * // Get one UserAttendance
     * const userAttendance = await prisma.userAttendance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserAttendanceFindUniqueOrThrowArgs>(args: SelectSubset<T, UserAttendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserAttendanceClient<$Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserAttendance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttendanceFindFirstArgs} args - Arguments to find a UserAttendance
     * @example
     * // Get one UserAttendance
     * const userAttendance = await prisma.userAttendance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserAttendanceFindFirstArgs>(args?: SelectSubset<T, UserAttendanceFindFirstArgs<ExtArgs>>): Prisma__UserAttendanceClient<$Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserAttendance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttendanceFindFirstOrThrowArgs} args - Arguments to find a UserAttendance
     * @example
     * // Get one UserAttendance
     * const userAttendance = await prisma.userAttendance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserAttendanceFindFirstOrThrowArgs>(args?: SelectSubset<T, UserAttendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserAttendanceClient<$Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserAttendances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttendanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAttendances
     * const userAttendances = await prisma.userAttendance.findMany()
     * 
     * // Get first 10 UserAttendances
     * const userAttendances = await prisma.userAttendance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userAttendanceWithIdOnly = await prisma.userAttendance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserAttendanceFindManyArgs>(args?: SelectSubset<T, UserAttendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserAttendance.
     * @param {UserAttendanceCreateArgs} args - Arguments to create a UserAttendance.
     * @example
     * // Create one UserAttendance
     * const UserAttendance = await prisma.userAttendance.create({
     *   data: {
     *     // ... data to create a UserAttendance
     *   }
     * })
     * 
     */
    create<T extends UserAttendanceCreateArgs>(args: SelectSubset<T, UserAttendanceCreateArgs<ExtArgs>>): Prisma__UserAttendanceClient<$Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserAttendances.
     * @param {UserAttendanceCreateManyArgs} args - Arguments to create many UserAttendances.
     * @example
     * // Create many UserAttendances
     * const userAttendance = await prisma.userAttendance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserAttendanceCreateManyArgs>(args?: SelectSubset<T, UserAttendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserAttendances and returns the data saved in the database.
     * @param {UserAttendanceCreateManyAndReturnArgs} args - Arguments to create many UserAttendances.
     * @example
     * // Create many UserAttendances
     * const userAttendance = await prisma.userAttendance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserAttendances and only return the `id`
     * const userAttendanceWithIdOnly = await prisma.userAttendance.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserAttendanceCreateManyAndReturnArgs>(args?: SelectSubset<T, UserAttendanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserAttendance.
     * @param {UserAttendanceDeleteArgs} args - Arguments to delete one UserAttendance.
     * @example
     * // Delete one UserAttendance
     * const UserAttendance = await prisma.userAttendance.delete({
     *   where: {
     *     // ... filter to delete one UserAttendance
     *   }
     * })
     * 
     */
    delete<T extends UserAttendanceDeleteArgs>(args: SelectSubset<T, UserAttendanceDeleteArgs<ExtArgs>>): Prisma__UserAttendanceClient<$Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserAttendance.
     * @param {UserAttendanceUpdateArgs} args - Arguments to update one UserAttendance.
     * @example
     * // Update one UserAttendance
     * const userAttendance = await prisma.userAttendance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserAttendanceUpdateArgs>(args: SelectSubset<T, UserAttendanceUpdateArgs<ExtArgs>>): Prisma__UserAttendanceClient<$Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserAttendances.
     * @param {UserAttendanceDeleteManyArgs} args - Arguments to filter UserAttendances to delete.
     * @example
     * // Delete a few UserAttendances
     * const { count } = await prisma.userAttendance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserAttendanceDeleteManyArgs>(args?: SelectSubset<T, UserAttendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAttendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttendanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAttendances
     * const userAttendance = await prisma.userAttendance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserAttendanceUpdateManyArgs>(args: SelectSubset<T, UserAttendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserAttendance.
     * @param {UserAttendanceUpsertArgs} args - Arguments to update or create a UserAttendance.
     * @example
     * // Update or create a UserAttendance
     * const userAttendance = await prisma.userAttendance.upsert({
     *   create: {
     *     // ... data to create a UserAttendance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAttendance we want to update
     *   }
     * })
     */
    upsert<T extends UserAttendanceUpsertArgs>(args: SelectSubset<T, UserAttendanceUpsertArgs<ExtArgs>>): Prisma__UserAttendanceClient<$Result.GetResult<Prisma.$UserAttendancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserAttendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttendanceCountArgs} args - Arguments to filter UserAttendances to count.
     * @example
     * // Count the number of UserAttendances
     * const count = await prisma.userAttendance.count({
     *   where: {
     *     // ... the filter for the UserAttendances we want to count
     *   }
     * })
    **/
    count<T extends UserAttendanceCountArgs>(
      args?: Subset<T, UserAttendanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAttendanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAttendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAttendanceAggregateArgs>(args: Subset<T, UserAttendanceAggregateArgs>): Prisma.PrismaPromise<GetUserAttendanceAggregateType<T>>

    /**
     * Group by UserAttendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttendanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAttendanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAttendanceGroupByArgs['orderBy'] }
        : { orderBy?: UserAttendanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAttendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserAttendance model
   */
  readonly fields: UserAttendanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAttendance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserAttendanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserAttendance model
   */ 
  interface UserAttendanceFieldRefs {
    readonly id: FieldRef<"UserAttendance", 'Int'>
    readonly status: FieldRef<"UserAttendance", 'String'>
    readonly clockInLat: FieldRef<"UserAttendance", 'String'>
    readonly clockInLng: FieldRef<"UserAttendance", 'String'>
    readonly clockOutLat: FieldRef<"UserAttendance", 'String'>
    readonly clockOutLng: FieldRef<"UserAttendance", 'String'>
    readonly clockIn: FieldRef<"UserAttendance", 'DateTime'>
    readonly clockOut: FieldRef<"UserAttendance", 'DateTime'>
    readonly company_code: FieldRef<"UserAttendance", 'String'>
    readonly tenant_code: FieldRef<"UserAttendance", 'String'>
    readonly division_code: FieldRef<"UserAttendance", 'String'>
    readonly user_code: FieldRef<"UserAttendance", 'String'>
    readonly createdAt: FieldRef<"UserAttendance", 'DateTime'>
    readonly updatedAt: FieldRef<"UserAttendance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserAttendance findUnique
   */
  export type UserAttendanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendance
     */
    select?: UserAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which UserAttendance to fetch.
     */
    where: UserAttendanceWhereUniqueInput
  }

  /**
   * UserAttendance findUniqueOrThrow
   */
  export type UserAttendanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendance
     */
    select?: UserAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which UserAttendance to fetch.
     */
    where: UserAttendanceWhereUniqueInput
  }

  /**
   * UserAttendance findFirst
   */
  export type UserAttendanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendance
     */
    select?: UserAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which UserAttendance to fetch.
     */
    where?: UserAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAttendances to fetch.
     */
    orderBy?: UserAttendanceOrderByWithRelationInput | UserAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAttendances.
     */
    cursor?: UserAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAttendances.
     */
    distinct?: UserAttendanceScalarFieldEnum | UserAttendanceScalarFieldEnum[]
  }

  /**
   * UserAttendance findFirstOrThrow
   */
  export type UserAttendanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendance
     */
    select?: UserAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which UserAttendance to fetch.
     */
    where?: UserAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAttendances to fetch.
     */
    orderBy?: UserAttendanceOrderByWithRelationInput | UserAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAttendances.
     */
    cursor?: UserAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAttendances.
     */
    distinct?: UserAttendanceScalarFieldEnum | UserAttendanceScalarFieldEnum[]
  }

  /**
   * UserAttendance findMany
   */
  export type UserAttendanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendance
     */
    select?: UserAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which UserAttendances to fetch.
     */
    where?: UserAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAttendances to fetch.
     */
    orderBy?: UserAttendanceOrderByWithRelationInput | UserAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAttendances.
     */
    cursor?: UserAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAttendances.
     */
    skip?: number
    distinct?: UserAttendanceScalarFieldEnum | UserAttendanceScalarFieldEnum[]
  }

  /**
   * UserAttendance create
   */
  export type UserAttendanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendance
     */
    select?: UserAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceInclude<ExtArgs> | null
    /**
     * The data needed to create a UserAttendance.
     */
    data: XOR<UserAttendanceCreateInput, UserAttendanceUncheckedCreateInput>
  }

  /**
   * UserAttendance createMany
   */
  export type UserAttendanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserAttendances.
     */
    data: UserAttendanceCreateManyInput | UserAttendanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserAttendance createManyAndReturn
   */
  export type UserAttendanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendance
     */
    select?: UserAttendanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserAttendances.
     */
    data: UserAttendanceCreateManyInput | UserAttendanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserAttendance update
   */
  export type UserAttendanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendance
     */
    select?: UserAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceInclude<ExtArgs> | null
    /**
     * The data needed to update a UserAttendance.
     */
    data: XOR<UserAttendanceUpdateInput, UserAttendanceUncheckedUpdateInput>
    /**
     * Choose, which UserAttendance to update.
     */
    where: UserAttendanceWhereUniqueInput
  }

  /**
   * UserAttendance updateMany
   */
  export type UserAttendanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserAttendances.
     */
    data: XOR<UserAttendanceUpdateManyMutationInput, UserAttendanceUncheckedUpdateManyInput>
    /**
     * Filter which UserAttendances to update
     */
    where?: UserAttendanceWhereInput
  }

  /**
   * UserAttendance upsert
   */
  export type UserAttendanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendance
     */
    select?: UserAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceInclude<ExtArgs> | null
    /**
     * The filter to search for the UserAttendance to update in case it exists.
     */
    where: UserAttendanceWhereUniqueInput
    /**
     * In case the UserAttendance found by the `where` argument doesn't exist, create a new UserAttendance with this data.
     */
    create: XOR<UserAttendanceCreateInput, UserAttendanceUncheckedCreateInput>
    /**
     * In case the UserAttendance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserAttendanceUpdateInput, UserAttendanceUncheckedUpdateInput>
  }

  /**
   * UserAttendance delete
   */
  export type UserAttendanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendance
     */
    select?: UserAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceInclude<ExtArgs> | null
    /**
     * Filter which UserAttendance to delete.
     */
    where: UserAttendanceWhereUniqueInput
  }

  /**
   * UserAttendance deleteMany
   */
  export type UserAttendanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAttendances to delete
     */
    where?: UserAttendanceWhereInput
  }

  /**
   * UserAttendance without action
   */
  export type UserAttendanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAttendance
     */
    select?: UserAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAttendanceInclude<ExtArgs> | null
  }


  /**
   * Model ShiftType
   */

  export type AggregateShiftType = {
    _count: ShiftTypeCountAggregateOutputType | null
    _avg: ShiftTypeAvgAggregateOutputType | null
    _sum: ShiftTypeSumAggregateOutputType | null
    _min: ShiftTypeMinAggregateOutputType | null
    _max: ShiftTypeMaxAggregateOutputType | null
  }

  export type ShiftTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type ShiftTypeSumAggregateOutputType = {
    id: number | null
  }

  export type ShiftTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    startTime: Date | null
    endTime: Date | null
    company_code: string | null
    shift_code: string | null
    tenant_code: string | null
  }

  export type ShiftTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    startTime: Date | null
    endTime: Date | null
    company_code: string | null
    shift_code: string | null
    tenant_code: string | null
  }

  export type ShiftTypeCountAggregateOutputType = {
    id: number
    name: number
    startTime: number
    endTime: number
    company_code: number
    shift_code: number
    tenant_code: number
    _all: number
  }


  export type ShiftTypeAvgAggregateInputType = {
    id?: true
  }

  export type ShiftTypeSumAggregateInputType = {
    id?: true
  }

  export type ShiftTypeMinAggregateInputType = {
    id?: true
    name?: true
    startTime?: true
    endTime?: true
    company_code?: true
    shift_code?: true
    tenant_code?: true
  }

  export type ShiftTypeMaxAggregateInputType = {
    id?: true
    name?: true
    startTime?: true
    endTime?: true
    company_code?: true
    shift_code?: true
    tenant_code?: true
  }

  export type ShiftTypeCountAggregateInputType = {
    id?: true
    name?: true
    startTime?: true
    endTime?: true
    company_code?: true
    shift_code?: true
    tenant_code?: true
    _all?: true
  }

  export type ShiftTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShiftType to aggregate.
     */
    where?: ShiftTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftTypes to fetch.
     */
    orderBy?: ShiftTypeOrderByWithRelationInput | ShiftTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShiftTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShiftTypes
    **/
    _count?: true | ShiftTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShiftTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShiftTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShiftTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShiftTypeMaxAggregateInputType
  }

  export type GetShiftTypeAggregateType<T extends ShiftTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateShiftType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShiftType[P]>
      : GetScalarType<T[P], AggregateShiftType[P]>
  }




  export type ShiftTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShiftTypeWhereInput
    orderBy?: ShiftTypeOrderByWithAggregationInput | ShiftTypeOrderByWithAggregationInput[]
    by: ShiftTypeScalarFieldEnum[] | ShiftTypeScalarFieldEnum
    having?: ShiftTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShiftTypeCountAggregateInputType | true
    _avg?: ShiftTypeAvgAggregateInputType
    _sum?: ShiftTypeSumAggregateInputType
    _min?: ShiftTypeMinAggregateInputType
    _max?: ShiftTypeMaxAggregateInputType
  }

  export type ShiftTypeGroupByOutputType = {
    id: number
    name: string
    startTime: Date
    endTime: Date
    company_code: string
    shift_code: string
    tenant_code: string
    _count: ShiftTypeCountAggregateOutputType | null
    _avg: ShiftTypeAvgAggregateOutputType | null
    _sum: ShiftTypeSumAggregateOutputType | null
    _min: ShiftTypeMinAggregateOutputType | null
    _max: ShiftTypeMaxAggregateOutputType | null
  }

  type GetShiftTypeGroupByPayload<T extends ShiftTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShiftTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShiftTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShiftTypeGroupByOutputType[P]>
            : GetScalarType<T[P], ShiftTypeGroupByOutputType[P]>
        }
      >
    >


  export type ShiftTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    startTime?: boolean
    endTime?: boolean
    company_code?: boolean
    shift_code?: boolean
    tenant_code?: boolean
    user_shifts?: boolean | ShiftType$user_shiftsArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    _count?: boolean | ShiftTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shiftType"]>

  export type ShiftTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    startTime?: boolean
    endTime?: boolean
    company_code?: boolean
    shift_code?: boolean
    tenant_code?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shiftType"]>

  export type ShiftTypeSelectScalar = {
    id?: boolean
    name?: boolean
    startTime?: boolean
    endTime?: boolean
    company_code?: boolean
    shift_code?: boolean
    tenant_code?: boolean
  }

  export type ShiftTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_shifts?: boolean | ShiftType$user_shiftsArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    _count?: boolean | ShiftTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ShiftTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $ShiftTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShiftType"
    objects: {
      user_shifts: Prisma.$UserShiftPayload<ExtArgs>[]
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      startTime: Date
      endTime: Date
      company_code: string
      shift_code: string
      tenant_code: string
    }, ExtArgs["result"]["shiftType"]>
    composites: {}
  }

  type ShiftTypeGetPayload<S extends boolean | null | undefined | ShiftTypeDefaultArgs> = $Result.GetResult<Prisma.$ShiftTypePayload, S>

  type ShiftTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShiftTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShiftTypeCountAggregateInputType | true
    }

  export interface ShiftTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShiftType'], meta: { name: 'ShiftType' } }
    /**
     * Find zero or one ShiftType that matches the filter.
     * @param {ShiftTypeFindUniqueArgs} args - Arguments to find a ShiftType
     * @example
     * // Get one ShiftType
     * const shiftType = await prisma.shiftType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShiftTypeFindUniqueArgs>(args: SelectSubset<T, ShiftTypeFindUniqueArgs<ExtArgs>>): Prisma__ShiftTypeClient<$Result.GetResult<Prisma.$ShiftTypePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ShiftType that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShiftTypeFindUniqueOrThrowArgs} args - Arguments to find a ShiftType
     * @example
     * // Get one ShiftType
     * const shiftType = await prisma.shiftType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShiftTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, ShiftTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShiftTypeClient<$Result.GetResult<Prisma.$ShiftTypePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ShiftType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftTypeFindFirstArgs} args - Arguments to find a ShiftType
     * @example
     * // Get one ShiftType
     * const shiftType = await prisma.shiftType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShiftTypeFindFirstArgs>(args?: SelectSubset<T, ShiftTypeFindFirstArgs<ExtArgs>>): Prisma__ShiftTypeClient<$Result.GetResult<Prisma.$ShiftTypePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ShiftType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftTypeFindFirstOrThrowArgs} args - Arguments to find a ShiftType
     * @example
     * // Get one ShiftType
     * const shiftType = await prisma.shiftType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShiftTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, ShiftTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShiftTypeClient<$Result.GetResult<Prisma.$ShiftTypePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ShiftTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShiftTypes
     * const shiftTypes = await prisma.shiftType.findMany()
     * 
     * // Get first 10 ShiftTypes
     * const shiftTypes = await prisma.shiftType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shiftTypeWithIdOnly = await prisma.shiftType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShiftTypeFindManyArgs>(args?: SelectSubset<T, ShiftTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftTypePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ShiftType.
     * @param {ShiftTypeCreateArgs} args - Arguments to create a ShiftType.
     * @example
     * // Create one ShiftType
     * const ShiftType = await prisma.shiftType.create({
     *   data: {
     *     // ... data to create a ShiftType
     *   }
     * })
     * 
     */
    create<T extends ShiftTypeCreateArgs>(args: SelectSubset<T, ShiftTypeCreateArgs<ExtArgs>>): Prisma__ShiftTypeClient<$Result.GetResult<Prisma.$ShiftTypePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ShiftTypes.
     * @param {ShiftTypeCreateManyArgs} args - Arguments to create many ShiftTypes.
     * @example
     * // Create many ShiftTypes
     * const shiftType = await prisma.shiftType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShiftTypeCreateManyArgs>(args?: SelectSubset<T, ShiftTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShiftTypes and returns the data saved in the database.
     * @param {ShiftTypeCreateManyAndReturnArgs} args - Arguments to create many ShiftTypes.
     * @example
     * // Create many ShiftTypes
     * const shiftType = await prisma.shiftType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShiftTypes and only return the `id`
     * const shiftTypeWithIdOnly = await prisma.shiftType.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShiftTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, ShiftTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftTypePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ShiftType.
     * @param {ShiftTypeDeleteArgs} args - Arguments to delete one ShiftType.
     * @example
     * // Delete one ShiftType
     * const ShiftType = await prisma.shiftType.delete({
     *   where: {
     *     // ... filter to delete one ShiftType
     *   }
     * })
     * 
     */
    delete<T extends ShiftTypeDeleteArgs>(args: SelectSubset<T, ShiftTypeDeleteArgs<ExtArgs>>): Prisma__ShiftTypeClient<$Result.GetResult<Prisma.$ShiftTypePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ShiftType.
     * @param {ShiftTypeUpdateArgs} args - Arguments to update one ShiftType.
     * @example
     * // Update one ShiftType
     * const shiftType = await prisma.shiftType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShiftTypeUpdateArgs>(args: SelectSubset<T, ShiftTypeUpdateArgs<ExtArgs>>): Prisma__ShiftTypeClient<$Result.GetResult<Prisma.$ShiftTypePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ShiftTypes.
     * @param {ShiftTypeDeleteManyArgs} args - Arguments to filter ShiftTypes to delete.
     * @example
     * // Delete a few ShiftTypes
     * const { count } = await prisma.shiftType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShiftTypeDeleteManyArgs>(args?: SelectSubset<T, ShiftTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShiftTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShiftTypes
     * const shiftType = await prisma.shiftType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShiftTypeUpdateManyArgs>(args: SelectSubset<T, ShiftTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ShiftType.
     * @param {ShiftTypeUpsertArgs} args - Arguments to update or create a ShiftType.
     * @example
     * // Update or create a ShiftType
     * const shiftType = await prisma.shiftType.upsert({
     *   create: {
     *     // ... data to create a ShiftType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShiftType we want to update
     *   }
     * })
     */
    upsert<T extends ShiftTypeUpsertArgs>(args: SelectSubset<T, ShiftTypeUpsertArgs<ExtArgs>>): Prisma__ShiftTypeClient<$Result.GetResult<Prisma.$ShiftTypePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ShiftTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftTypeCountArgs} args - Arguments to filter ShiftTypes to count.
     * @example
     * // Count the number of ShiftTypes
     * const count = await prisma.shiftType.count({
     *   where: {
     *     // ... the filter for the ShiftTypes we want to count
     *   }
     * })
    **/
    count<T extends ShiftTypeCountArgs>(
      args?: Subset<T, ShiftTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShiftTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShiftType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShiftTypeAggregateArgs>(args: Subset<T, ShiftTypeAggregateArgs>): Prisma.PrismaPromise<GetShiftTypeAggregateType<T>>

    /**
     * Group by ShiftType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShiftTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShiftTypeGroupByArgs['orderBy'] }
        : { orderBy?: ShiftTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShiftTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShiftTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShiftType model
   */
  readonly fields: ShiftTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShiftType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShiftTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user_shifts<T extends ShiftType$user_shiftsArgs<ExtArgs> = {}>(args?: Subset<T, ShiftType$user_shiftsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserShiftPayload<ExtArgs>, T, "findMany"> | Null>
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShiftType model
   */ 
  interface ShiftTypeFieldRefs {
    readonly id: FieldRef<"ShiftType", 'Int'>
    readonly name: FieldRef<"ShiftType", 'String'>
    readonly startTime: FieldRef<"ShiftType", 'DateTime'>
    readonly endTime: FieldRef<"ShiftType", 'DateTime'>
    readonly company_code: FieldRef<"ShiftType", 'String'>
    readonly shift_code: FieldRef<"ShiftType", 'String'>
    readonly tenant_code: FieldRef<"ShiftType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ShiftType findUnique
   */
  export type ShiftTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftType
     */
    select?: ShiftTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftTypeInclude<ExtArgs> | null
    /**
     * Filter, which ShiftType to fetch.
     */
    where: ShiftTypeWhereUniqueInput
  }

  /**
   * ShiftType findUniqueOrThrow
   */
  export type ShiftTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftType
     */
    select?: ShiftTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftTypeInclude<ExtArgs> | null
    /**
     * Filter, which ShiftType to fetch.
     */
    where: ShiftTypeWhereUniqueInput
  }

  /**
   * ShiftType findFirst
   */
  export type ShiftTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftType
     */
    select?: ShiftTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftTypeInclude<ExtArgs> | null
    /**
     * Filter, which ShiftType to fetch.
     */
    where?: ShiftTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftTypes to fetch.
     */
    orderBy?: ShiftTypeOrderByWithRelationInput | ShiftTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShiftTypes.
     */
    cursor?: ShiftTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShiftTypes.
     */
    distinct?: ShiftTypeScalarFieldEnum | ShiftTypeScalarFieldEnum[]
  }

  /**
   * ShiftType findFirstOrThrow
   */
  export type ShiftTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftType
     */
    select?: ShiftTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftTypeInclude<ExtArgs> | null
    /**
     * Filter, which ShiftType to fetch.
     */
    where?: ShiftTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftTypes to fetch.
     */
    orderBy?: ShiftTypeOrderByWithRelationInput | ShiftTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShiftTypes.
     */
    cursor?: ShiftTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShiftTypes.
     */
    distinct?: ShiftTypeScalarFieldEnum | ShiftTypeScalarFieldEnum[]
  }

  /**
   * ShiftType findMany
   */
  export type ShiftTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftType
     */
    select?: ShiftTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftTypeInclude<ExtArgs> | null
    /**
     * Filter, which ShiftTypes to fetch.
     */
    where?: ShiftTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftTypes to fetch.
     */
    orderBy?: ShiftTypeOrderByWithRelationInput | ShiftTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShiftTypes.
     */
    cursor?: ShiftTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftTypes.
     */
    skip?: number
    distinct?: ShiftTypeScalarFieldEnum | ShiftTypeScalarFieldEnum[]
  }

  /**
   * ShiftType create
   */
  export type ShiftTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftType
     */
    select?: ShiftTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a ShiftType.
     */
    data: XOR<ShiftTypeCreateInput, ShiftTypeUncheckedCreateInput>
  }

  /**
   * ShiftType createMany
   */
  export type ShiftTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShiftTypes.
     */
    data: ShiftTypeCreateManyInput | ShiftTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShiftType createManyAndReturn
   */
  export type ShiftTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftType
     */
    select?: ShiftTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ShiftTypes.
     */
    data: ShiftTypeCreateManyInput | ShiftTypeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftTypeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShiftType update
   */
  export type ShiftTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftType
     */
    select?: ShiftTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a ShiftType.
     */
    data: XOR<ShiftTypeUpdateInput, ShiftTypeUncheckedUpdateInput>
    /**
     * Choose, which ShiftType to update.
     */
    where: ShiftTypeWhereUniqueInput
  }

  /**
   * ShiftType updateMany
   */
  export type ShiftTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShiftTypes.
     */
    data: XOR<ShiftTypeUpdateManyMutationInput, ShiftTypeUncheckedUpdateManyInput>
    /**
     * Filter which ShiftTypes to update
     */
    where?: ShiftTypeWhereInput
  }

  /**
   * ShiftType upsert
   */
  export type ShiftTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftType
     */
    select?: ShiftTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the ShiftType to update in case it exists.
     */
    where: ShiftTypeWhereUniqueInput
    /**
     * In case the ShiftType found by the `where` argument doesn't exist, create a new ShiftType with this data.
     */
    create: XOR<ShiftTypeCreateInput, ShiftTypeUncheckedCreateInput>
    /**
     * In case the ShiftType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShiftTypeUpdateInput, ShiftTypeUncheckedUpdateInput>
  }

  /**
   * ShiftType delete
   */
  export type ShiftTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftType
     */
    select?: ShiftTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftTypeInclude<ExtArgs> | null
    /**
     * Filter which ShiftType to delete.
     */
    where: ShiftTypeWhereUniqueInput
  }

  /**
   * ShiftType deleteMany
   */
  export type ShiftTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShiftTypes to delete
     */
    where?: ShiftTypeWhereInput
  }

  /**
   * ShiftType.user_shifts
   */
  export type ShiftType$user_shiftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShift
     */
    select?: UserShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShiftInclude<ExtArgs> | null
    where?: UserShiftWhereInput
    orderBy?: UserShiftOrderByWithRelationInput | UserShiftOrderByWithRelationInput[]
    cursor?: UserShiftWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserShiftScalarFieldEnum | UserShiftScalarFieldEnum[]
  }

  /**
   * ShiftType without action
   */
  export type ShiftTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftType
     */
    select?: ShiftTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftTypeInclude<ExtArgs> | null
  }


  /**
   * Model UserShift
   */

  export type AggregateUserShift = {
    _count: UserShiftCountAggregateOutputType | null
    _avg: UserShiftAvgAggregateOutputType | null
    _sum: UserShiftSumAggregateOutputType | null
    _min: UserShiftMinAggregateOutputType | null
    _max: UserShiftMaxAggregateOutputType | null
  }

  export type UserShiftAvgAggregateOutputType = {
    id: number | null
  }

  export type UserShiftSumAggregateOutputType = {
    id: number | null
  }

  export type UserShiftMinAggregateOutputType = {
    id: number | null
    company_code: string | null
    tenant_code: string | null
    division_code: string | null
    user_code: string | null
    shift_code: string | null
    date: Date | null
  }

  export type UserShiftMaxAggregateOutputType = {
    id: number | null
    company_code: string | null
    tenant_code: string | null
    division_code: string | null
    user_code: string | null
    shift_code: string | null
    date: Date | null
  }

  export type UserShiftCountAggregateOutputType = {
    id: number
    company_code: number
    tenant_code: number
    division_code: number
    user_code: number
    shift_code: number
    date: number
    _all: number
  }


  export type UserShiftAvgAggregateInputType = {
    id?: true
  }

  export type UserShiftSumAggregateInputType = {
    id?: true
  }

  export type UserShiftMinAggregateInputType = {
    id?: true
    company_code?: true
    tenant_code?: true
    division_code?: true
    user_code?: true
    shift_code?: true
    date?: true
  }

  export type UserShiftMaxAggregateInputType = {
    id?: true
    company_code?: true
    tenant_code?: true
    division_code?: true
    user_code?: true
    shift_code?: true
    date?: true
  }

  export type UserShiftCountAggregateInputType = {
    id?: true
    company_code?: true
    tenant_code?: true
    division_code?: true
    user_code?: true
    shift_code?: true
    date?: true
    _all?: true
  }

  export type UserShiftAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserShift to aggregate.
     */
    where?: UserShiftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserShifts to fetch.
     */
    orderBy?: UserShiftOrderByWithRelationInput | UserShiftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserShiftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserShifts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserShifts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserShifts
    **/
    _count?: true | UserShiftCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserShiftAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserShiftSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserShiftMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserShiftMaxAggregateInputType
  }

  export type GetUserShiftAggregateType<T extends UserShiftAggregateArgs> = {
        [P in keyof T & keyof AggregateUserShift]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserShift[P]>
      : GetScalarType<T[P], AggregateUserShift[P]>
  }




  export type UserShiftGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserShiftWhereInput
    orderBy?: UserShiftOrderByWithAggregationInput | UserShiftOrderByWithAggregationInput[]
    by: UserShiftScalarFieldEnum[] | UserShiftScalarFieldEnum
    having?: UserShiftScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserShiftCountAggregateInputType | true
    _avg?: UserShiftAvgAggregateInputType
    _sum?: UserShiftSumAggregateInputType
    _min?: UserShiftMinAggregateInputType
    _max?: UserShiftMaxAggregateInputType
  }

  export type UserShiftGroupByOutputType = {
    id: number
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    shift_code: string
    date: Date
    _count: UserShiftCountAggregateOutputType | null
    _avg: UserShiftAvgAggregateOutputType | null
    _sum: UserShiftSumAggregateOutputType | null
    _min: UserShiftMinAggregateOutputType | null
    _max: UserShiftMaxAggregateOutputType | null
  }

  type GetUserShiftGroupByPayload<T extends UserShiftGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserShiftGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserShiftGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserShiftGroupByOutputType[P]>
            : GetScalarType<T[P], UserShiftGroupByOutputType[P]>
        }
      >
    >


  export type UserShiftSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_code?: boolean
    tenant_code?: boolean
    division_code?: boolean
    user_code?: boolean
    shift_code?: boolean
    date?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    shift?: boolean | ShiftTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userShift"]>

  export type UserShiftSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_code?: boolean
    tenant_code?: boolean
    division_code?: boolean
    user_code?: boolean
    shift_code?: boolean
    date?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    shift?: boolean | ShiftTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userShift"]>

  export type UserShiftSelectScalar = {
    id?: boolean
    company_code?: boolean
    tenant_code?: boolean
    division_code?: boolean
    user_code?: boolean
    shift_code?: boolean
    date?: boolean
  }

  export type UserShiftInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    shift?: boolean | ShiftTypeDefaultArgs<ExtArgs>
  }
  export type UserShiftIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    shift?: boolean | ShiftTypeDefaultArgs<ExtArgs>
  }

  export type $UserShiftPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserShift"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      shift: Prisma.$ShiftTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      company_code: string
      tenant_code: string
      division_code: string
      user_code: string
      shift_code: string
      date: Date
    }, ExtArgs["result"]["userShift"]>
    composites: {}
  }

  type UserShiftGetPayload<S extends boolean | null | undefined | UserShiftDefaultArgs> = $Result.GetResult<Prisma.$UserShiftPayload, S>

  type UserShiftCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserShiftFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserShiftCountAggregateInputType | true
    }

  export interface UserShiftDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserShift'], meta: { name: 'UserShift' } }
    /**
     * Find zero or one UserShift that matches the filter.
     * @param {UserShiftFindUniqueArgs} args - Arguments to find a UserShift
     * @example
     * // Get one UserShift
     * const userShift = await prisma.userShift.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserShiftFindUniqueArgs>(args: SelectSubset<T, UserShiftFindUniqueArgs<ExtArgs>>): Prisma__UserShiftClient<$Result.GetResult<Prisma.$UserShiftPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserShift that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserShiftFindUniqueOrThrowArgs} args - Arguments to find a UserShift
     * @example
     * // Get one UserShift
     * const userShift = await prisma.userShift.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserShiftFindUniqueOrThrowArgs>(args: SelectSubset<T, UserShiftFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserShiftClient<$Result.GetResult<Prisma.$UserShiftPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserShift that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserShiftFindFirstArgs} args - Arguments to find a UserShift
     * @example
     * // Get one UserShift
     * const userShift = await prisma.userShift.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserShiftFindFirstArgs>(args?: SelectSubset<T, UserShiftFindFirstArgs<ExtArgs>>): Prisma__UserShiftClient<$Result.GetResult<Prisma.$UserShiftPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserShift that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserShiftFindFirstOrThrowArgs} args - Arguments to find a UserShift
     * @example
     * // Get one UserShift
     * const userShift = await prisma.userShift.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserShiftFindFirstOrThrowArgs>(args?: SelectSubset<T, UserShiftFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserShiftClient<$Result.GetResult<Prisma.$UserShiftPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserShifts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserShiftFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserShifts
     * const userShifts = await prisma.userShift.findMany()
     * 
     * // Get first 10 UserShifts
     * const userShifts = await prisma.userShift.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userShiftWithIdOnly = await prisma.userShift.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserShiftFindManyArgs>(args?: SelectSubset<T, UserShiftFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserShiftPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserShift.
     * @param {UserShiftCreateArgs} args - Arguments to create a UserShift.
     * @example
     * // Create one UserShift
     * const UserShift = await prisma.userShift.create({
     *   data: {
     *     // ... data to create a UserShift
     *   }
     * })
     * 
     */
    create<T extends UserShiftCreateArgs>(args: SelectSubset<T, UserShiftCreateArgs<ExtArgs>>): Prisma__UserShiftClient<$Result.GetResult<Prisma.$UserShiftPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserShifts.
     * @param {UserShiftCreateManyArgs} args - Arguments to create many UserShifts.
     * @example
     * // Create many UserShifts
     * const userShift = await prisma.userShift.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserShiftCreateManyArgs>(args?: SelectSubset<T, UserShiftCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserShifts and returns the data saved in the database.
     * @param {UserShiftCreateManyAndReturnArgs} args - Arguments to create many UserShifts.
     * @example
     * // Create many UserShifts
     * const userShift = await prisma.userShift.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserShifts and only return the `id`
     * const userShiftWithIdOnly = await prisma.userShift.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserShiftCreateManyAndReturnArgs>(args?: SelectSubset<T, UserShiftCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserShiftPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserShift.
     * @param {UserShiftDeleteArgs} args - Arguments to delete one UserShift.
     * @example
     * // Delete one UserShift
     * const UserShift = await prisma.userShift.delete({
     *   where: {
     *     // ... filter to delete one UserShift
     *   }
     * })
     * 
     */
    delete<T extends UserShiftDeleteArgs>(args: SelectSubset<T, UserShiftDeleteArgs<ExtArgs>>): Prisma__UserShiftClient<$Result.GetResult<Prisma.$UserShiftPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserShift.
     * @param {UserShiftUpdateArgs} args - Arguments to update one UserShift.
     * @example
     * // Update one UserShift
     * const userShift = await prisma.userShift.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserShiftUpdateArgs>(args: SelectSubset<T, UserShiftUpdateArgs<ExtArgs>>): Prisma__UserShiftClient<$Result.GetResult<Prisma.$UserShiftPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserShifts.
     * @param {UserShiftDeleteManyArgs} args - Arguments to filter UserShifts to delete.
     * @example
     * // Delete a few UserShifts
     * const { count } = await prisma.userShift.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserShiftDeleteManyArgs>(args?: SelectSubset<T, UserShiftDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserShifts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserShiftUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserShifts
     * const userShift = await prisma.userShift.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserShiftUpdateManyArgs>(args: SelectSubset<T, UserShiftUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserShift.
     * @param {UserShiftUpsertArgs} args - Arguments to update or create a UserShift.
     * @example
     * // Update or create a UserShift
     * const userShift = await prisma.userShift.upsert({
     *   create: {
     *     // ... data to create a UserShift
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserShift we want to update
     *   }
     * })
     */
    upsert<T extends UserShiftUpsertArgs>(args: SelectSubset<T, UserShiftUpsertArgs<ExtArgs>>): Prisma__UserShiftClient<$Result.GetResult<Prisma.$UserShiftPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserShifts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserShiftCountArgs} args - Arguments to filter UserShifts to count.
     * @example
     * // Count the number of UserShifts
     * const count = await prisma.userShift.count({
     *   where: {
     *     // ... the filter for the UserShifts we want to count
     *   }
     * })
    **/
    count<T extends UserShiftCountArgs>(
      args?: Subset<T, UserShiftCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserShiftCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserShift.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserShiftAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserShiftAggregateArgs>(args: Subset<T, UserShiftAggregateArgs>): Prisma.PrismaPromise<GetUserShiftAggregateType<T>>

    /**
     * Group by UserShift.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserShiftGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserShiftGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserShiftGroupByArgs['orderBy'] }
        : { orderBy?: UserShiftGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserShiftGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserShiftGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserShift model
   */
  readonly fields: UserShiftFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserShift.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserShiftClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    shift<T extends ShiftTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShiftTypeDefaultArgs<ExtArgs>>): Prisma__ShiftTypeClient<$Result.GetResult<Prisma.$ShiftTypePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserShift model
   */ 
  interface UserShiftFieldRefs {
    readonly id: FieldRef<"UserShift", 'Int'>
    readonly company_code: FieldRef<"UserShift", 'String'>
    readonly tenant_code: FieldRef<"UserShift", 'String'>
    readonly division_code: FieldRef<"UserShift", 'String'>
    readonly user_code: FieldRef<"UserShift", 'String'>
    readonly shift_code: FieldRef<"UserShift", 'String'>
    readonly date: FieldRef<"UserShift", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserShift findUnique
   */
  export type UserShiftFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShift
     */
    select?: UserShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShiftInclude<ExtArgs> | null
    /**
     * Filter, which UserShift to fetch.
     */
    where: UserShiftWhereUniqueInput
  }

  /**
   * UserShift findUniqueOrThrow
   */
  export type UserShiftFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShift
     */
    select?: UserShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShiftInclude<ExtArgs> | null
    /**
     * Filter, which UserShift to fetch.
     */
    where: UserShiftWhereUniqueInput
  }

  /**
   * UserShift findFirst
   */
  export type UserShiftFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShift
     */
    select?: UserShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShiftInclude<ExtArgs> | null
    /**
     * Filter, which UserShift to fetch.
     */
    where?: UserShiftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserShifts to fetch.
     */
    orderBy?: UserShiftOrderByWithRelationInput | UserShiftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserShifts.
     */
    cursor?: UserShiftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserShifts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserShifts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserShifts.
     */
    distinct?: UserShiftScalarFieldEnum | UserShiftScalarFieldEnum[]
  }

  /**
   * UserShift findFirstOrThrow
   */
  export type UserShiftFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShift
     */
    select?: UserShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShiftInclude<ExtArgs> | null
    /**
     * Filter, which UserShift to fetch.
     */
    where?: UserShiftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserShifts to fetch.
     */
    orderBy?: UserShiftOrderByWithRelationInput | UserShiftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserShifts.
     */
    cursor?: UserShiftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserShifts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserShifts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserShifts.
     */
    distinct?: UserShiftScalarFieldEnum | UserShiftScalarFieldEnum[]
  }

  /**
   * UserShift findMany
   */
  export type UserShiftFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShift
     */
    select?: UserShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShiftInclude<ExtArgs> | null
    /**
     * Filter, which UserShifts to fetch.
     */
    where?: UserShiftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserShifts to fetch.
     */
    orderBy?: UserShiftOrderByWithRelationInput | UserShiftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserShifts.
     */
    cursor?: UserShiftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserShifts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserShifts.
     */
    skip?: number
    distinct?: UserShiftScalarFieldEnum | UserShiftScalarFieldEnum[]
  }

  /**
   * UserShift create
   */
  export type UserShiftCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShift
     */
    select?: UserShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShiftInclude<ExtArgs> | null
    /**
     * The data needed to create a UserShift.
     */
    data: XOR<UserShiftCreateInput, UserShiftUncheckedCreateInput>
  }

  /**
   * UserShift createMany
   */
  export type UserShiftCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserShifts.
     */
    data: UserShiftCreateManyInput | UserShiftCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserShift createManyAndReturn
   */
  export type UserShiftCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShift
     */
    select?: UserShiftSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserShifts.
     */
    data: UserShiftCreateManyInput | UserShiftCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShiftIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserShift update
   */
  export type UserShiftUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShift
     */
    select?: UserShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShiftInclude<ExtArgs> | null
    /**
     * The data needed to update a UserShift.
     */
    data: XOR<UserShiftUpdateInput, UserShiftUncheckedUpdateInput>
    /**
     * Choose, which UserShift to update.
     */
    where: UserShiftWhereUniqueInput
  }

  /**
   * UserShift updateMany
   */
  export type UserShiftUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserShifts.
     */
    data: XOR<UserShiftUpdateManyMutationInput, UserShiftUncheckedUpdateManyInput>
    /**
     * Filter which UserShifts to update
     */
    where?: UserShiftWhereInput
  }

  /**
   * UserShift upsert
   */
  export type UserShiftUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShift
     */
    select?: UserShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShiftInclude<ExtArgs> | null
    /**
     * The filter to search for the UserShift to update in case it exists.
     */
    where: UserShiftWhereUniqueInput
    /**
     * In case the UserShift found by the `where` argument doesn't exist, create a new UserShift with this data.
     */
    create: XOR<UserShiftCreateInput, UserShiftUncheckedCreateInput>
    /**
     * In case the UserShift was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserShiftUpdateInput, UserShiftUncheckedUpdateInput>
  }

  /**
   * UserShift delete
   */
  export type UserShiftDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShift
     */
    select?: UserShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShiftInclude<ExtArgs> | null
    /**
     * Filter which UserShift to delete.
     */
    where: UserShiftWhereUniqueInput
  }

  /**
   * UserShift deleteMany
   */
  export type UserShiftDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserShifts to delete
     */
    where?: UserShiftWhereInput
  }

  /**
   * UserShift without action
   */
  export type UserShiftDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShift
     */
    select?: UserShiftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShiftInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    role_code: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    role_code: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    role_code: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    role_code?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    role_code?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    role_code?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: number
    role_code: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role_code?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role_code?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    role_code?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      users: Prisma.$UserRolePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      role_code: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {RoleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Role$usersArgs<ExtArgs> = {}>(args?: Subset<T, Role$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */ 
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'Int'>
    readonly role_code: FieldRef<"Role", 'String'>
    readonly name: FieldRef<"Role", 'String'>
    readonly createdAt: FieldRef<"Role", 'DateTime'>
    readonly updatedAt: FieldRef<"Role", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role createManyAndReturn
   */
  export type RoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
  }

  /**
   * Role.users
   */
  export type Role$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model UserRole
   */

  export type AggregateUserRole = {
    _count: UserRoleCountAggregateOutputType | null
    _avg: UserRoleAvgAggregateOutputType | null
    _sum: UserRoleSumAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  export type UserRoleAvgAggregateOutputType = {
    id: number | null
  }

  export type UserRoleSumAggregateOutputType = {
    id: number | null
  }

  export type UserRoleMinAggregateOutputType = {
    id: number | null
    company_code: string | null
    tenant_code: string | null
    division_code: string | null
    user_code: string | null
    role_code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserRoleMaxAggregateOutputType = {
    id: number | null
    company_code: string | null
    tenant_code: string | null
    division_code: string | null
    user_code: string | null
    role_code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserRoleCountAggregateOutputType = {
    id: number
    company_code: number
    tenant_code: number
    division_code: number
    user_code: number
    role_code: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserRoleAvgAggregateInputType = {
    id?: true
  }

  export type UserRoleSumAggregateInputType = {
    id?: true
  }

  export type UserRoleMinAggregateInputType = {
    id?: true
    company_code?: true
    tenant_code?: true
    division_code?: true
    user_code?: true
    role_code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserRoleMaxAggregateInputType = {
    id?: true
    company_code?: true
    tenant_code?: true
    division_code?: true
    user_code?: true
    role_code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserRoleCountAggregateInputType = {
    id?: true
    company_code?: true
    tenant_code?: true
    division_code?: true
    user_code?: true
    role_code?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRole to aggregate.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRoles
    **/
    _count?: true | UserRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserRoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserRoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRoleMaxAggregateInputType
  }

  export type GetUserRoleAggregateType<T extends UserRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRole[P]>
      : GetScalarType<T[P], AggregateUserRole[P]>
  }




  export type UserRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithAggregationInput | UserRoleOrderByWithAggregationInput[]
    by: UserRoleScalarFieldEnum[] | UserRoleScalarFieldEnum
    having?: UserRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRoleCountAggregateInputType | true
    _avg?: UserRoleAvgAggregateInputType
    _sum?: UserRoleSumAggregateInputType
    _min?: UserRoleMinAggregateInputType
    _max?: UserRoleMaxAggregateInputType
  }

  export type UserRoleGroupByOutputType = {
    id: number
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    role_code: string
    createdAt: Date
    updatedAt: Date
    _count: UserRoleCountAggregateOutputType | null
    _avg: UserRoleAvgAggregateOutputType | null
    _sum: UserRoleSumAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  type GetUserRoleGroupByPayload<T extends UserRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
            : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
        }
      >
    >


  export type UserRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_code?: boolean
    tenant_code?: boolean
    division_code?: boolean
    user_code?: boolean
    role_code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_code?: boolean
    tenant_code?: boolean
    division_code?: boolean
    user_code?: boolean
    role_code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectScalar = {
    id?: boolean
    company_code?: boolean
    tenant_code?: boolean
    division_code?: boolean
    user_code?: boolean
    role_code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserRoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }
  export type UserRoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }

  export type $UserRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserRole"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      role: Prisma.$RolePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      company_code: string
      tenant_code: string
      division_code: string
      user_code: string
      role_code: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userRole"]>
    composites: {}
  }

  type UserRoleGetPayload<S extends boolean | null | undefined | UserRoleDefaultArgs> = $Result.GetResult<Prisma.$UserRolePayload, S>

  type UserRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserRoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserRoleCountAggregateInputType | true
    }

  export interface UserRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRole'], meta: { name: 'UserRole' } }
    /**
     * Find zero or one UserRole that matches the filter.
     * @param {UserRoleFindUniqueArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRoleFindUniqueArgs>(args: SelectSubset<T, UserRoleFindUniqueArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserRole that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserRoleFindUniqueOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRoleFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRoleFindFirstArgs>(args?: SelectSubset<T, UserRoleFindFirstArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRoleFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRoles
     * const userRoles = await prisma.userRole.findMany()
     * 
     * // Get first 10 UserRoles
     * const userRoles = await prisma.userRole.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRoleWithIdOnly = await prisma.userRole.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserRoleFindManyArgs>(args?: SelectSubset<T, UserRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserRole.
     * @param {UserRoleCreateArgs} args - Arguments to create a UserRole.
     * @example
     * // Create one UserRole
     * const UserRole = await prisma.userRole.create({
     *   data: {
     *     // ... data to create a UserRole
     *   }
     * })
     * 
     */
    create<T extends UserRoleCreateArgs>(args: SelectSubset<T, UserRoleCreateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserRoles.
     * @param {UserRoleCreateManyArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRoleCreateManyArgs>(args?: SelectSubset<T, UserRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserRoles and returns the data saved in the database.
     * @param {UserRoleCreateManyAndReturnArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserRoles and only return the `id`
     * const userRoleWithIdOnly = await prisma.userRole.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserRoleCreateManyAndReturnArgs>(args?: SelectSubset<T, UserRoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserRole.
     * @param {UserRoleDeleteArgs} args - Arguments to delete one UserRole.
     * @example
     * // Delete one UserRole
     * const UserRole = await prisma.userRole.delete({
     *   where: {
     *     // ... filter to delete one UserRole
     *   }
     * })
     * 
     */
    delete<T extends UserRoleDeleteArgs>(args: SelectSubset<T, UserRoleDeleteArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserRole.
     * @param {UserRoleUpdateArgs} args - Arguments to update one UserRole.
     * @example
     * // Update one UserRole
     * const userRole = await prisma.userRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRoleUpdateArgs>(args: SelectSubset<T, UserRoleUpdateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserRoles.
     * @param {UserRoleDeleteManyArgs} args - Arguments to filter UserRoles to delete.
     * @example
     * // Delete a few UserRoles
     * const { count } = await prisma.userRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRoleDeleteManyArgs>(args?: SelectSubset<T, UserRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRoleUpdateManyArgs>(args: SelectSubset<T, UserRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRole.
     * @param {UserRoleUpsertArgs} args - Arguments to update or create a UserRole.
     * @example
     * // Update or create a UserRole
     * const userRole = await prisma.userRole.upsert({
     *   create: {
     *     // ... data to create a UserRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRole we want to update
     *   }
     * })
     */
    upsert<T extends UserRoleUpsertArgs>(args: SelectSubset<T, UserRoleUpsertArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleCountArgs} args - Arguments to filter UserRoles to count.
     * @example
     * // Count the number of UserRoles
     * const count = await prisma.userRole.count({
     *   where: {
     *     // ... the filter for the UserRoles we want to count
     *   }
     * })
    **/
    count<T extends UserRoleCountArgs>(
      args?: Subset<T, UserRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRoleAggregateArgs>(args: Subset<T, UserRoleAggregateArgs>): Prisma.PrismaPromise<GetUserRoleAggregateType<T>>

    /**
     * Group by UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRoleGroupByArgs['orderBy'] }
        : { orderBy?: UserRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRole model
   */
  readonly fields: UserRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserRole model
   */ 
  interface UserRoleFieldRefs {
    readonly id: FieldRef<"UserRole", 'Int'>
    readonly company_code: FieldRef<"UserRole", 'String'>
    readonly tenant_code: FieldRef<"UserRole", 'String'>
    readonly division_code: FieldRef<"UserRole", 'String'>
    readonly user_code: FieldRef<"UserRole", 'String'>
    readonly role_code: FieldRef<"UserRole", 'String'>
    readonly createdAt: FieldRef<"UserRole", 'DateTime'>
    readonly updatedAt: FieldRef<"UserRole", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserRole findUnique
   */
  export type UserRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findUniqueOrThrow
   */
  export type UserRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findFirst
   */
  export type UserRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findFirstOrThrow
   */
  export type UserRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findMany
   */
  export type UserRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRoles to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole create
   */
  export type UserRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a UserRole.
     */
    data: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
  }

  /**
   * UserRole createMany
   */
  export type UserRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRole createManyAndReturn
   */
  export type UserRoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserRole update
   */
  export type UserRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a UserRole.
     */
    data: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
    /**
     * Choose, which UserRole to update.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole updateMany
   */
  export type UserRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
  }

  /**
   * UserRole upsert
   */
  export type UserRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the UserRole to update in case it exists.
     */
    where: UserRoleWhereUniqueInput
    /**
     * In case the UserRole found by the `where` argument doesn't exist, create a new UserRole with this data.
     */
    create: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
    /**
     * In case the UserRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
  }

  /**
   * UserRole delete
   */
  export type UserRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter which UserRole to delete.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole deleteMany
   */
  export type UserRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRoles to delete
     */
    where?: UserRoleWhereInput
  }

  /**
   * UserRole without action
   */
  export type UserRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
  }


  /**
   * Model MasterMenu
   */

  export type AggregateMasterMenu = {
    _count: MasterMenuCountAggregateOutputType | null
    _avg: MasterMenuAvgAggregateOutputType | null
    _sum: MasterMenuSumAggregateOutputType | null
    _min: MasterMenuMinAggregateOutputType | null
    _max: MasterMenuMaxAggregateOutputType | null
  }

  export type MasterMenuAvgAggregateOutputType = {
    id: number | null
  }

  export type MasterMenuSumAggregateOutputType = {
    id: number | null
  }

  export type MasterMenuMinAggregateOutputType = {
    id: number | null
    menu_code: string | null
    name: string | null
    url: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MasterMenuMaxAggregateOutputType = {
    id: number | null
    menu_code: string | null
    name: string | null
    url: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MasterMenuCountAggregateOutputType = {
    id: number
    menu_code: number
    name: number
    url: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MasterMenuAvgAggregateInputType = {
    id?: true
  }

  export type MasterMenuSumAggregateInputType = {
    id?: true
  }

  export type MasterMenuMinAggregateInputType = {
    id?: true
    menu_code?: true
    name?: true
    url?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MasterMenuMaxAggregateInputType = {
    id?: true
    menu_code?: true
    name?: true
    url?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MasterMenuCountAggregateInputType = {
    id?: true
    menu_code?: true
    name?: true
    url?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MasterMenuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterMenu to aggregate.
     */
    where?: MasterMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterMenus to fetch.
     */
    orderBy?: MasterMenuOrderByWithRelationInput | MasterMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MasterMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MasterMenus
    **/
    _count?: true | MasterMenuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MasterMenuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MasterMenuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MasterMenuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MasterMenuMaxAggregateInputType
  }

  export type GetMasterMenuAggregateType<T extends MasterMenuAggregateArgs> = {
        [P in keyof T & keyof AggregateMasterMenu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMasterMenu[P]>
      : GetScalarType<T[P], AggregateMasterMenu[P]>
  }




  export type MasterMenuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterMenuWhereInput
    orderBy?: MasterMenuOrderByWithAggregationInput | MasterMenuOrderByWithAggregationInput[]
    by: MasterMenuScalarFieldEnum[] | MasterMenuScalarFieldEnum
    having?: MasterMenuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MasterMenuCountAggregateInputType | true
    _avg?: MasterMenuAvgAggregateInputType
    _sum?: MasterMenuSumAggregateInputType
    _min?: MasterMenuMinAggregateInputType
    _max?: MasterMenuMaxAggregateInputType
  }

  export type MasterMenuGroupByOutputType = {
    id: number
    menu_code: string
    name: string
    url: string
    description: string
    createdAt: Date
    updatedAt: Date
    _count: MasterMenuCountAggregateOutputType | null
    _avg: MasterMenuAvgAggregateOutputType | null
    _sum: MasterMenuSumAggregateOutputType | null
    _min: MasterMenuMinAggregateOutputType | null
    _max: MasterMenuMaxAggregateOutputType | null
  }

  type GetMasterMenuGroupByPayload<T extends MasterMenuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MasterMenuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MasterMenuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MasterMenuGroupByOutputType[P]>
            : GetScalarType<T[P], MasterMenuGroupByOutputType[P]>
        }
      >
    >


  export type MasterMenuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    menu_code?: boolean
    name?: boolean
    url?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sub_menu?: boolean | MasterMenu$sub_menuArgs<ExtArgs>
    _count?: boolean | MasterMenuCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterMenu"]>

  export type MasterMenuSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    menu_code?: boolean
    name?: boolean
    url?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["masterMenu"]>

  export type MasterMenuSelectScalar = {
    id?: boolean
    menu_code?: boolean
    name?: boolean
    url?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MasterMenuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sub_menu?: boolean | MasterMenu$sub_menuArgs<ExtArgs>
    _count?: boolean | MasterMenuCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MasterMenuIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MasterMenuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MasterMenu"
    objects: {
      sub_menu: Prisma.$MasterSubMenuPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      menu_code: string
      name: string
      url: string
      description: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["masterMenu"]>
    composites: {}
  }

  type MasterMenuGetPayload<S extends boolean | null | undefined | MasterMenuDefaultArgs> = $Result.GetResult<Prisma.$MasterMenuPayload, S>

  type MasterMenuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MasterMenuFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MasterMenuCountAggregateInputType | true
    }

  export interface MasterMenuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MasterMenu'], meta: { name: 'MasterMenu' } }
    /**
     * Find zero or one MasterMenu that matches the filter.
     * @param {MasterMenuFindUniqueArgs} args - Arguments to find a MasterMenu
     * @example
     * // Get one MasterMenu
     * const masterMenu = await prisma.masterMenu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MasterMenuFindUniqueArgs>(args: SelectSubset<T, MasterMenuFindUniqueArgs<ExtArgs>>): Prisma__MasterMenuClient<$Result.GetResult<Prisma.$MasterMenuPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MasterMenu that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MasterMenuFindUniqueOrThrowArgs} args - Arguments to find a MasterMenu
     * @example
     * // Get one MasterMenu
     * const masterMenu = await prisma.masterMenu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MasterMenuFindUniqueOrThrowArgs>(args: SelectSubset<T, MasterMenuFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MasterMenuClient<$Result.GetResult<Prisma.$MasterMenuPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MasterMenu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterMenuFindFirstArgs} args - Arguments to find a MasterMenu
     * @example
     * // Get one MasterMenu
     * const masterMenu = await prisma.masterMenu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MasterMenuFindFirstArgs>(args?: SelectSubset<T, MasterMenuFindFirstArgs<ExtArgs>>): Prisma__MasterMenuClient<$Result.GetResult<Prisma.$MasterMenuPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MasterMenu that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterMenuFindFirstOrThrowArgs} args - Arguments to find a MasterMenu
     * @example
     * // Get one MasterMenu
     * const masterMenu = await prisma.masterMenu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MasterMenuFindFirstOrThrowArgs>(args?: SelectSubset<T, MasterMenuFindFirstOrThrowArgs<ExtArgs>>): Prisma__MasterMenuClient<$Result.GetResult<Prisma.$MasterMenuPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MasterMenus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterMenuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MasterMenus
     * const masterMenus = await prisma.masterMenu.findMany()
     * 
     * // Get first 10 MasterMenus
     * const masterMenus = await prisma.masterMenu.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const masterMenuWithIdOnly = await prisma.masterMenu.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MasterMenuFindManyArgs>(args?: SelectSubset<T, MasterMenuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterMenuPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MasterMenu.
     * @param {MasterMenuCreateArgs} args - Arguments to create a MasterMenu.
     * @example
     * // Create one MasterMenu
     * const MasterMenu = await prisma.masterMenu.create({
     *   data: {
     *     // ... data to create a MasterMenu
     *   }
     * })
     * 
     */
    create<T extends MasterMenuCreateArgs>(args: SelectSubset<T, MasterMenuCreateArgs<ExtArgs>>): Prisma__MasterMenuClient<$Result.GetResult<Prisma.$MasterMenuPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MasterMenus.
     * @param {MasterMenuCreateManyArgs} args - Arguments to create many MasterMenus.
     * @example
     * // Create many MasterMenus
     * const masterMenu = await prisma.masterMenu.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MasterMenuCreateManyArgs>(args?: SelectSubset<T, MasterMenuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MasterMenus and returns the data saved in the database.
     * @param {MasterMenuCreateManyAndReturnArgs} args - Arguments to create many MasterMenus.
     * @example
     * // Create many MasterMenus
     * const masterMenu = await prisma.masterMenu.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MasterMenus and only return the `id`
     * const masterMenuWithIdOnly = await prisma.masterMenu.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MasterMenuCreateManyAndReturnArgs>(args?: SelectSubset<T, MasterMenuCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterMenuPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MasterMenu.
     * @param {MasterMenuDeleteArgs} args - Arguments to delete one MasterMenu.
     * @example
     * // Delete one MasterMenu
     * const MasterMenu = await prisma.masterMenu.delete({
     *   where: {
     *     // ... filter to delete one MasterMenu
     *   }
     * })
     * 
     */
    delete<T extends MasterMenuDeleteArgs>(args: SelectSubset<T, MasterMenuDeleteArgs<ExtArgs>>): Prisma__MasterMenuClient<$Result.GetResult<Prisma.$MasterMenuPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MasterMenu.
     * @param {MasterMenuUpdateArgs} args - Arguments to update one MasterMenu.
     * @example
     * // Update one MasterMenu
     * const masterMenu = await prisma.masterMenu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MasterMenuUpdateArgs>(args: SelectSubset<T, MasterMenuUpdateArgs<ExtArgs>>): Prisma__MasterMenuClient<$Result.GetResult<Prisma.$MasterMenuPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MasterMenus.
     * @param {MasterMenuDeleteManyArgs} args - Arguments to filter MasterMenus to delete.
     * @example
     * // Delete a few MasterMenus
     * const { count } = await prisma.masterMenu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MasterMenuDeleteManyArgs>(args?: SelectSubset<T, MasterMenuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterMenus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterMenuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MasterMenus
     * const masterMenu = await prisma.masterMenu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MasterMenuUpdateManyArgs>(args: SelectSubset<T, MasterMenuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MasterMenu.
     * @param {MasterMenuUpsertArgs} args - Arguments to update or create a MasterMenu.
     * @example
     * // Update or create a MasterMenu
     * const masterMenu = await prisma.masterMenu.upsert({
     *   create: {
     *     // ... data to create a MasterMenu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MasterMenu we want to update
     *   }
     * })
     */
    upsert<T extends MasterMenuUpsertArgs>(args: SelectSubset<T, MasterMenuUpsertArgs<ExtArgs>>): Prisma__MasterMenuClient<$Result.GetResult<Prisma.$MasterMenuPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MasterMenus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterMenuCountArgs} args - Arguments to filter MasterMenus to count.
     * @example
     * // Count the number of MasterMenus
     * const count = await prisma.masterMenu.count({
     *   where: {
     *     // ... the filter for the MasterMenus we want to count
     *   }
     * })
    **/
    count<T extends MasterMenuCountArgs>(
      args?: Subset<T, MasterMenuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MasterMenuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MasterMenu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterMenuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MasterMenuAggregateArgs>(args: Subset<T, MasterMenuAggregateArgs>): Prisma.PrismaPromise<GetMasterMenuAggregateType<T>>

    /**
     * Group by MasterMenu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterMenuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MasterMenuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MasterMenuGroupByArgs['orderBy'] }
        : { orderBy?: MasterMenuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MasterMenuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMasterMenuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MasterMenu model
   */
  readonly fields: MasterMenuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MasterMenu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MasterMenuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sub_menu<T extends MasterMenu$sub_menuArgs<ExtArgs> = {}>(args?: Subset<T, MasterMenu$sub_menuArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterSubMenuPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MasterMenu model
   */ 
  interface MasterMenuFieldRefs {
    readonly id: FieldRef<"MasterMenu", 'Int'>
    readonly menu_code: FieldRef<"MasterMenu", 'String'>
    readonly name: FieldRef<"MasterMenu", 'String'>
    readonly url: FieldRef<"MasterMenu", 'String'>
    readonly description: FieldRef<"MasterMenu", 'String'>
    readonly createdAt: FieldRef<"MasterMenu", 'DateTime'>
    readonly updatedAt: FieldRef<"MasterMenu", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MasterMenu findUnique
   */
  export type MasterMenuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenu
     */
    select?: MasterMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuInclude<ExtArgs> | null
    /**
     * Filter, which MasterMenu to fetch.
     */
    where: MasterMenuWhereUniqueInput
  }

  /**
   * MasterMenu findUniqueOrThrow
   */
  export type MasterMenuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenu
     */
    select?: MasterMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuInclude<ExtArgs> | null
    /**
     * Filter, which MasterMenu to fetch.
     */
    where: MasterMenuWhereUniqueInput
  }

  /**
   * MasterMenu findFirst
   */
  export type MasterMenuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenu
     */
    select?: MasterMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuInclude<ExtArgs> | null
    /**
     * Filter, which MasterMenu to fetch.
     */
    where?: MasterMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterMenus to fetch.
     */
    orderBy?: MasterMenuOrderByWithRelationInput | MasterMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterMenus.
     */
    cursor?: MasterMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterMenus.
     */
    distinct?: MasterMenuScalarFieldEnum | MasterMenuScalarFieldEnum[]
  }

  /**
   * MasterMenu findFirstOrThrow
   */
  export type MasterMenuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenu
     */
    select?: MasterMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuInclude<ExtArgs> | null
    /**
     * Filter, which MasterMenu to fetch.
     */
    where?: MasterMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterMenus to fetch.
     */
    orderBy?: MasterMenuOrderByWithRelationInput | MasterMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterMenus.
     */
    cursor?: MasterMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterMenus.
     */
    distinct?: MasterMenuScalarFieldEnum | MasterMenuScalarFieldEnum[]
  }

  /**
   * MasterMenu findMany
   */
  export type MasterMenuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenu
     */
    select?: MasterMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuInclude<ExtArgs> | null
    /**
     * Filter, which MasterMenus to fetch.
     */
    where?: MasterMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterMenus to fetch.
     */
    orderBy?: MasterMenuOrderByWithRelationInput | MasterMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MasterMenus.
     */
    cursor?: MasterMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterMenus.
     */
    skip?: number
    distinct?: MasterMenuScalarFieldEnum | MasterMenuScalarFieldEnum[]
  }

  /**
   * MasterMenu create
   */
  export type MasterMenuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenu
     */
    select?: MasterMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuInclude<ExtArgs> | null
    /**
     * The data needed to create a MasterMenu.
     */
    data: XOR<MasterMenuCreateInput, MasterMenuUncheckedCreateInput>
  }

  /**
   * MasterMenu createMany
   */
  export type MasterMenuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MasterMenus.
     */
    data: MasterMenuCreateManyInput | MasterMenuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MasterMenu createManyAndReturn
   */
  export type MasterMenuCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenu
     */
    select?: MasterMenuSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MasterMenus.
     */
    data: MasterMenuCreateManyInput | MasterMenuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MasterMenu update
   */
  export type MasterMenuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenu
     */
    select?: MasterMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuInclude<ExtArgs> | null
    /**
     * The data needed to update a MasterMenu.
     */
    data: XOR<MasterMenuUpdateInput, MasterMenuUncheckedUpdateInput>
    /**
     * Choose, which MasterMenu to update.
     */
    where: MasterMenuWhereUniqueInput
  }

  /**
   * MasterMenu updateMany
   */
  export type MasterMenuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MasterMenus.
     */
    data: XOR<MasterMenuUpdateManyMutationInput, MasterMenuUncheckedUpdateManyInput>
    /**
     * Filter which MasterMenus to update
     */
    where?: MasterMenuWhereInput
  }

  /**
   * MasterMenu upsert
   */
  export type MasterMenuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenu
     */
    select?: MasterMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuInclude<ExtArgs> | null
    /**
     * The filter to search for the MasterMenu to update in case it exists.
     */
    where: MasterMenuWhereUniqueInput
    /**
     * In case the MasterMenu found by the `where` argument doesn't exist, create a new MasterMenu with this data.
     */
    create: XOR<MasterMenuCreateInput, MasterMenuUncheckedCreateInput>
    /**
     * In case the MasterMenu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MasterMenuUpdateInput, MasterMenuUncheckedUpdateInput>
  }

  /**
   * MasterMenu delete
   */
  export type MasterMenuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenu
     */
    select?: MasterMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuInclude<ExtArgs> | null
    /**
     * Filter which MasterMenu to delete.
     */
    where: MasterMenuWhereUniqueInput
  }

  /**
   * MasterMenu deleteMany
   */
  export type MasterMenuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterMenus to delete
     */
    where?: MasterMenuWhereInput
  }

  /**
   * MasterMenu.sub_menu
   */
  export type MasterMenu$sub_menuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSubMenu
     */
    select?: MasterSubMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSubMenuInclude<ExtArgs> | null
    where?: MasterSubMenuWhereInput
    orderBy?: MasterSubMenuOrderByWithRelationInput | MasterSubMenuOrderByWithRelationInput[]
    cursor?: MasterSubMenuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterSubMenuScalarFieldEnum | MasterSubMenuScalarFieldEnum[]
  }

  /**
   * MasterMenu without action
   */
  export type MasterMenuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenu
     */
    select?: MasterMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuInclude<ExtArgs> | null
  }


  /**
   * Model MasterSubMenu
   */

  export type AggregateMasterSubMenu = {
    _count: MasterSubMenuCountAggregateOutputType | null
    _avg: MasterSubMenuAvgAggregateOutputType | null
    _sum: MasterSubMenuSumAggregateOutputType | null
    _min: MasterSubMenuMinAggregateOutputType | null
    _max: MasterSubMenuMaxAggregateOutputType | null
  }

  export type MasterSubMenuAvgAggregateOutputType = {
    id: number | null
  }

  export type MasterSubMenuSumAggregateOutputType = {
    id: number | null
  }

  export type MasterSubMenuMinAggregateOutputType = {
    id: number | null
    sub_menu_code: string | null
    menu_code: string | null
    name: string | null
    url: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MasterSubMenuMaxAggregateOutputType = {
    id: number | null
    sub_menu_code: string | null
    menu_code: string | null
    name: string | null
    url: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MasterSubMenuCountAggregateOutputType = {
    id: number
    sub_menu_code: number
    menu_code: number
    name: number
    url: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MasterSubMenuAvgAggregateInputType = {
    id?: true
  }

  export type MasterSubMenuSumAggregateInputType = {
    id?: true
  }

  export type MasterSubMenuMinAggregateInputType = {
    id?: true
    sub_menu_code?: true
    menu_code?: true
    name?: true
    url?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MasterSubMenuMaxAggregateInputType = {
    id?: true
    sub_menu_code?: true
    menu_code?: true
    name?: true
    url?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MasterSubMenuCountAggregateInputType = {
    id?: true
    sub_menu_code?: true
    menu_code?: true
    name?: true
    url?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MasterSubMenuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterSubMenu to aggregate.
     */
    where?: MasterSubMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterSubMenus to fetch.
     */
    orderBy?: MasterSubMenuOrderByWithRelationInput | MasterSubMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MasterSubMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterSubMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterSubMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MasterSubMenus
    **/
    _count?: true | MasterSubMenuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MasterSubMenuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MasterSubMenuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MasterSubMenuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MasterSubMenuMaxAggregateInputType
  }

  export type GetMasterSubMenuAggregateType<T extends MasterSubMenuAggregateArgs> = {
        [P in keyof T & keyof AggregateMasterSubMenu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMasterSubMenu[P]>
      : GetScalarType<T[P], AggregateMasterSubMenu[P]>
  }




  export type MasterSubMenuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterSubMenuWhereInput
    orderBy?: MasterSubMenuOrderByWithAggregationInput | MasterSubMenuOrderByWithAggregationInput[]
    by: MasterSubMenuScalarFieldEnum[] | MasterSubMenuScalarFieldEnum
    having?: MasterSubMenuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MasterSubMenuCountAggregateInputType | true
    _avg?: MasterSubMenuAvgAggregateInputType
    _sum?: MasterSubMenuSumAggregateInputType
    _min?: MasterSubMenuMinAggregateInputType
    _max?: MasterSubMenuMaxAggregateInputType
  }

  export type MasterSubMenuGroupByOutputType = {
    id: number
    sub_menu_code: string
    menu_code: string
    name: string
    url: string
    description: string
    createdAt: Date
    updatedAt: Date
    _count: MasterSubMenuCountAggregateOutputType | null
    _avg: MasterSubMenuAvgAggregateOutputType | null
    _sum: MasterSubMenuSumAggregateOutputType | null
    _min: MasterSubMenuMinAggregateOutputType | null
    _max: MasterSubMenuMaxAggregateOutputType | null
  }

  type GetMasterSubMenuGroupByPayload<T extends MasterSubMenuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MasterSubMenuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MasterSubMenuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MasterSubMenuGroupByOutputType[P]>
            : GetScalarType<T[P], MasterSubMenuGroupByOutputType[P]>
        }
      >
    >


  export type MasterSubMenuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sub_menu_code?: boolean
    menu_code?: boolean
    name?: boolean
    url?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    menu?: boolean | MasterMenuDefaultArgs<ExtArgs>
    actions?: boolean | MasterSubMenu$actionsArgs<ExtArgs>
    _count?: boolean | MasterSubMenuCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterSubMenu"]>

  export type MasterSubMenuSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sub_menu_code?: boolean
    menu_code?: boolean
    name?: boolean
    url?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    menu?: boolean | MasterMenuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterSubMenu"]>

  export type MasterSubMenuSelectScalar = {
    id?: boolean
    sub_menu_code?: boolean
    menu_code?: boolean
    name?: boolean
    url?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MasterSubMenuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    menu?: boolean | MasterMenuDefaultArgs<ExtArgs>
    actions?: boolean | MasterSubMenu$actionsArgs<ExtArgs>
    _count?: boolean | MasterSubMenuCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MasterSubMenuIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    menu?: boolean | MasterMenuDefaultArgs<ExtArgs>
  }

  export type $MasterSubMenuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MasterSubMenu"
    objects: {
      menu: Prisma.$MasterMenuPayload<ExtArgs>
      actions: Prisma.$MasterMenuActionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sub_menu_code: string
      menu_code: string
      name: string
      url: string
      description: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["masterSubMenu"]>
    composites: {}
  }

  type MasterSubMenuGetPayload<S extends boolean | null | undefined | MasterSubMenuDefaultArgs> = $Result.GetResult<Prisma.$MasterSubMenuPayload, S>

  type MasterSubMenuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MasterSubMenuFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MasterSubMenuCountAggregateInputType | true
    }

  export interface MasterSubMenuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MasterSubMenu'], meta: { name: 'MasterSubMenu' } }
    /**
     * Find zero or one MasterSubMenu that matches the filter.
     * @param {MasterSubMenuFindUniqueArgs} args - Arguments to find a MasterSubMenu
     * @example
     * // Get one MasterSubMenu
     * const masterSubMenu = await prisma.masterSubMenu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MasterSubMenuFindUniqueArgs>(args: SelectSubset<T, MasterSubMenuFindUniqueArgs<ExtArgs>>): Prisma__MasterSubMenuClient<$Result.GetResult<Prisma.$MasterSubMenuPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MasterSubMenu that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MasterSubMenuFindUniqueOrThrowArgs} args - Arguments to find a MasterSubMenu
     * @example
     * // Get one MasterSubMenu
     * const masterSubMenu = await prisma.masterSubMenu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MasterSubMenuFindUniqueOrThrowArgs>(args: SelectSubset<T, MasterSubMenuFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MasterSubMenuClient<$Result.GetResult<Prisma.$MasterSubMenuPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MasterSubMenu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterSubMenuFindFirstArgs} args - Arguments to find a MasterSubMenu
     * @example
     * // Get one MasterSubMenu
     * const masterSubMenu = await prisma.masterSubMenu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MasterSubMenuFindFirstArgs>(args?: SelectSubset<T, MasterSubMenuFindFirstArgs<ExtArgs>>): Prisma__MasterSubMenuClient<$Result.GetResult<Prisma.$MasterSubMenuPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MasterSubMenu that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterSubMenuFindFirstOrThrowArgs} args - Arguments to find a MasterSubMenu
     * @example
     * // Get one MasterSubMenu
     * const masterSubMenu = await prisma.masterSubMenu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MasterSubMenuFindFirstOrThrowArgs>(args?: SelectSubset<T, MasterSubMenuFindFirstOrThrowArgs<ExtArgs>>): Prisma__MasterSubMenuClient<$Result.GetResult<Prisma.$MasterSubMenuPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MasterSubMenus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterSubMenuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MasterSubMenus
     * const masterSubMenus = await prisma.masterSubMenu.findMany()
     * 
     * // Get first 10 MasterSubMenus
     * const masterSubMenus = await prisma.masterSubMenu.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const masterSubMenuWithIdOnly = await prisma.masterSubMenu.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MasterSubMenuFindManyArgs>(args?: SelectSubset<T, MasterSubMenuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterSubMenuPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MasterSubMenu.
     * @param {MasterSubMenuCreateArgs} args - Arguments to create a MasterSubMenu.
     * @example
     * // Create one MasterSubMenu
     * const MasterSubMenu = await prisma.masterSubMenu.create({
     *   data: {
     *     // ... data to create a MasterSubMenu
     *   }
     * })
     * 
     */
    create<T extends MasterSubMenuCreateArgs>(args: SelectSubset<T, MasterSubMenuCreateArgs<ExtArgs>>): Prisma__MasterSubMenuClient<$Result.GetResult<Prisma.$MasterSubMenuPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MasterSubMenus.
     * @param {MasterSubMenuCreateManyArgs} args - Arguments to create many MasterSubMenus.
     * @example
     * // Create many MasterSubMenus
     * const masterSubMenu = await prisma.masterSubMenu.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MasterSubMenuCreateManyArgs>(args?: SelectSubset<T, MasterSubMenuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MasterSubMenus and returns the data saved in the database.
     * @param {MasterSubMenuCreateManyAndReturnArgs} args - Arguments to create many MasterSubMenus.
     * @example
     * // Create many MasterSubMenus
     * const masterSubMenu = await prisma.masterSubMenu.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MasterSubMenus and only return the `id`
     * const masterSubMenuWithIdOnly = await prisma.masterSubMenu.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MasterSubMenuCreateManyAndReturnArgs>(args?: SelectSubset<T, MasterSubMenuCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterSubMenuPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MasterSubMenu.
     * @param {MasterSubMenuDeleteArgs} args - Arguments to delete one MasterSubMenu.
     * @example
     * // Delete one MasterSubMenu
     * const MasterSubMenu = await prisma.masterSubMenu.delete({
     *   where: {
     *     // ... filter to delete one MasterSubMenu
     *   }
     * })
     * 
     */
    delete<T extends MasterSubMenuDeleteArgs>(args: SelectSubset<T, MasterSubMenuDeleteArgs<ExtArgs>>): Prisma__MasterSubMenuClient<$Result.GetResult<Prisma.$MasterSubMenuPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MasterSubMenu.
     * @param {MasterSubMenuUpdateArgs} args - Arguments to update one MasterSubMenu.
     * @example
     * // Update one MasterSubMenu
     * const masterSubMenu = await prisma.masterSubMenu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MasterSubMenuUpdateArgs>(args: SelectSubset<T, MasterSubMenuUpdateArgs<ExtArgs>>): Prisma__MasterSubMenuClient<$Result.GetResult<Prisma.$MasterSubMenuPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MasterSubMenus.
     * @param {MasterSubMenuDeleteManyArgs} args - Arguments to filter MasterSubMenus to delete.
     * @example
     * // Delete a few MasterSubMenus
     * const { count } = await prisma.masterSubMenu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MasterSubMenuDeleteManyArgs>(args?: SelectSubset<T, MasterSubMenuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterSubMenus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterSubMenuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MasterSubMenus
     * const masterSubMenu = await prisma.masterSubMenu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MasterSubMenuUpdateManyArgs>(args: SelectSubset<T, MasterSubMenuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MasterSubMenu.
     * @param {MasterSubMenuUpsertArgs} args - Arguments to update or create a MasterSubMenu.
     * @example
     * // Update or create a MasterSubMenu
     * const masterSubMenu = await prisma.masterSubMenu.upsert({
     *   create: {
     *     // ... data to create a MasterSubMenu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MasterSubMenu we want to update
     *   }
     * })
     */
    upsert<T extends MasterSubMenuUpsertArgs>(args: SelectSubset<T, MasterSubMenuUpsertArgs<ExtArgs>>): Prisma__MasterSubMenuClient<$Result.GetResult<Prisma.$MasterSubMenuPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MasterSubMenus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterSubMenuCountArgs} args - Arguments to filter MasterSubMenus to count.
     * @example
     * // Count the number of MasterSubMenus
     * const count = await prisma.masterSubMenu.count({
     *   where: {
     *     // ... the filter for the MasterSubMenus we want to count
     *   }
     * })
    **/
    count<T extends MasterSubMenuCountArgs>(
      args?: Subset<T, MasterSubMenuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MasterSubMenuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MasterSubMenu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterSubMenuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MasterSubMenuAggregateArgs>(args: Subset<T, MasterSubMenuAggregateArgs>): Prisma.PrismaPromise<GetMasterSubMenuAggregateType<T>>

    /**
     * Group by MasterSubMenu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterSubMenuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MasterSubMenuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MasterSubMenuGroupByArgs['orderBy'] }
        : { orderBy?: MasterSubMenuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MasterSubMenuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMasterSubMenuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MasterSubMenu model
   */
  readonly fields: MasterSubMenuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MasterSubMenu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MasterSubMenuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    menu<T extends MasterMenuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MasterMenuDefaultArgs<ExtArgs>>): Prisma__MasterMenuClient<$Result.GetResult<Prisma.$MasterMenuPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    actions<T extends MasterSubMenu$actionsArgs<ExtArgs> = {}>(args?: Subset<T, MasterSubMenu$actionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterMenuActionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MasterSubMenu model
   */ 
  interface MasterSubMenuFieldRefs {
    readonly id: FieldRef<"MasterSubMenu", 'Int'>
    readonly sub_menu_code: FieldRef<"MasterSubMenu", 'String'>
    readonly menu_code: FieldRef<"MasterSubMenu", 'String'>
    readonly name: FieldRef<"MasterSubMenu", 'String'>
    readonly url: FieldRef<"MasterSubMenu", 'String'>
    readonly description: FieldRef<"MasterSubMenu", 'String'>
    readonly createdAt: FieldRef<"MasterSubMenu", 'DateTime'>
    readonly updatedAt: FieldRef<"MasterSubMenu", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MasterSubMenu findUnique
   */
  export type MasterSubMenuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSubMenu
     */
    select?: MasterSubMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSubMenuInclude<ExtArgs> | null
    /**
     * Filter, which MasterSubMenu to fetch.
     */
    where: MasterSubMenuWhereUniqueInput
  }

  /**
   * MasterSubMenu findUniqueOrThrow
   */
  export type MasterSubMenuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSubMenu
     */
    select?: MasterSubMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSubMenuInclude<ExtArgs> | null
    /**
     * Filter, which MasterSubMenu to fetch.
     */
    where: MasterSubMenuWhereUniqueInput
  }

  /**
   * MasterSubMenu findFirst
   */
  export type MasterSubMenuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSubMenu
     */
    select?: MasterSubMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSubMenuInclude<ExtArgs> | null
    /**
     * Filter, which MasterSubMenu to fetch.
     */
    where?: MasterSubMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterSubMenus to fetch.
     */
    orderBy?: MasterSubMenuOrderByWithRelationInput | MasterSubMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterSubMenus.
     */
    cursor?: MasterSubMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterSubMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterSubMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterSubMenus.
     */
    distinct?: MasterSubMenuScalarFieldEnum | MasterSubMenuScalarFieldEnum[]
  }

  /**
   * MasterSubMenu findFirstOrThrow
   */
  export type MasterSubMenuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSubMenu
     */
    select?: MasterSubMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSubMenuInclude<ExtArgs> | null
    /**
     * Filter, which MasterSubMenu to fetch.
     */
    where?: MasterSubMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterSubMenus to fetch.
     */
    orderBy?: MasterSubMenuOrderByWithRelationInput | MasterSubMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterSubMenus.
     */
    cursor?: MasterSubMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterSubMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterSubMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterSubMenus.
     */
    distinct?: MasterSubMenuScalarFieldEnum | MasterSubMenuScalarFieldEnum[]
  }

  /**
   * MasterSubMenu findMany
   */
  export type MasterSubMenuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSubMenu
     */
    select?: MasterSubMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSubMenuInclude<ExtArgs> | null
    /**
     * Filter, which MasterSubMenus to fetch.
     */
    where?: MasterSubMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterSubMenus to fetch.
     */
    orderBy?: MasterSubMenuOrderByWithRelationInput | MasterSubMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MasterSubMenus.
     */
    cursor?: MasterSubMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterSubMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterSubMenus.
     */
    skip?: number
    distinct?: MasterSubMenuScalarFieldEnum | MasterSubMenuScalarFieldEnum[]
  }

  /**
   * MasterSubMenu create
   */
  export type MasterSubMenuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSubMenu
     */
    select?: MasterSubMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSubMenuInclude<ExtArgs> | null
    /**
     * The data needed to create a MasterSubMenu.
     */
    data: XOR<MasterSubMenuCreateInput, MasterSubMenuUncheckedCreateInput>
  }

  /**
   * MasterSubMenu createMany
   */
  export type MasterSubMenuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MasterSubMenus.
     */
    data: MasterSubMenuCreateManyInput | MasterSubMenuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MasterSubMenu createManyAndReturn
   */
  export type MasterSubMenuCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSubMenu
     */
    select?: MasterSubMenuSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MasterSubMenus.
     */
    data: MasterSubMenuCreateManyInput | MasterSubMenuCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSubMenuIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MasterSubMenu update
   */
  export type MasterSubMenuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSubMenu
     */
    select?: MasterSubMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSubMenuInclude<ExtArgs> | null
    /**
     * The data needed to update a MasterSubMenu.
     */
    data: XOR<MasterSubMenuUpdateInput, MasterSubMenuUncheckedUpdateInput>
    /**
     * Choose, which MasterSubMenu to update.
     */
    where: MasterSubMenuWhereUniqueInput
  }

  /**
   * MasterSubMenu updateMany
   */
  export type MasterSubMenuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MasterSubMenus.
     */
    data: XOR<MasterSubMenuUpdateManyMutationInput, MasterSubMenuUncheckedUpdateManyInput>
    /**
     * Filter which MasterSubMenus to update
     */
    where?: MasterSubMenuWhereInput
  }

  /**
   * MasterSubMenu upsert
   */
  export type MasterSubMenuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSubMenu
     */
    select?: MasterSubMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSubMenuInclude<ExtArgs> | null
    /**
     * The filter to search for the MasterSubMenu to update in case it exists.
     */
    where: MasterSubMenuWhereUniqueInput
    /**
     * In case the MasterSubMenu found by the `where` argument doesn't exist, create a new MasterSubMenu with this data.
     */
    create: XOR<MasterSubMenuCreateInput, MasterSubMenuUncheckedCreateInput>
    /**
     * In case the MasterSubMenu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MasterSubMenuUpdateInput, MasterSubMenuUncheckedUpdateInput>
  }

  /**
   * MasterSubMenu delete
   */
  export type MasterSubMenuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSubMenu
     */
    select?: MasterSubMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSubMenuInclude<ExtArgs> | null
    /**
     * Filter which MasterSubMenu to delete.
     */
    where: MasterSubMenuWhereUniqueInput
  }

  /**
   * MasterSubMenu deleteMany
   */
  export type MasterSubMenuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterSubMenus to delete
     */
    where?: MasterSubMenuWhereInput
  }

  /**
   * MasterSubMenu.actions
   */
  export type MasterSubMenu$actionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenuAction
     */
    select?: MasterMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuActionInclude<ExtArgs> | null
    where?: MasterMenuActionWhereInput
    orderBy?: MasterMenuActionOrderByWithRelationInput | MasterMenuActionOrderByWithRelationInput[]
    cursor?: MasterMenuActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterMenuActionScalarFieldEnum | MasterMenuActionScalarFieldEnum[]
  }

  /**
   * MasterSubMenu without action
   */
  export type MasterSubMenuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterSubMenu
     */
    select?: MasterSubMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterSubMenuInclude<ExtArgs> | null
  }


  /**
   * Model MasterMenuAction
   */

  export type AggregateMasterMenuAction = {
    _count: MasterMenuActionCountAggregateOutputType | null
    _avg: MasterMenuActionAvgAggregateOutputType | null
    _sum: MasterMenuActionSumAggregateOutputType | null
    _min: MasterMenuActionMinAggregateOutputType | null
    _max: MasterMenuActionMaxAggregateOutputType | null
  }

  export type MasterMenuActionAvgAggregateOutputType = {
    id: number | null
  }

  export type MasterMenuActionSumAggregateOutputType = {
    id: number | null
  }

  export type MasterMenuActionMinAggregateOutputType = {
    id: number | null
    sub_menu_code: string | null
    menu_code: string | null
    action_code: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MasterMenuActionMaxAggregateOutputType = {
    id: number | null
    sub_menu_code: string | null
    menu_code: string | null
    action_code: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MasterMenuActionCountAggregateOutputType = {
    id: number
    sub_menu_code: number
    menu_code: number
    action_code: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MasterMenuActionAvgAggregateInputType = {
    id?: true
  }

  export type MasterMenuActionSumAggregateInputType = {
    id?: true
  }

  export type MasterMenuActionMinAggregateInputType = {
    id?: true
    sub_menu_code?: true
    menu_code?: true
    action_code?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MasterMenuActionMaxAggregateInputType = {
    id?: true
    sub_menu_code?: true
    menu_code?: true
    action_code?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MasterMenuActionCountAggregateInputType = {
    id?: true
    sub_menu_code?: true
    menu_code?: true
    action_code?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MasterMenuActionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterMenuAction to aggregate.
     */
    where?: MasterMenuActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterMenuActions to fetch.
     */
    orderBy?: MasterMenuActionOrderByWithRelationInput | MasterMenuActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MasterMenuActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterMenuActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterMenuActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MasterMenuActions
    **/
    _count?: true | MasterMenuActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MasterMenuActionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MasterMenuActionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MasterMenuActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MasterMenuActionMaxAggregateInputType
  }

  export type GetMasterMenuActionAggregateType<T extends MasterMenuActionAggregateArgs> = {
        [P in keyof T & keyof AggregateMasterMenuAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMasterMenuAction[P]>
      : GetScalarType<T[P], AggregateMasterMenuAction[P]>
  }




  export type MasterMenuActionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterMenuActionWhereInput
    orderBy?: MasterMenuActionOrderByWithAggregationInput | MasterMenuActionOrderByWithAggregationInput[]
    by: MasterMenuActionScalarFieldEnum[] | MasterMenuActionScalarFieldEnum
    having?: MasterMenuActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MasterMenuActionCountAggregateInputType | true
    _avg?: MasterMenuActionAvgAggregateInputType
    _sum?: MasterMenuActionSumAggregateInputType
    _min?: MasterMenuActionMinAggregateInputType
    _max?: MasterMenuActionMaxAggregateInputType
  }

  export type MasterMenuActionGroupByOutputType = {
    id: number
    sub_menu_code: string
    menu_code: string
    action_code: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: MasterMenuActionCountAggregateOutputType | null
    _avg: MasterMenuActionAvgAggregateOutputType | null
    _sum: MasterMenuActionSumAggregateOutputType | null
    _min: MasterMenuActionMinAggregateOutputType | null
    _max: MasterMenuActionMaxAggregateOutputType | null
  }

  type GetMasterMenuActionGroupByPayload<T extends MasterMenuActionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MasterMenuActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MasterMenuActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MasterMenuActionGroupByOutputType[P]>
            : GetScalarType<T[P], MasterMenuActionGroupByOutputType[P]>
        }
      >
    >


  export type MasterMenuActionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sub_menu_code?: boolean
    menu_code?: boolean
    action_code?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | MasterMenuAction$usersArgs<ExtArgs>
    sub_menu?: boolean | MasterSubMenuDefaultArgs<ExtArgs>
    _count?: boolean | MasterMenuActionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterMenuAction"]>

  export type MasterMenuActionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sub_menu_code?: boolean
    menu_code?: boolean
    action_code?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sub_menu?: boolean | MasterSubMenuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterMenuAction"]>

  export type MasterMenuActionSelectScalar = {
    id?: boolean
    sub_menu_code?: boolean
    menu_code?: boolean
    action_code?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MasterMenuActionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | MasterMenuAction$usersArgs<ExtArgs>
    sub_menu?: boolean | MasterSubMenuDefaultArgs<ExtArgs>
    _count?: boolean | MasterMenuActionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MasterMenuActionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sub_menu?: boolean | MasterSubMenuDefaultArgs<ExtArgs>
  }

  export type $MasterMenuActionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MasterMenuAction"
    objects: {
      users: Prisma.$UserMenuActionPayload<ExtArgs>[]
      sub_menu: Prisma.$MasterSubMenuPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sub_menu_code: string
      menu_code: string
      action_code: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["masterMenuAction"]>
    composites: {}
  }

  type MasterMenuActionGetPayload<S extends boolean | null | undefined | MasterMenuActionDefaultArgs> = $Result.GetResult<Prisma.$MasterMenuActionPayload, S>

  type MasterMenuActionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MasterMenuActionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MasterMenuActionCountAggregateInputType | true
    }

  export interface MasterMenuActionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MasterMenuAction'], meta: { name: 'MasterMenuAction' } }
    /**
     * Find zero or one MasterMenuAction that matches the filter.
     * @param {MasterMenuActionFindUniqueArgs} args - Arguments to find a MasterMenuAction
     * @example
     * // Get one MasterMenuAction
     * const masterMenuAction = await prisma.masterMenuAction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MasterMenuActionFindUniqueArgs>(args: SelectSubset<T, MasterMenuActionFindUniqueArgs<ExtArgs>>): Prisma__MasterMenuActionClient<$Result.GetResult<Prisma.$MasterMenuActionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MasterMenuAction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MasterMenuActionFindUniqueOrThrowArgs} args - Arguments to find a MasterMenuAction
     * @example
     * // Get one MasterMenuAction
     * const masterMenuAction = await prisma.masterMenuAction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MasterMenuActionFindUniqueOrThrowArgs>(args: SelectSubset<T, MasterMenuActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MasterMenuActionClient<$Result.GetResult<Prisma.$MasterMenuActionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MasterMenuAction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterMenuActionFindFirstArgs} args - Arguments to find a MasterMenuAction
     * @example
     * // Get one MasterMenuAction
     * const masterMenuAction = await prisma.masterMenuAction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MasterMenuActionFindFirstArgs>(args?: SelectSubset<T, MasterMenuActionFindFirstArgs<ExtArgs>>): Prisma__MasterMenuActionClient<$Result.GetResult<Prisma.$MasterMenuActionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MasterMenuAction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterMenuActionFindFirstOrThrowArgs} args - Arguments to find a MasterMenuAction
     * @example
     * // Get one MasterMenuAction
     * const masterMenuAction = await prisma.masterMenuAction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MasterMenuActionFindFirstOrThrowArgs>(args?: SelectSubset<T, MasterMenuActionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MasterMenuActionClient<$Result.GetResult<Prisma.$MasterMenuActionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MasterMenuActions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterMenuActionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MasterMenuActions
     * const masterMenuActions = await prisma.masterMenuAction.findMany()
     * 
     * // Get first 10 MasterMenuActions
     * const masterMenuActions = await prisma.masterMenuAction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const masterMenuActionWithIdOnly = await prisma.masterMenuAction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MasterMenuActionFindManyArgs>(args?: SelectSubset<T, MasterMenuActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterMenuActionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MasterMenuAction.
     * @param {MasterMenuActionCreateArgs} args - Arguments to create a MasterMenuAction.
     * @example
     * // Create one MasterMenuAction
     * const MasterMenuAction = await prisma.masterMenuAction.create({
     *   data: {
     *     // ... data to create a MasterMenuAction
     *   }
     * })
     * 
     */
    create<T extends MasterMenuActionCreateArgs>(args: SelectSubset<T, MasterMenuActionCreateArgs<ExtArgs>>): Prisma__MasterMenuActionClient<$Result.GetResult<Prisma.$MasterMenuActionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MasterMenuActions.
     * @param {MasterMenuActionCreateManyArgs} args - Arguments to create many MasterMenuActions.
     * @example
     * // Create many MasterMenuActions
     * const masterMenuAction = await prisma.masterMenuAction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MasterMenuActionCreateManyArgs>(args?: SelectSubset<T, MasterMenuActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MasterMenuActions and returns the data saved in the database.
     * @param {MasterMenuActionCreateManyAndReturnArgs} args - Arguments to create many MasterMenuActions.
     * @example
     * // Create many MasterMenuActions
     * const masterMenuAction = await prisma.masterMenuAction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MasterMenuActions and only return the `id`
     * const masterMenuActionWithIdOnly = await prisma.masterMenuAction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MasterMenuActionCreateManyAndReturnArgs>(args?: SelectSubset<T, MasterMenuActionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterMenuActionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MasterMenuAction.
     * @param {MasterMenuActionDeleteArgs} args - Arguments to delete one MasterMenuAction.
     * @example
     * // Delete one MasterMenuAction
     * const MasterMenuAction = await prisma.masterMenuAction.delete({
     *   where: {
     *     // ... filter to delete one MasterMenuAction
     *   }
     * })
     * 
     */
    delete<T extends MasterMenuActionDeleteArgs>(args: SelectSubset<T, MasterMenuActionDeleteArgs<ExtArgs>>): Prisma__MasterMenuActionClient<$Result.GetResult<Prisma.$MasterMenuActionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MasterMenuAction.
     * @param {MasterMenuActionUpdateArgs} args - Arguments to update one MasterMenuAction.
     * @example
     * // Update one MasterMenuAction
     * const masterMenuAction = await prisma.masterMenuAction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MasterMenuActionUpdateArgs>(args: SelectSubset<T, MasterMenuActionUpdateArgs<ExtArgs>>): Prisma__MasterMenuActionClient<$Result.GetResult<Prisma.$MasterMenuActionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MasterMenuActions.
     * @param {MasterMenuActionDeleteManyArgs} args - Arguments to filter MasterMenuActions to delete.
     * @example
     * // Delete a few MasterMenuActions
     * const { count } = await prisma.masterMenuAction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MasterMenuActionDeleteManyArgs>(args?: SelectSubset<T, MasterMenuActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterMenuActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterMenuActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MasterMenuActions
     * const masterMenuAction = await prisma.masterMenuAction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MasterMenuActionUpdateManyArgs>(args: SelectSubset<T, MasterMenuActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MasterMenuAction.
     * @param {MasterMenuActionUpsertArgs} args - Arguments to update or create a MasterMenuAction.
     * @example
     * // Update or create a MasterMenuAction
     * const masterMenuAction = await prisma.masterMenuAction.upsert({
     *   create: {
     *     // ... data to create a MasterMenuAction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MasterMenuAction we want to update
     *   }
     * })
     */
    upsert<T extends MasterMenuActionUpsertArgs>(args: SelectSubset<T, MasterMenuActionUpsertArgs<ExtArgs>>): Prisma__MasterMenuActionClient<$Result.GetResult<Prisma.$MasterMenuActionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MasterMenuActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterMenuActionCountArgs} args - Arguments to filter MasterMenuActions to count.
     * @example
     * // Count the number of MasterMenuActions
     * const count = await prisma.masterMenuAction.count({
     *   where: {
     *     // ... the filter for the MasterMenuActions we want to count
     *   }
     * })
    **/
    count<T extends MasterMenuActionCountArgs>(
      args?: Subset<T, MasterMenuActionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MasterMenuActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MasterMenuAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterMenuActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MasterMenuActionAggregateArgs>(args: Subset<T, MasterMenuActionAggregateArgs>): Prisma.PrismaPromise<GetMasterMenuActionAggregateType<T>>

    /**
     * Group by MasterMenuAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterMenuActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MasterMenuActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MasterMenuActionGroupByArgs['orderBy'] }
        : { orderBy?: MasterMenuActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MasterMenuActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMasterMenuActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MasterMenuAction model
   */
  readonly fields: MasterMenuActionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MasterMenuAction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MasterMenuActionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends MasterMenuAction$usersArgs<ExtArgs> = {}>(args?: Subset<T, MasterMenuAction$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMenuActionPayload<ExtArgs>, T, "findMany"> | Null>
    sub_menu<T extends MasterSubMenuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MasterSubMenuDefaultArgs<ExtArgs>>): Prisma__MasterSubMenuClient<$Result.GetResult<Prisma.$MasterSubMenuPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MasterMenuAction model
   */ 
  interface MasterMenuActionFieldRefs {
    readonly id: FieldRef<"MasterMenuAction", 'Int'>
    readonly sub_menu_code: FieldRef<"MasterMenuAction", 'String'>
    readonly menu_code: FieldRef<"MasterMenuAction", 'String'>
    readonly action_code: FieldRef<"MasterMenuAction", 'String'>
    readonly name: FieldRef<"MasterMenuAction", 'String'>
    readonly createdAt: FieldRef<"MasterMenuAction", 'DateTime'>
    readonly updatedAt: FieldRef<"MasterMenuAction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MasterMenuAction findUnique
   */
  export type MasterMenuActionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenuAction
     */
    select?: MasterMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuActionInclude<ExtArgs> | null
    /**
     * Filter, which MasterMenuAction to fetch.
     */
    where: MasterMenuActionWhereUniqueInput
  }

  /**
   * MasterMenuAction findUniqueOrThrow
   */
  export type MasterMenuActionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenuAction
     */
    select?: MasterMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuActionInclude<ExtArgs> | null
    /**
     * Filter, which MasterMenuAction to fetch.
     */
    where: MasterMenuActionWhereUniqueInput
  }

  /**
   * MasterMenuAction findFirst
   */
  export type MasterMenuActionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenuAction
     */
    select?: MasterMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuActionInclude<ExtArgs> | null
    /**
     * Filter, which MasterMenuAction to fetch.
     */
    where?: MasterMenuActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterMenuActions to fetch.
     */
    orderBy?: MasterMenuActionOrderByWithRelationInput | MasterMenuActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterMenuActions.
     */
    cursor?: MasterMenuActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterMenuActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterMenuActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterMenuActions.
     */
    distinct?: MasterMenuActionScalarFieldEnum | MasterMenuActionScalarFieldEnum[]
  }

  /**
   * MasterMenuAction findFirstOrThrow
   */
  export type MasterMenuActionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenuAction
     */
    select?: MasterMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuActionInclude<ExtArgs> | null
    /**
     * Filter, which MasterMenuAction to fetch.
     */
    where?: MasterMenuActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterMenuActions to fetch.
     */
    orderBy?: MasterMenuActionOrderByWithRelationInput | MasterMenuActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterMenuActions.
     */
    cursor?: MasterMenuActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterMenuActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterMenuActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterMenuActions.
     */
    distinct?: MasterMenuActionScalarFieldEnum | MasterMenuActionScalarFieldEnum[]
  }

  /**
   * MasterMenuAction findMany
   */
  export type MasterMenuActionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenuAction
     */
    select?: MasterMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuActionInclude<ExtArgs> | null
    /**
     * Filter, which MasterMenuActions to fetch.
     */
    where?: MasterMenuActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterMenuActions to fetch.
     */
    orderBy?: MasterMenuActionOrderByWithRelationInput | MasterMenuActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MasterMenuActions.
     */
    cursor?: MasterMenuActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterMenuActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterMenuActions.
     */
    skip?: number
    distinct?: MasterMenuActionScalarFieldEnum | MasterMenuActionScalarFieldEnum[]
  }

  /**
   * MasterMenuAction create
   */
  export type MasterMenuActionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenuAction
     */
    select?: MasterMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuActionInclude<ExtArgs> | null
    /**
     * The data needed to create a MasterMenuAction.
     */
    data: XOR<MasterMenuActionCreateInput, MasterMenuActionUncheckedCreateInput>
  }

  /**
   * MasterMenuAction createMany
   */
  export type MasterMenuActionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MasterMenuActions.
     */
    data: MasterMenuActionCreateManyInput | MasterMenuActionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MasterMenuAction createManyAndReturn
   */
  export type MasterMenuActionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenuAction
     */
    select?: MasterMenuActionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MasterMenuActions.
     */
    data: MasterMenuActionCreateManyInput | MasterMenuActionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuActionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MasterMenuAction update
   */
  export type MasterMenuActionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenuAction
     */
    select?: MasterMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuActionInclude<ExtArgs> | null
    /**
     * The data needed to update a MasterMenuAction.
     */
    data: XOR<MasterMenuActionUpdateInput, MasterMenuActionUncheckedUpdateInput>
    /**
     * Choose, which MasterMenuAction to update.
     */
    where: MasterMenuActionWhereUniqueInput
  }

  /**
   * MasterMenuAction updateMany
   */
  export type MasterMenuActionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MasterMenuActions.
     */
    data: XOR<MasterMenuActionUpdateManyMutationInput, MasterMenuActionUncheckedUpdateManyInput>
    /**
     * Filter which MasterMenuActions to update
     */
    where?: MasterMenuActionWhereInput
  }

  /**
   * MasterMenuAction upsert
   */
  export type MasterMenuActionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenuAction
     */
    select?: MasterMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuActionInclude<ExtArgs> | null
    /**
     * The filter to search for the MasterMenuAction to update in case it exists.
     */
    where: MasterMenuActionWhereUniqueInput
    /**
     * In case the MasterMenuAction found by the `where` argument doesn't exist, create a new MasterMenuAction with this data.
     */
    create: XOR<MasterMenuActionCreateInput, MasterMenuActionUncheckedCreateInput>
    /**
     * In case the MasterMenuAction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MasterMenuActionUpdateInput, MasterMenuActionUncheckedUpdateInput>
  }

  /**
   * MasterMenuAction delete
   */
  export type MasterMenuActionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenuAction
     */
    select?: MasterMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuActionInclude<ExtArgs> | null
    /**
     * Filter which MasterMenuAction to delete.
     */
    where: MasterMenuActionWhereUniqueInput
  }

  /**
   * MasterMenuAction deleteMany
   */
  export type MasterMenuActionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterMenuActions to delete
     */
    where?: MasterMenuActionWhereInput
  }

  /**
   * MasterMenuAction.users
   */
  export type MasterMenuAction$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenuAction
     */
    select?: UserMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuActionInclude<ExtArgs> | null
    where?: UserMenuActionWhereInput
    orderBy?: UserMenuActionOrderByWithRelationInput | UserMenuActionOrderByWithRelationInput[]
    cursor?: UserMenuActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserMenuActionScalarFieldEnum | UserMenuActionScalarFieldEnum[]
  }

  /**
   * MasterMenuAction without action
   */
  export type MasterMenuActionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterMenuAction
     */
    select?: MasterMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterMenuActionInclude<ExtArgs> | null
  }


  /**
   * Model CompanyMenu
   */

  export type AggregateCompanyMenu = {
    _count: CompanyMenuCountAggregateOutputType | null
    _avg: CompanyMenuAvgAggregateOutputType | null
    _sum: CompanyMenuSumAggregateOutputType | null
    _min: CompanyMenuMinAggregateOutputType | null
    _max: CompanyMenuMaxAggregateOutputType | null
  }

  export type CompanyMenuAvgAggregateOutputType = {
    id: number | null
  }

  export type CompanyMenuSumAggregateOutputType = {
    id: number | null
  }

  export type CompanyMenuMinAggregateOutputType = {
    id: number | null
    menu_code: string | null
    tenant_code: string | null
    company_code: string | null
    sub_menu_code: string | null
  }

  export type CompanyMenuMaxAggregateOutputType = {
    id: number | null
    menu_code: string | null
    tenant_code: string | null
    company_code: string | null
    sub_menu_code: string | null
  }

  export type CompanyMenuCountAggregateOutputType = {
    id: number
    menu_code: number
    tenant_code: number
    company_code: number
    sub_menu_code: number
    _all: number
  }


  export type CompanyMenuAvgAggregateInputType = {
    id?: true
  }

  export type CompanyMenuSumAggregateInputType = {
    id?: true
  }

  export type CompanyMenuMinAggregateInputType = {
    id?: true
    menu_code?: true
    tenant_code?: true
    company_code?: true
    sub_menu_code?: true
  }

  export type CompanyMenuMaxAggregateInputType = {
    id?: true
    menu_code?: true
    tenant_code?: true
    company_code?: true
    sub_menu_code?: true
  }

  export type CompanyMenuCountAggregateInputType = {
    id?: true
    menu_code?: true
    tenant_code?: true
    company_code?: true
    sub_menu_code?: true
    _all?: true
  }

  export type CompanyMenuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyMenu to aggregate.
     */
    where?: CompanyMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyMenus to fetch.
     */
    orderBy?: CompanyMenuOrderByWithRelationInput | CompanyMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompanyMenus
    **/
    _count?: true | CompanyMenuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyMenuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanyMenuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMenuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMenuMaxAggregateInputType
  }

  export type GetCompanyMenuAggregateType<T extends CompanyMenuAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanyMenu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanyMenu[P]>
      : GetScalarType<T[P], AggregateCompanyMenu[P]>
  }




  export type CompanyMenuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyMenuWhereInput
    orderBy?: CompanyMenuOrderByWithAggregationInput | CompanyMenuOrderByWithAggregationInput[]
    by: CompanyMenuScalarFieldEnum[] | CompanyMenuScalarFieldEnum
    having?: CompanyMenuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyMenuCountAggregateInputType | true
    _avg?: CompanyMenuAvgAggregateInputType
    _sum?: CompanyMenuSumAggregateInputType
    _min?: CompanyMenuMinAggregateInputType
    _max?: CompanyMenuMaxAggregateInputType
  }

  export type CompanyMenuGroupByOutputType = {
    id: number
    menu_code: string
    tenant_code: string
    company_code: string
    sub_menu_code: string
    _count: CompanyMenuCountAggregateOutputType | null
    _avg: CompanyMenuAvgAggregateOutputType | null
    _sum: CompanyMenuSumAggregateOutputType | null
    _min: CompanyMenuMinAggregateOutputType | null
    _max: CompanyMenuMaxAggregateOutputType | null
  }

  type GetCompanyMenuGroupByPayload<T extends CompanyMenuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyMenuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyMenuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyMenuGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyMenuGroupByOutputType[P]>
        }
      >
    >


  export type CompanyMenuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    menu_code?: boolean
    tenant_code?: boolean
    company_code?: boolean
    sub_menu_code?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user_menu?: boolean | CompanyMenu$user_menuArgs<ExtArgs>
    _count?: boolean | CompanyMenuCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyMenu"]>

  export type CompanyMenuSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    menu_code?: boolean
    tenant_code?: boolean
    company_code?: boolean
    sub_menu_code?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyMenu"]>

  export type CompanyMenuSelectScalar = {
    id?: boolean
    menu_code?: boolean
    tenant_code?: boolean
    company_code?: boolean
    sub_menu_code?: boolean
  }

  export type CompanyMenuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user_menu?: boolean | CompanyMenu$user_menuArgs<ExtArgs>
    _count?: boolean | CompanyMenuCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompanyMenuIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $CompanyMenuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompanyMenu"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      user_menu: Prisma.$UserMenuPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      menu_code: string
      tenant_code: string
      company_code: string
      sub_menu_code: string
    }, ExtArgs["result"]["companyMenu"]>
    composites: {}
  }

  type CompanyMenuGetPayload<S extends boolean | null | undefined | CompanyMenuDefaultArgs> = $Result.GetResult<Prisma.$CompanyMenuPayload, S>

  type CompanyMenuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompanyMenuFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompanyMenuCountAggregateInputType | true
    }

  export interface CompanyMenuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompanyMenu'], meta: { name: 'CompanyMenu' } }
    /**
     * Find zero or one CompanyMenu that matches the filter.
     * @param {CompanyMenuFindUniqueArgs} args - Arguments to find a CompanyMenu
     * @example
     * // Get one CompanyMenu
     * const companyMenu = await prisma.companyMenu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyMenuFindUniqueArgs>(args: SelectSubset<T, CompanyMenuFindUniqueArgs<ExtArgs>>): Prisma__CompanyMenuClient<$Result.GetResult<Prisma.$CompanyMenuPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CompanyMenu that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompanyMenuFindUniqueOrThrowArgs} args - Arguments to find a CompanyMenu
     * @example
     * // Get one CompanyMenu
     * const companyMenu = await prisma.companyMenu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyMenuFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyMenuFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyMenuClient<$Result.GetResult<Prisma.$CompanyMenuPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CompanyMenu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMenuFindFirstArgs} args - Arguments to find a CompanyMenu
     * @example
     * // Get one CompanyMenu
     * const companyMenu = await prisma.companyMenu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyMenuFindFirstArgs>(args?: SelectSubset<T, CompanyMenuFindFirstArgs<ExtArgs>>): Prisma__CompanyMenuClient<$Result.GetResult<Prisma.$CompanyMenuPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CompanyMenu that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMenuFindFirstOrThrowArgs} args - Arguments to find a CompanyMenu
     * @example
     * // Get one CompanyMenu
     * const companyMenu = await prisma.companyMenu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyMenuFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyMenuFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyMenuClient<$Result.GetResult<Prisma.$CompanyMenuPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CompanyMenus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMenuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompanyMenus
     * const companyMenus = await prisma.companyMenu.findMany()
     * 
     * // Get first 10 CompanyMenus
     * const companyMenus = await prisma.companyMenu.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyMenuWithIdOnly = await prisma.companyMenu.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyMenuFindManyArgs>(args?: SelectSubset<T, CompanyMenuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyMenuPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CompanyMenu.
     * @param {CompanyMenuCreateArgs} args - Arguments to create a CompanyMenu.
     * @example
     * // Create one CompanyMenu
     * const CompanyMenu = await prisma.companyMenu.create({
     *   data: {
     *     // ... data to create a CompanyMenu
     *   }
     * })
     * 
     */
    create<T extends CompanyMenuCreateArgs>(args: SelectSubset<T, CompanyMenuCreateArgs<ExtArgs>>): Prisma__CompanyMenuClient<$Result.GetResult<Prisma.$CompanyMenuPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CompanyMenus.
     * @param {CompanyMenuCreateManyArgs} args - Arguments to create many CompanyMenus.
     * @example
     * // Create many CompanyMenus
     * const companyMenu = await prisma.companyMenu.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyMenuCreateManyArgs>(args?: SelectSubset<T, CompanyMenuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompanyMenus and returns the data saved in the database.
     * @param {CompanyMenuCreateManyAndReturnArgs} args - Arguments to create many CompanyMenus.
     * @example
     * // Create many CompanyMenus
     * const companyMenu = await prisma.companyMenu.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompanyMenus and only return the `id`
     * const companyMenuWithIdOnly = await prisma.companyMenu.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyMenuCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyMenuCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyMenuPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CompanyMenu.
     * @param {CompanyMenuDeleteArgs} args - Arguments to delete one CompanyMenu.
     * @example
     * // Delete one CompanyMenu
     * const CompanyMenu = await prisma.companyMenu.delete({
     *   where: {
     *     // ... filter to delete one CompanyMenu
     *   }
     * })
     * 
     */
    delete<T extends CompanyMenuDeleteArgs>(args: SelectSubset<T, CompanyMenuDeleteArgs<ExtArgs>>): Prisma__CompanyMenuClient<$Result.GetResult<Prisma.$CompanyMenuPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CompanyMenu.
     * @param {CompanyMenuUpdateArgs} args - Arguments to update one CompanyMenu.
     * @example
     * // Update one CompanyMenu
     * const companyMenu = await prisma.companyMenu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyMenuUpdateArgs>(args: SelectSubset<T, CompanyMenuUpdateArgs<ExtArgs>>): Prisma__CompanyMenuClient<$Result.GetResult<Prisma.$CompanyMenuPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CompanyMenus.
     * @param {CompanyMenuDeleteManyArgs} args - Arguments to filter CompanyMenus to delete.
     * @example
     * // Delete a few CompanyMenus
     * const { count } = await prisma.companyMenu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyMenuDeleteManyArgs>(args?: SelectSubset<T, CompanyMenuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyMenus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMenuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompanyMenus
     * const companyMenu = await prisma.companyMenu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyMenuUpdateManyArgs>(args: SelectSubset<T, CompanyMenuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CompanyMenu.
     * @param {CompanyMenuUpsertArgs} args - Arguments to update or create a CompanyMenu.
     * @example
     * // Update or create a CompanyMenu
     * const companyMenu = await prisma.companyMenu.upsert({
     *   create: {
     *     // ... data to create a CompanyMenu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompanyMenu we want to update
     *   }
     * })
     */
    upsert<T extends CompanyMenuUpsertArgs>(args: SelectSubset<T, CompanyMenuUpsertArgs<ExtArgs>>): Prisma__CompanyMenuClient<$Result.GetResult<Prisma.$CompanyMenuPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CompanyMenus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMenuCountArgs} args - Arguments to filter CompanyMenus to count.
     * @example
     * // Count the number of CompanyMenus
     * const count = await prisma.companyMenu.count({
     *   where: {
     *     // ... the filter for the CompanyMenus we want to count
     *   }
     * })
    **/
    count<T extends CompanyMenuCountArgs>(
      args?: Subset<T, CompanyMenuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyMenuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompanyMenu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMenuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyMenuAggregateArgs>(args: Subset<T, CompanyMenuAggregateArgs>): Prisma.PrismaPromise<GetCompanyMenuAggregateType<T>>

    /**
     * Group by CompanyMenu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMenuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyMenuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyMenuGroupByArgs['orderBy'] }
        : { orderBy?: CompanyMenuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyMenuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyMenuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompanyMenu model
   */
  readonly fields: CompanyMenuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompanyMenu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyMenuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user_menu<T extends CompanyMenu$user_menuArgs<ExtArgs> = {}>(args?: Subset<T, CompanyMenu$user_menuArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMenuPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompanyMenu model
   */ 
  interface CompanyMenuFieldRefs {
    readonly id: FieldRef<"CompanyMenu", 'Int'>
    readonly menu_code: FieldRef<"CompanyMenu", 'String'>
    readonly tenant_code: FieldRef<"CompanyMenu", 'String'>
    readonly company_code: FieldRef<"CompanyMenu", 'String'>
    readonly sub_menu_code: FieldRef<"CompanyMenu", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CompanyMenu findUnique
   */
  export type CompanyMenuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMenu
     */
    select?: CompanyMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMenuInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMenu to fetch.
     */
    where: CompanyMenuWhereUniqueInput
  }

  /**
   * CompanyMenu findUniqueOrThrow
   */
  export type CompanyMenuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMenu
     */
    select?: CompanyMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMenuInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMenu to fetch.
     */
    where: CompanyMenuWhereUniqueInput
  }

  /**
   * CompanyMenu findFirst
   */
  export type CompanyMenuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMenu
     */
    select?: CompanyMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMenuInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMenu to fetch.
     */
    where?: CompanyMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyMenus to fetch.
     */
    orderBy?: CompanyMenuOrderByWithRelationInput | CompanyMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyMenus.
     */
    cursor?: CompanyMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyMenus.
     */
    distinct?: CompanyMenuScalarFieldEnum | CompanyMenuScalarFieldEnum[]
  }

  /**
   * CompanyMenu findFirstOrThrow
   */
  export type CompanyMenuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMenu
     */
    select?: CompanyMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMenuInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMenu to fetch.
     */
    where?: CompanyMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyMenus to fetch.
     */
    orderBy?: CompanyMenuOrderByWithRelationInput | CompanyMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyMenus.
     */
    cursor?: CompanyMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyMenus.
     */
    distinct?: CompanyMenuScalarFieldEnum | CompanyMenuScalarFieldEnum[]
  }

  /**
   * CompanyMenu findMany
   */
  export type CompanyMenuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMenu
     */
    select?: CompanyMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMenuInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMenus to fetch.
     */
    where?: CompanyMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyMenus to fetch.
     */
    orderBy?: CompanyMenuOrderByWithRelationInput | CompanyMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompanyMenus.
     */
    cursor?: CompanyMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyMenus.
     */
    skip?: number
    distinct?: CompanyMenuScalarFieldEnum | CompanyMenuScalarFieldEnum[]
  }

  /**
   * CompanyMenu create
   */
  export type CompanyMenuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMenu
     */
    select?: CompanyMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMenuInclude<ExtArgs> | null
    /**
     * The data needed to create a CompanyMenu.
     */
    data: XOR<CompanyMenuCreateInput, CompanyMenuUncheckedCreateInput>
  }

  /**
   * CompanyMenu createMany
   */
  export type CompanyMenuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompanyMenus.
     */
    data: CompanyMenuCreateManyInput | CompanyMenuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CompanyMenu createManyAndReturn
   */
  export type CompanyMenuCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMenu
     */
    select?: CompanyMenuSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CompanyMenus.
     */
    data: CompanyMenuCreateManyInput | CompanyMenuCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMenuIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanyMenu update
   */
  export type CompanyMenuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMenu
     */
    select?: CompanyMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMenuInclude<ExtArgs> | null
    /**
     * The data needed to update a CompanyMenu.
     */
    data: XOR<CompanyMenuUpdateInput, CompanyMenuUncheckedUpdateInput>
    /**
     * Choose, which CompanyMenu to update.
     */
    where: CompanyMenuWhereUniqueInput
  }

  /**
   * CompanyMenu updateMany
   */
  export type CompanyMenuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompanyMenus.
     */
    data: XOR<CompanyMenuUpdateManyMutationInput, CompanyMenuUncheckedUpdateManyInput>
    /**
     * Filter which CompanyMenus to update
     */
    where?: CompanyMenuWhereInput
  }

  /**
   * CompanyMenu upsert
   */
  export type CompanyMenuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMenu
     */
    select?: CompanyMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMenuInclude<ExtArgs> | null
    /**
     * The filter to search for the CompanyMenu to update in case it exists.
     */
    where: CompanyMenuWhereUniqueInput
    /**
     * In case the CompanyMenu found by the `where` argument doesn't exist, create a new CompanyMenu with this data.
     */
    create: XOR<CompanyMenuCreateInput, CompanyMenuUncheckedCreateInput>
    /**
     * In case the CompanyMenu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyMenuUpdateInput, CompanyMenuUncheckedUpdateInput>
  }

  /**
   * CompanyMenu delete
   */
  export type CompanyMenuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMenu
     */
    select?: CompanyMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMenuInclude<ExtArgs> | null
    /**
     * Filter which CompanyMenu to delete.
     */
    where: CompanyMenuWhereUniqueInput
  }

  /**
   * CompanyMenu deleteMany
   */
  export type CompanyMenuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyMenus to delete
     */
    where?: CompanyMenuWhereInput
  }

  /**
   * CompanyMenu.user_menu
   */
  export type CompanyMenu$user_menuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenu
     */
    select?: UserMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuInclude<ExtArgs> | null
    where?: UserMenuWhereInput
    orderBy?: UserMenuOrderByWithRelationInput | UserMenuOrderByWithRelationInput[]
    cursor?: UserMenuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserMenuScalarFieldEnum | UserMenuScalarFieldEnum[]
  }

  /**
   * CompanyMenu without action
   */
  export type CompanyMenuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMenu
     */
    select?: CompanyMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMenuInclude<ExtArgs> | null
  }


  /**
   * Model UserMenu
   */

  export type AggregateUserMenu = {
    _count: UserMenuCountAggregateOutputType | null
    _avg: UserMenuAvgAggregateOutputType | null
    _sum: UserMenuSumAggregateOutputType | null
    _min: UserMenuMinAggregateOutputType | null
    _max: UserMenuMaxAggregateOutputType | null
  }

  export type UserMenuAvgAggregateOutputType = {
    id: number | null
  }

  export type UserMenuSumAggregateOutputType = {
    id: number | null
  }

  export type UserMenuMinAggregateOutputType = {
    id: number | null
    menu_code: string | null
    sub_menu_code: string | null
    company_code: string | null
    tenant_code: string | null
    division_code: string | null
    user_code: string | null
    status: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMenuMaxAggregateOutputType = {
    id: number | null
    menu_code: string | null
    sub_menu_code: string | null
    company_code: string | null
    tenant_code: string | null
    division_code: string | null
    user_code: string | null
    status: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMenuCountAggregateOutputType = {
    id: number
    menu_code: number
    sub_menu_code: number
    company_code: number
    tenant_code: number
    division_code: number
    user_code: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMenuAvgAggregateInputType = {
    id?: true
  }

  export type UserMenuSumAggregateInputType = {
    id?: true
  }

  export type UserMenuMinAggregateInputType = {
    id?: true
    menu_code?: true
    sub_menu_code?: true
    company_code?: true
    tenant_code?: true
    division_code?: true
    user_code?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMenuMaxAggregateInputType = {
    id?: true
    menu_code?: true
    sub_menu_code?: true
    company_code?: true
    tenant_code?: true
    division_code?: true
    user_code?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMenuCountAggregateInputType = {
    id?: true
    menu_code?: true
    sub_menu_code?: true
    company_code?: true
    tenant_code?: true
    division_code?: true
    user_code?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserMenuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMenu to aggregate.
     */
    where?: UserMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMenus to fetch.
     */
    orderBy?: UserMenuOrderByWithRelationInput | UserMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserMenus
    **/
    _count?: true | UserMenuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserMenuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserMenuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMenuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMenuMaxAggregateInputType
  }

  export type GetUserMenuAggregateType<T extends UserMenuAggregateArgs> = {
        [P in keyof T & keyof AggregateUserMenu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserMenu[P]>
      : GetScalarType<T[P], AggregateUserMenu[P]>
  }




  export type UserMenuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMenuWhereInput
    orderBy?: UserMenuOrderByWithAggregationInput | UserMenuOrderByWithAggregationInput[]
    by: UserMenuScalarFieldEnum[] | UserMenuScalarFieldEnum
    having?: UserMenuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserMenuCountAggregateInputType | true
    _avg?: UserMenuAvgAggregateInputType
    _sum?: UserMenuSumAggregateInputType
    _min?: UserMenuMinAggregateInputType
    _max?: UserMenuMaxAggregateInputType
  }

  export type UserMenuGroupByOutputType = {
    id: number
    menu_code: string
    sub_menu_code: string
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    status: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserMenuCountAggregateOutputType | null
    _avg: UserMenuAvgAggregateOutputType | null
    _sum: UserMenuSumAggregateOutputType | null
    _min: UserMenuMinAggregateOutputType | null
    _max: UserMenuMaxAggregateOutputType | null
  }

  type GetUserMenuGroupByPayload<T extends UserMenuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserMenuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserMenuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserMenuGroupByOutputType[P]>
            : GetScalarType<T[P], UserMenuGroupByOutputType[P]>
        }
      >
    >


  export type UserMenuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    menu_code?: boolean
    sub_menu_code?: boolean
    company_code?: boolean
    tenant_code?: boolean
    division_code?: boolean
    user_code?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    menu?: boolean | CompanyMenuDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userMenu"]>

  export type UserMenuSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    menu_code?: boolean
    sub_menu_code?: boolean
    company_code?: boolean
    tenant_code?: boolean
    division_code?: boolean
    user_code?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    menu?: boolean | CompanyMenuDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userMenu"]>

  export type UserMenuSelectScalar = {
    id?: boolean
    menu_code?: boolean
    sub_menu_code?: boolean
    company_code?: boolean
    tenant_code?: boolean
    division_code?: boolean
    user_code?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserMenuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    menu?: boolean | CompanyMenuDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserMenuIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    menu?: boolean | CompanyMenuDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserMenuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserMenu"
    objects: {
      menu: Prisma.$CompanyMenuPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      menu_code: string
      sub_menu_code: string
      company_code: string
      tenant_code: string
      division_code: string
      user_code: string
      status: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userMenu"]>
    composites: {}
  }

  type UserMenuGetPayload<S extends boolean | null | undefined | UserMenuDefaultArgs> = $Result.GetResult<Prisma.$UserMenuPayload, S>

  type UserMenuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserMenuFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserMenuCountAggregateInputType | true
    }

  export interface UserMenuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserMenu'], meta: { name: 'UserMenu' } }
    /**
     * Find zero or one UserMenu that matches the filter.
     * @param {UserMenuFindUniqueArgs} args - Arguments to find a UserMenu
     * @example
     * // Get one UserMenu
     * const userMenu = await prisma.userMenu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserMenuFindUniqueArgs>(args: SelectSubset<T, UserMenuFindUniqueArgs<ExtArgs>>): Prisma__UserMenuClient<$Result.GetResult<Prisma.$UserMenuPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserMenu that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserMenuFindUniqueOrThrowArgs} args - Arguments to find a UserMenu
     * @example
     * // Get one UserMenu
     * const userMenu = await prisma.userMenu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserMenuFindUniqueOrThrowArgs>(args: SelectSubset<T, UserMenuFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserMenuClient<$Result.GetResult<Prisma.$UserMenuPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserMenu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMenuFindFirstArgs} args - Arguments to find a UserMenu
     * @example
     * // Get one UserMenu
     * const userMenu = await prisma.userMenu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserMenuFindFirstArgs>(args?: SelectSubset<T, UserMenuFindFirstArgs<ExtArgs>>): Prisma__UserMenuClient<$Result.GetResult<Prisma.$UserMenuPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserMenu that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMenuFindFirstOrThrowArgs} args - Arguments to find a UserMenu
     * @example
     * // Get one UserMenu
     * const userMenu = await prisma.userMenu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserMenuFindFirstOrThrowArgs>(args?: SelectSubset<T, UserMenuFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserMenuClient<$Result.GetResult<Prisma.$UserMenuPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserMenus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMenuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserMenus
     * const userMenus = await prisma.userMenu.findMany()
     * 
     * // Get first 10 UserMenus
     * const userMenus = await prisma.userMenu.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userMenuWithIdOnly = await prisma.userMenu.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserMenuFindManyArgs>(args?: SelectSubset<T, UserMenuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMenuPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserMenu.
     * @param {UserMenuCreateArgs} args - Arguments to create a UserMenu.
     * @example
     * // Create one UserMenu
     * const UserMenu = await prisma.userMenu.create({
     *   data: {
     *     // ... data to create a UserMenu
     *   }
     * })
     * 
     */
    create<T extends UserMenuCreateArgs>(args: SelectSubset<T, UserMenuCreateArgs<ExtArgs>>): Prisma__UserMenuClient<$Result.GetResult<Prisma.$UserMenuPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserMenus.
     * @param {UserMenuCreateManyArgs} args - Arguments to create many UserMenus.
     * @example
     * // Create many UserMenus
     * const userMenu = await prisma.userMenu.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserMenuCreateManyArgs>(args?: SelectSubset<T, UserMenuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserMenus and returns the data saved in the database.
     * @param {UserMenuCreateManyAndReturnArgs} args - Arguments to create many UserMenus.
     * @example
     * // Create many UserMenus
     * const userMenu = await prisma.userMenu.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserMenus and only return the `id`
     * const userMenuWithIdOnly = await prisma.userMenu.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserMenuCreateManyAndReturnArgs>(args?: SelectSubset<T, UserMenuCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMenuPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserMenu.
     * @param {UserMenuDeleteArgs} args - Arguments to delete one UserMenu.
     * @example
     * // Delete one UserMenu
     * const UserMenu = await prisma.userMenu.delete({
     *   where: {
     *     // ... filter to delete one UserMenu
     *   }
     * })
     * 
     */
    delete<T extends UserMenuDeleteArgs>(args: SelectSubset<T, UserMenuDeleteArgs<ExtArgs>>): Prisma__UserMenuClient<$Result.GetResult<Prisma.$UserMenuPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserMenu.
     * @param {UserMenuUpdateArgs} args - Arguments to update one UserMenu.
     * @example
     * // Update one UserMenu
     * const userMenu = await prisma.userMenu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserMenuUpdateArgs>(args: SelectSubset<T, UserMenuUpdateArgs<ExtArgs>>): Prisma__UserMenuClient<$Result.GetResult<Prisma.$UserMenuPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserMenus.
     * @param {UserMenuDeleteManyArgs} args - Arguments to filter UserMenus to delete.
     * @example
     * // Delete a few UserMenus
     * const { count } = await prisma.userMenu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserMenuDeleteManyArgs>(args?: SelectSubset<T, UserMenuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserMenus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMenuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserMenus
     * const userMenu = await prisma.userMenu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserMenuUpdateManyArgs>(args: SelectSubset<T, UserMenuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserMenu.
     * @param {UserMenuUpsertArgs} args - Arguments to update or create a UserMenu.
     * @example
     * // Update or create a UserMenu
     * const userMenu = await prisma.userMenu.upsert({
     *   create: {
     *     // ... data to create a UserMenu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserMenu we want to update
     *   }
     * })
     */
    upsert<T extends UserMenuUpsertArgs>(args: SelectSubset<T, UserMenuUpsertArgs<ExtArgs>>): Prisma__UserMenuClient<$Result.GetResult<Prisma.$UserMenuPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserMenus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMenuCountArgs} args - Arguments to filter UserMenus to count.
     * @example
     * // Count the number of UserMenus
     * const count = await prisma.userMenu.count({
     *   where: {
     *     // ... the filter for the UserMenus we want to count
     *   }
     * })
    **/
    count<T extends UserMenuCountArgs>(
      args?: Subset<T, UserMenuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserMenuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserMenu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMenuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserMenuAggregateArgs>(args: Subset<T, UserMenuAggregateArgs>): Prisma.PrismaPromise<GetUserMenuAggregateType<T>>

    /**
     * Group by UserMenu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMenuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserMenuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserMenuGroupByArgs['orderBy'] }
        : { orderBy?: UserMenuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserMenuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserMenuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserMenu model
   */
  readonly fields: UserMenuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserMenu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserMenuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    menu<T extends CompanyMenuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyMenuDefaultArgs<ExtArgs>>): Prisma__CompanyMenuClient<$Result.GetResult<Prisma.$CompanyMenuPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserMenu model
   */ 
  interface UserMenuFieldRefs {
    readonly id: FieldRef<"UserMenu", 'Int'>
    readonly menu_code: FieldRef<"UserMenu", 'String'>
    readonly sub_menu_code: FieldRef<"UserMenu", 'String'>
    readonly company_code: FieldRef<"UserMenu", 'String'>
    readonly tenant_code: FieldRef<"UserMenu", 'String'>
    readonly division_code: FieldRef<"UserMenu", 'String'>
    readonly user_code: FieldRef<"UserMenu", 'String'>
    readonly status: FieldRef<"UserMenu", 'Boolean'>
    readonly createdAt: FieldRef<"UserMenu", 'DateTime'>
    readonly updatedAt: FieldRef<"UserMenu", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserMenu findUnique
   */
  export type UserMenuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenu
     */
    select?: UserMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuInclude<ExtArgs> | null
    /**
     * Filter, which UserMenu to fetch.
     */
    where: UserMenuWhereUniqueInput
  }

  /**
   * UserMenu findUniqueOrThrow
   */
  export type UserMenuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenu
     */
    select?: UserMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuInclude<ExtArgs> | null
    /**
     * Filter, which UserMenu to fetch.
     */
    where: UserMenuWhereUniqueInput
  }

  /**
   * UserMenu findFirst
   */
  export type UserMenuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenu
     */
    select?: UserMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuInclude<ExtArgs> | null
    /**
     * Filter, which UserMenu to fetch.
     */
    where?: UserMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMenus to fetch.
     */
    orderBy?: UserMenuOrderByWithRelationInput | UserMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMenus.
     */
    cursor?: UserMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMenus.
     */
    distinct?: UserMenuScalarFieldEnum | UserMenuScalarFieldEnum[]
  }

  /**
   * UserMenu findFirstOrThrow
   */
  export type UserMenuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenu
     */
    select?: UserMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuInclude<ExtArgs> | null
    /**
     * Filter, which UserMenu to fetch.
     */
    where?: UserMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMenus to fetch.
     */
    orderBy?: UserMenuOrderByWithRelationInput | UserMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMenus.
     */
    cursor?: UserMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMenus.
     */
    distinct?: UserMenuScalarFieldEnum | UserMenuScalarFieldEnum[]
  }

  /**
   * UserMenu findMany
   */
  export type UserMenuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenu
     */
    select?: UserMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuInclude<ExtArgs> | null
    /**
     * Filter, which UserMenus to fetch.
     */
    where?: UserMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMenus to fetch.
     */
    orderBy?: UserMenuOrderByWithRelationInput | UserMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserMenus.
     */
    cursor?: UserMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMenus.
     */
    skip?: number
    distinct?: UserMenuScalarFieldEnum | UserMenuScalarFieldEnum[]
  }

  /**
   * UserMenu create
   */
  export type UserMenuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenu
     */
    select?: UserMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuInclude<ExtArgs> | null
    /**
     * The data needed to create a UserMenu.
     */
    data: XOR<UserMenuCreateInput, UserMenuUncheckedCreateInput>
  }

  /**
   * UserMenu createMany
   */
  export type UserMenuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserMenus.
     */
    data: UserMenuCreateManyInput | UserMenuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserMenu createManyAndReturn
   */
  export type UserMenuCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenu
     */
    select?: UserMenuSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserMenus.
     */
    data: UserMenuCreateManyInput | UserMenuCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserMenu update
   */
  export type UserMenuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenu
     */
    select?: UserMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuInclude<ExtArgs> | null
    /**
     * The data needed to update a UserMenu.
     */
    data: XOR<UserMenuUpdateInput, UserMenuUncheckedUpdateInput>
    /**
     * Choose, which UserMenu to update.
     */
    where: UserMenuWhereUniqueInput
  }

  /**
   * UserMenu updateMany
   */
  export type UserMenuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserMenus.
     */
    data: XOR<UserMenuUpdateManyMutationInput, UserMenuUncheckedUpdateManyInput>
    /**
     * Filter which UserMenus to update
     */
    where?: UserMenuWhereInput
  }

  /**
   * UserMenu upsert
   */
  export type UserMenuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenu
     */
    select?: UserMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuInclude<ExtArgs> | null
    /**
     * The filter to search for the UserMenu to update in case it exists.
     */
    where: UserMenuWhereUniqueInput
    /**
     * In case the UserMenu found by the `where` argument doesn't exist, create a new UserMenu with this data.
     */
    create: XOR<UserMenuCreateInput, UserMenuUncheckedCreateInput>
    /**
     * In case the UserMenu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserMenuUpdateInput, UserMenuUncheckedUpdateInput>
  }

  /**
   * UserMenu delete
   */
  export type UserMenuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenu
     */
    select?: UserMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuInclude<ExtArgs> | null
    /**
     * Filter which UserMenu to delete.
     */
    where: UserMenuWhereUniqueInput
  }

  /**
   * UserMenu deleteMany
   */
  export type UserMenuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMenus to delete
     */
    where?: UserMenuWhereInput
  }

  /**
   * UserMenu without action
   */
  export type UserMenuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenu
     */
    select?: UserMenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuInclude<ExtArgs> | null
  }


  /**
   * Model UserMenuAction
   */

  export type AggregateUserMenuAction = {
    _count: UserMenuActionCountAggregateOutputType | null
    _avg: UserMenuActionAvgAggregateOutputType | null
    _sum: UserMenuActionSumAggregateOutputType | null
    _min: UserMenuActionMinAggregateOutputType | null
    _max: UserMenuActionMaxAggregateOutputType | null
  }

  export type UserMenuActionAvgAggregateOutputType = {
    id: number | null
  }

  export type UserMenuActionSumAggregateOutputType = {
    id: number | null
  }

  export type UserMenuActionMinAggregateOutputType = {
    id: number | null
    sub_menu_code: string | null
    action_code: string | null
    company_code: string | null
    tenant_code: string | null
    division_code: string | null
    user_code: string | null
    status: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMenuActionMaxAggregateOutputType = {
    id: number | null
    sub_menu_code: string | null
    action_code: string | null
    company_code: string | null
    tenant_code: string | null
    division_code: string | null
    user_code: string | null
    status: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMenuActionCountAggregateOutputType = {
    id: number
    sub_menu_code: number
    action_code: number
    company_code: number
    tenant_code: number
    division_code: number
    user_code: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMenuActionAvgAggregateInputType = {
    id?: true
  }

  export type UserMenuActionSumAggregateInputType = {
    id?: true
  }

  export type UserMenuActionMinAggregateInputType = {
    id?: true
    sub_menu_code?: true
    action_code?: true
    company_code?: true
    tenant_code?: true
    division_code?: true
    user_code?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMenuActionMaxAggregateInputType = {
    id?: true
    sub_menu_code?: true
    action_code?: true
    company_code?: true
    tenant_code?: true
    division_code?: true
    user_code?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMenuActionCountAggregateInputType = {
    id?: true
    sub_menu_code?: true
    action_code?: true
    company_code?: true
    tenant_code?: true
    division_code?: true
    user_code?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserMenuActionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMenuAction to aggregate.
     */
    where?: UserMenuActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMenuActions to fetch.
     */
    orderBy?: UserMenuActionOrderByWithRelationInput | UserMenuActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserMenuActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMenuActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMenuActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserMenuActions
    **/
    _count?: true | UserMenuActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserMenuActionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserMenuActionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMenuActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMenuActionMaxAggregateInputType
  }

  export type GetUserMenuActionAggregateType<T extends UserMenuActionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserMenuAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserMenuAction[P]>
      : GetScalarType<T[P], AggregateUserMenuAction[P]>
  }




  export type UserMenuActionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMenuActionWhereInput
    orderBy?: UserMenuActionOrderByWithAggregationInput | UserMenuActionOrderByWithAggregationInput[]
    by: UserMenuActionScalarFieldEnum[] | UserMenuActionScalarFieldEnum
    having?: UserMenuActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserMenuActionCountAggregateInputType | true
    _avg?: UserMenuActionAvgAggregateInputType
    _sum?: UserMenuActionSumAggregateInputType
    _min?: UserMenuActionMinAggregateInputType
    _max?: UserMenuActionMaxAggregateInputType
  }

  export type UserMenuActionGroupByOutputType = {
    id: number
    sub_menu_code: string
    action_code: string
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    status: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserMenuActionCountAggregateOutputType | null
    _avg: UserMenuActionAvgAggregateOutputType | null
    _sum: UserMenuActionSumAggregateOutputType | null
    _min: UserMenuActionMinAggregateOutputType | null
    _max: UserMenuActionMaxAggregateOutputType | null
  }

  type GetUserMenuActionGroupByPayload<T extends UserMenuActionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserMenuActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserMenuActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserMenuActionGroupByOutputType[P]>
            : GetScalarType<T[P], UserMenuActionGroupByOutputType[P]>
        }
      >
    >


  export type UserMenuActionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sub_menu_code?: boolean
    action_code?: boolean
    company_code?: boolean
    tenant_code?: boolean
    division_code?: boolean
    user_code?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    menu?: boolean | MasterMenuActionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userMenuAction"]>

  export type UserMenuActionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sub_menu_code?: boolean
    action_code?: boolean
    company_code?: boolean
    tenant_code?: boolean
    division_code?: boolean
    user_code?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    menu?: boolean | MasterMenuActionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userMenuAction"]>

  export type UserMenuActionSelectScalar = {
    id?: boolean
    sub_menu_code?: boolean
    action_code?: boolean
    company_code?: boolean
    tenant_code?: boolean
    division_code?: boolean
    user_code?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserMenuActionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    menu?: boolean | MasterMenuActionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserMenuActionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    menu?: boolean | MasterMenuActionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserMenuActionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserMenuAction"
    objects: {
      menu: Prisma.$MasterMenuActionPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sub_menu_code: string
      action_code: string
      company_code: string
      tenant_code: string
      division_code: string
      user_code: string
      status: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userMenuAction"]>
    composites: {}
  }

  type UserMenuActionGetPayload<S extends boolean | null | undefined | UserMenuActionDefaultArgs> = $Result.GetResult<Prisma.$UserMenuActionPayload, S>

  type UserMenuActionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserMenuActionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserMenuActionCountAggregateInputType | true
    }

  export interface UserMenuActionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserMenuAction'], meta: { name: 'UserMenuAction' } }
    /**
     * Find zero or one UserMenuAction that matches the filter.
     * @param {UserMenuActionFindUniqueArgs} args - Arguments to find a UserMenuAction
     * @example
     * // Get one UserMenuAction
     * const userMenuAction = await prisma.userMenuAction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserMenuActionFindUniqueArgs>(args: SelectSubset<T, UserMenuActionFindUniqueArgs<ExtArgs>>): Prisma__UserMenuActionClient<$Result.GetResult<Prisma.$UserMenuActionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserMenuAction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserMenuActionFindUniqueOrThrowArgs} args - Arguments to find a UserMenuAction
     * @example
     * // Get one UserMenuAction
     * const userMenuAction = await prisma.userMenuAction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserMenuActionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserMenuActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserMenuActionClient<$Result.GetResult<Prisma.$UserMenuActionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserMenuAction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMenuActionFindFirstArgs} args - Arguments to find a UserMenuAction
     * @example
     * // Get one UserMenuAction
     * const userMenuAction = await prisma.userMenuAction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserMenuActionFindFirstArgs>(args?: SelectSubset<T, UserMenuActionFindFirstArgs<ExtArgs>>): Prisma__UserMenuActionClient<$Result.GetResult<Prisma.$UserMenuActionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserMenuAction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMenuActionFindFirstOrThrowArgs} args - Arguments to find a UserMenuAction
     * @example
     * // Get one UserMenuAction
     * const userMenuAction = await prisma.userMenuAction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserMenuActionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserMenuActionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserMenuActionClient<$Result.GetResult<Prisma.$UserMenuActionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserMenuActions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMenuActionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserMenuActions
     * const userMenuActions = await prisma.userMenuAction.findMany()
     * 
     * // Get first 10 UserMenuActions
     * const userMenuActions = await prisma.userMenuAction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userMenuActionWithIdOnly = await prisma.userMenuAction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserMenuActionFindManyArgs>(args?: SelectSubset<T, UserMenuActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMenuActionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserMenuAction.
     * @param {UserMenuActionCreateArgs} args - Arguments to create a UserMenuAction.
     * @example
     * // Create one UserMenuAction
     * const UserMenuAction = await prisma.userMenuAction.create({
     *   data: {
     *     // ... data to create a UserMenuAction
     *   }
     * })
     * 
     */
    create<T extends UserMenuActionCreateArgs>(args: SelectSubset<T, UserMenuActionCreateArgs<ExtArgs>>): Prisma__UserMenuActionClient<$Result.GetResult<Prisma.$UserMenuActionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserMenuActions.
     * @param {UserMenuActionCreateManyArgs} args - Arguments to create many UserMenuActions.
     * @example
     * // Create many UserMenuActions
     * const userMenuAction = await prisma.userMenuAction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserMenuActionCreateManyArgs>(args?: SelectSubset<T, UserMenuActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserMenuActions and returns the data saved in the database.
     * @param {UserMenuActionCreateManyAndReturnArgs} args - Arguments to create many UserMenuActions.
     * @example
     * // Create many UserMenuActions
     * const userMenuAction = await prisma.userMenuAction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserMenuActions and only return the `id`
     * const userMenuActionWithIdOnly = await prisma.userMenuAction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserMenuActionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserMenuActionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMenuActionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserMenuAction.
     * @param {UserMenuActionDeleteArgs} args - Arguments to delete one UserMenuAction.
     * @example
     * // Delete one UserMenuAction
     * const UserMenuAction = await prisma.userMenuAction.delete({
     *   where: {
     *     // ... filter to delete one UserMenuAction
     *   }
     * })
     * 
     */
    delete<T extends UserMenuActionDeleteArgs>(args: SelectSubset<T, UserMenuActionDeleteArgs<ExtArgs>>): Prisma__UserMenuActionClient<$Result.GetResult<Prisma.$UserMenuActionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserMenuAction.
     * @param {UserMenuActionUpdateArgs} args - Arguments to update one UserMenuAction.
     * @example
     * // Update one UserMenuAction
     * const userMenuAction = await prisma.userMenuAction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserMenuActionUpdateArgs>(args: SelectSubset<T, UserMenuActionUpdateArgs<ExtArgs>>): Prisma__UserMenuActionClient<$Result.GetResult<Prisma.$UserMenuActionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserMenuActions.
     * @param {UserMenuActionDeleteManyArgs} args - Arguments to filter UserMenuActions to delete.
     * @example
     * // Delete a few UserMenuActions
     * const { count } = await prisma.userMenuAction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserMenuActionDeleteManyArgs>(args?: SelectSubset<T, UserMenuActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserMenuActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMenuActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserMenuActions
     * const userMenuAction = await prisma.userMenuAction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserMenuActionUpdateManyArgs>(args: SelectSubset<T, UserMenuActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserMenuAction.
     * @param {UserMenuActionUpsertArgs} args - Arguments to update or create a UserMenuAction.
     * @example
     * // Update or create a UserMenuAction
     * const userMenuAction = await prisma.userMenuAction.upsert({
     *   create: {
     *     // ... data to create a UserMenuAction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserMenuAction we want to update
     *   }
     * })
     */
    upsert<T extends UserMenuActionUpsertArgs>(args: SelectSubset<T, UserMenuActionUpsertArgs<ExtArgs>>): Prisma__UserMenuActionClient<$Result.GetResult<Prisma.$UserMenuActionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserMenuActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMenuActionCountArgs} args - Arguments to filter UserMenuActions to count.
     * @example
     * // Count the number of UserMenuActions
     * const count = await prisma.userMenuAction.count({
     *   where: {
     *     // ... the filter for the UserMenuActions we want to count
     *   }
     * })
    **/
    count<T extends UserMenuActionCountArgs>(
      args?: Subset<T, UserMenuActionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserMenuActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserMenuAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMenuActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserMenuActionAggregateArgs>(args: Subset<T, UserMenuActionAggregateArgs>): Prisma.PrismaPromise<GetUserMenuActionAggregateType<T>>

    /**
     * Group by UserMenuAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMenuActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserMenuActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserMenuActionGroupByArgs['orderBy'] }
        : { orderBy?: UserMenuActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserMenuActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserMenuActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserMenuAction model
   */
  readonly fields: UserMenuActionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserMenuAction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserMenuActionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    menu<T extends MasterMenuActionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MasterMenuActionDefaultArgs<ExtArgs>>): Prisma__MasterMenuActionClient<$Result.GetResult<Prisma.$MasterMenuActionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserMenuAction model
   */ 
  interface UserMenuActionFieldRefs {
    readonly id: FieldRef<"UserMenuAction", 'Int'>
    readonly sub_menu_code: FieldRef<"UserMenuAction", 'String'>
    readonly action_code: FieldRef<"UserMenuAction", 'String'>
    readonly company_code: FieldRef<"UserMenuAction", 'String'>
    readonly tenant_code: FieldRef<"UserMenuAction", 'String'>
    readonly division_code: FieldRef<"UserMenuAction", 'String'>
    readonly user_code: FieldRef<"UserMenuAction", 'String'>
    readonly status: FieldRef<"UserMenuAction", 'Boolean'>
    readonly createdAt: FieldRef<"UserMenuAction", 'DateTime'>
    readonly updatedAt: FieldRef<"UserMenuAction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserMenuAction findUnique
   */
  export type UserMenuActionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenuAction
     */
    select?: UserMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuActionInclude<ExtArgs> | null
    /**
     * Filter, which UserMenuAction to fetch.
     */
    where: UserMenuActionWhereUniqueInput
  }

  /**
   * UserMenuAction findUniqueOrThrow
   */
  export type UserMenuActionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenuAction
     */
    select?: UserMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuActionInclude<ExtArgs> | null
    /**
     * Filter, which UserMenuAction to fetch.
     */
    where: UserMenuActionWhereUniqueInput
  }

  /**
   * UserMenuAction findFirst
   */
  export type UserMenuActionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenuAction
     */
    select?: UserMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuActionInclude<ExtArgs> | null
    /**
     * Filter, which UserMenuAction to fetch.
     */
    where?: UserMenuActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMenuActions to fetch.
     */
    orderBy?: UserMenuActionOrderByWithRelationInput | UserMenuActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMenuActions.
     */
    cursor?: UserMenuActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMenuActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMenuActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMenuActions.
     */
    distinct?: UserMenuActionScalarFieldEnum | UserMenuActionScalarFieldEnum[]
  }

  /**
   * UserMenuAction findFirstOrThrow
   */
  export type UserMenuActionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenuAction
     */
    select?: UserMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuActionInclude<ExtArgs> | null
    /**
     * Filter, which UserMenuAction to fetch.
     */
    where?: UserMenuActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMenuActions to fetch.
     */
    orderBy?: UserMenuActionOrderByWithRelationInput | UserMenuActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMenuActions.
     */
    cursor?: UserMenuActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMenuActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMenuActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMenuActions.
     */
    distinct?: UserMenuActionScalarFieldEnum | UserMenuActionScalarFieldEnum[]
  }

  /**
   * UserMenuAction findMany
   */
  export type UserMenuActionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenuAction
     */
    select?: UserMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuActionInclude<ExtArgs> | null
    /**
     * Filter, which UserMenuActions to fetch.
     */
    where?: UserMenuActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMenuActions to fetch.
     */
    orderBy?: UserMenuActionOrderByWithRelationInput | UserMenuActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserMenuActions.
     */
    cursor?: UserMenuActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMenuActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMenuActions.
     */
    skip?: number
    distinct?: UserMenuActionScalarFieldEnum | UserMenuActionScalarFieldEnum[]
  }

  /**
   * UserMenuAction create
   */
  export type UserMenuActionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenuAction
     */
    select?: UserMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuActionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserMenuAction.
     */
    data: XOR<UserMenuActionCreateInput, UserMenuActionUncheckedCreateInput>
  }

  /**
   * UserMenuAction createMany
   */
  export type UserMenuActionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserMenuActions.
     */
    data: UserMenuActionCreateManyInput | UserMenuActionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserMenuAction createManyAndReturn
   */
  export type UserMenuActionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenuAction
     */
    select?: UserMenuActionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserMenuActions.
     */
    data: UserMenuActionCreateManyInput | UserMenuActionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuActionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserMenuAction update
   */
  export type UserMenuActionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenuAction
     */
    select?: UserMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuActionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserMenuAction.
     */
    data: XOR<UserMenuActionUpdateInput, UserMenuActionUncheckedUpdateInput>
    /**
     * Choose, which UserMenuAction to update.
     */
    where: UserMenuActionWhereUniqueInput
  }

  /**
   * UserMenuAction updateMany
   */
  export type UserMenuActionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserMenuActions.
     */
    data: XOR<UserMenuActionUpdateManyMutationInput, UserMenuActionUncheckedUpdateManyInput>
    /**
     * Filter which UserMenuActions to update
     */
    where?: UserMenuActionWhereInput
  }

  /**
   * UserMenuAction upsert
   */
  export type UserMenuActionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenuAction
     */
    select?: UserMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuActionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserMenuAction to update in case it exists.
     */
    where: UserMenuActionWhereUniqueInput
    /**
     * In case the UserMenuAction found by the `where` argument doesn't exist, create a new UserMenuAction with this data.
     */
    create: XOR<UserMenuActionCreateInput, UserMenuActionUncheckedCreateInput>
    /**
     * In case the UserMenuAction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserMenuActionUpdateInput, UserMenuActionUncheckedUpdateInput>
  }

  /**
   * UserMenuAction delete
   */
  export type UserMenuActionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenuAction
     */
    select?: UserMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuActionInclude<ExtArgs> | null
    /**
     * Filter which UserMenuAction to delete.
     */
    where: UserMenuActionWhereUniqueInput
  }

  /**
   * UserMenuAction deleteMany
   */
  export type UserMenuActionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMenuActions to delete
     */
    where?: UserMenuActionWhereInput
  }

  /**
   * UserMenuAction without action
   */
  export type UserMenuActionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMenuAction
     */
    select?: UserMenuActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMenuActionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TenantScalarFieldEnum: {
    id: 'id',
    tenant_code: 'tenant_code',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TenantScalarFieldEnum = (typeof TenantScalarFieldEnum)[keyof typeof TenantScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    company_code: 'company_code',
    name: 'name',
    tenant_code: 'tenant_code',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const DivisionScalarFieldEnum: {
    id: 'id',
    division_code: 'division_code',
    name: 'name',
    company_code: 'company_code',
    tenant_code: 'tenant_code',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DivisionScalarFieldEnum = (typeof DivisionScalarFieldEnum)[keyof typeof DivisionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    user_code: 'user_code',
    email: 'email',
    name: 'name',
    password: 'password',
    status: 'status',
    tenant_code: 'tenant_code',
    company_code: 'company_code',
    division_code: 'division_code',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserCompanyHistoryScalarFieldEnum: {
    id: 'id',
    user_code: 'user_code',
    company_code: 'company_code',
    division_code: 'division_code',
    tenant_code: 'tenant_code',
    startDate: 'startDate',
    endDate: 'endDate'
  };

  export type UserCompanyHistoryScalarFieldEnum = (typeof UserCompanyHistoryScalarFieldEnum)[keyof typeof UserCompanyHistoryScalarFieldEnum]


  export const UserDivisionHistoryScalarFieldEnum: {
    id: 'id',
    user_code: 'user_code',
    division_code: 'division_code',
    company_code: 'company_code',
    tenant_code: 'tenant_code',
    startDate: 'startDate',
    endDate: 'endDate'
  };

  export type UserDivisionHistoryScalarFieldEnum = (typeof UserDivisionHistoryScalarFieldEnum)[keyof typeof UserDivisionHistoryScalarFieldEnum]


  export const AttendanceLocationScalarFieldEnum: {
    id: 'id',
    company_code: 'company_code',
    attendance_location_code: 'attendance_location_code',
    tenant_code: 'tenant_code',
    name: 'name',
    lat: 'lat',
    lng: 'lng',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AttendanceLocationScalarFieldEnum = (typeof AttendanceLocationScalarFieldEnum)[keyof typeof AttendanceLocationScalarFieldEnum]


  export const UserAttendanceLocationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    user_attendance_loaction_code: 'user_attendance_loaction_code',
    user_code: 'user_code',
    company_code: 'company_code',
    tenant_code: 'tenant_code',
    division_code: 'division_code',
    attendance_location_code: 'attendance_location_code',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserAttendanceLocationScalarFieldEnum = (typeof UserAttendanceLocationScalarFieldEnum)[keyof typeof UserAttendanceLocationScalarFieldEnum]


  export const UserAttendanceScalarFieldEnum: {
    id: 'id',
    status: 'status',
    clockInLat: 'clockInLat',
    clockInLng: 'clockInLng',
    clockOutLat: 'clockOutLat',
    clockOutLng: 'clockOutLng',
    clockIn: 'clockIn',
    clockOut: 'clockOut',
    company_code: 'company_code',
    tenant_code: 'tenant_code',
    division_code: 'division_code',
    user_code: 'user_code',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserAttendanceScalarFieldEnum = (typeof UserAttendanceScalarFieldEnum)[keyof typeof UserAttendanceScalarFieldEnum]


  export const ShiftTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    startTime: 'startTime',
    endTime: 'endTime',
    company_code: 'company_code',
    shift_code: 'shift_code',
    tenant_code: 'tenant_code'
  };

  export type ShiftTypeScalarFieldEnum = (typeof ShiftTypeScalarFieldEnum)[keyof typeof ShiftTypeScalarFieldEnum]


  export const UserShiftScalarFieldEnum: {
    id: 'id',
    company_code: 'company_code',
    tenant_code: 'tenant_code',
    division_code: 'division_code',
    user_code: 'user_code',
    shift_code: 'shift_code',
    date: 'date'
  };

  export type UserShiftScalarFieldEnum = (typeof UserShiftScalarFieldEnum)[keyof typeof UserShiftScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    role_code: 'role_code',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const UserRoleScalarFieldEnum: {
    id: 'id',
    company_code: 'company_code',
    tenant_code: 'tenant_code',
    division_code: 'division_code',
    user_code: 'user_code',
    role_code: 'role_code',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


  export const MasterMenuScalarFieldEnum: {
    id: 'id',
    menu_code: 'menu_code',
    name: 'name',
    url: 'url',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MasterMenuScalarFieldEnum = (typeof MasterMenuScalarFieldEnum)[keyof typeof MasterMenuScalarFieldEnum]


  export const MasterSubMenuScalarFieldEnum: {
    id: 'id',
    sub_menu_code: 'sub_menu_code',
    menu_code: 'menu_code',
    name: 'name',
    url: 'url',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MasterSubMenuScalarFieldEnum = (typeof MasterSubMenuScalarFieldEnum)[keyof typeof MasterSubMenuScalarFieldEnum]


  export const MasterMenuActionScalarFieldEnum: {
    id: 'id',
    sub_menu_code: 'sub_menu_code',
    menu_code: 'menu_code',
    action_code: 'action_code',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MasterMenuActionScalarFieldEnum = (typeof MasterMenuActionScalarFieldEnum)[keyof typeof MasterMenuActionScalarFieldEnum]


  export const CompanyMenuScalarFieldEnum: {
    id: 'id',
    menu_code: 'menu_code',
    tenant_code: 'tenant_code',
    company_code: 'company_code',
    sub_menu_code: 'sub_menu_code'
  };

  export type CompanyMenuScalarFieldEnum = (typeof CompanyMenuScalarFieldEnum)[keyof typeof CompanyMenuScalarFieldEnum]


  export const UserMenuScalarFieldEnum: {
    id: 'id',
    menu_code: 'menu_code',
    sub_menu_code: 'sub_menu_code',
    company_code: 'company_code',
    tenant_code: 'tenant_code',
    division_code: 'division_code',
    user_code: 'user_code',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserMenuScalarFieldEnum = (typeof UserMenuScalarFieldEnum)[keyof typeof UserMenuScalarFieldEnum]


  export const UserMenuActionScalarFieldEnum: {
    id: 'id',
    sub_menu_code: 'sub_menu_code',
    action_code: 'action_code',
    company_code: 'company_code',
    tenant_code: 'tenant_code',
    division_code: 'division_code',
    user_code: 'user_code',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserMenuActionScalarFieldEnum = (typeof UserMenuActionScalarFieldEnum)[keyof typeof UserMenuActionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'EmployeeStatus'
   */
  export type EnumEmployeeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmployeeStatus'>
    


  /**
   * Reference to a field of type 'EmployeeStatus[]'
   */
  export type ListEnumEmployeeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmployeeStatus[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type TenantWhereInput = {
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    id?: IntFilter<"Tenant"> | number
    tenant_code?: StringFilter<"Tenant"> | string
    name?: StringFilter<"Tenant"> | string
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeFilter<"Tenant"> | Date | string
    companies?: CompanyListRelationFilter
    user?: UserListRelationFilter
  }

  export type TenantOrderByWithRelationInput = {
    id?: SortOrder
    tenant_code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companies?: CompanyOrderByRelationAggregateInput
    user?: UserOrderByRelationAggregateInput
  }

  export type TenantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    tenant_code?: string
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    name?: StringFilter<"Tenant"> | string
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeFilter<"Tenant"> | Date | string
    companies?: CompanyListRelationFilter
    user?: UserListRelationFilter
  }, "id" | "tenant_code">

  export type TenantOrderByWithAggregationInput = {
    id?: SortOrder
    tenant_code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TenantCountOrderByAggregateInput
    _avg?: TenantAvgOrderByAggregateInput
    _max?: TenantMaxOrderByAggregateInput
    _min?: TenantMinOrderByAggregateInput
    _sum?: TenantSumOrderByAggregateInput
  }

  export type TenantScalarWhereWithAggregatesInput = {
    AND?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    OR?: TenantScalarWhereWithAggregatesInput[]
    NOT?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Tenant"> | number
    tenant_code?: StringWithAggregatesFilter<"Tenant"> | string
    name?: StringWithAggregatesFilter<"Tenant"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tenant"> | Date | string
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: IntFilter<"Company"> | number
    company_code?: StringFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    tenant_code?: StringFilter<"Company"> | string
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    divisions?: DivisionListRelationFilter
    user_history?: UserCompanyHistoryListRelationFilter
    user?: UserListRelationFilter
    attendance_location?: AttendanceLocationListRelationFilter
    sift_type?: ShiftTypeListRelationFilter
    menu?: CompanyMenuListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    company_code?: SortOrder
    name?: SortOrder
    tenant_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    divisions?: DivisionOrderByRelationAggregateInput
    user_history?: UserCompanyHistoryOrderByRelationAggregateInput
    user?: UserOrderByRelationAggregateInput
    attendance_location?: AttendanceLocationOrderByRelationAggregateInput
    sift_type?: ShiftTypeOrderByRelationAggregateInput
    menu?: CompanyMenuOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    tenant_code_company_code?: CompanyTenant_codeCompany_codeCompoundUniqueInput
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    company_code?: StringFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    tenant_code?: StringFilter<"Company"> | string
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    divisions?: DivisionListRelationFilter
    user_history?: UserCompanyHistoryListRelationFilter
    user?: UserListRelationFilter
    attendance_location?: AttendanceLocationListRelationFilter
    sift_type?: ShiftTypeListRelationFilter
    menu?: CompanyMenuListRelationFilter
  }, "id" | "tenant_code_company_code">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    company_code?: SortOrder
    name?: SortOrder
    tenant_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _avg?: CompanyAvgOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
    _sum?: CompanySumOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Company"> | number
    company_code?: StringWithAggregatesFilter<"Company"> | string
    name?: StringWithAggregatesFilter<"Company"> | string
    tenant_code?: StringWithAggregatesFilter<"Company"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
  }

  export type DivisionWhereInput = {
    AND?: DivisionWhereInput | DivisionWhereInput[]
    OR?: DivisionWhereInput[]
    NOT?: DivisionWhereInput | DivisionWhereInput[]
    id?: IntFilter<"Division"> | number
    division_code?: StringFilter<"Division"> | string
    name?: StringFilter<"Division"> | string
    company_code?: StringFilter<"Division"> | string
    tenant_code?: StringFilter<"Division"> | string
    createdAt?: DateTimeFilter<"Division"> | Date | string
    updatedAt?: DateTimeFilter<"Division"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    user_history?: UserDivisionHistoryListRelationFilter
    user?: UserListRelationFilter
  }

  export type DivisionOrderByWithRelationInput = {
    id?: SortOrder
    division_code?: SortOrder
    name?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    user_history?: UserDivisionHistoryOrderByRelationAggregateInput
    user?: UserOrderByRelationAggregateInput
  }

  export type DivisionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    tenant_code_company_code_division_code?: DivisionTenant_codeCompany_codeDivision_codeCompoundUniqueInput
    AND?: DivisionWhereInput | DivisionWhereInput[]
    OR?: DivisionWhereInput[]
    NOT?: DivisionWhereInput | DivisionWhereInput[]
    division_code?: StringFilter<"Division"> | string
    name?: StringFilter<"Division"> | string
    company_code?: StringFilter<"Division"> | string
    tenant_code?: StringFilter<"Division"> | string
    createdAt?: DateTimeFilter<"Division"> | Date | string
    updatedAt?: DateTimeFilter<"Division"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    user_history?: UserDivisionHistoryListRelationFilter
    user?: UserListRelationFilter
  }, "id" | "tenant_code_company_code_division_code">

  export type DivisionOrderByWithAggregationInput = {
    id?: SortOrder
    division_code?: SortOrder
    name?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DivisionCountOrderByAggregateInput
    _avg?: DivisionAvgOrderByAggregateInput
    _max?: DivisionMaxOrderByAggregateInput
    _min?: DivisionMinOrderByAggregateInput
    _sum?: DivisionSumOrderByAggregateInput
  }

  export type DivisionScalarWhereWithAggregatesInput = {
    AND?: DivisionScalarWhereWithAggregatesInput | DivisionScalarWhereWithAggregatesInput[]
    OR?: DivisionScalarWhereWithAggregatesInput[]
    NOT?: DivisionScalarWhereWithAggregatesInput | DivisionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Division"> | number
    division_code?: StringWithAggregatesFilter<"Division"> | string
    name?: StringWithAggregatesFilter<"Division"> | string
    company_code?: StringWithAggregatesFilter<"Division"> | string
    tenant_code?: StringWithAggregatesFilter<"Division"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Division"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Division"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    user_code?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    status?: EnumEmployeeStatusFilter<"User"> | $Enums.EmployeeStatus
    tenant_code?: StringFilter<"User"> | string
    company_code?: StringFilter<"User"> | string
    division_code?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    company_history?: UserCompanyHistoryListRelationFilter
    division_history?: UserDivisionHistoryListRelationFilter
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    division?: XOR<DivisionRelationFilter, DivisionWhereInput>
    attendances_location?: UserAttendanceLocationListRelationFilter
    user_attendance?: UserAttendanceListRelationFilter
    roles?: UserRoleListRelationFilter
    user_shifts?: UserShiftListRelationFilter
    userMenus?: UserMenuListRelationFilter
    userMenuAction?: UserMenuActionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    user_code?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    status?: SortOrder
    tenant_code?: SortOrder
    company_code?: SortOrder
    division_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company_history?: UserCompanyHistoryOrderByRelationAggregateInput
    division_history?: UserDivisionHistoryOrderByRelationAggregateInput
    tenant?: TenantOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
    division?: DivisionOrderByWithRelationInput
    attendances_location?: UserAttendanceLocationOrderByRelationAggregateInput
    user_attendance?: UserAttendanceOrderByRelationAggregateInput
    roles?: UserRoleOrderByRelationAggregateInput
    user_shifts?: UserShiftOrderByRelationAggregateInput
    userMenus?: UserMenuOrderByRelationAggregateInput
    userMenuAction?: UserMenuActionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    tenant_code_company_code_division_code_user_code?: UserTenant_codeCompany_codeDivision_codeUser_codeCompoundUniqueInput
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    user_code?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    status?: EnumEmployeeStatusFilter<"User"> | $Enums.EmployeeStatus
    tenant_code?: StringFilter<"User"> | string
    company_code?: StringFilter<"User"> | string
    division_code?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    company_history?: UserCompanyHistoryListRelationFilter
    division_history?: UserDivisionHistoryListRelationFilter
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    division?: XOR<DivisionRelationFilter, DivisionWhereInput>
    attendances_location?: UserAttendanceLocationListRelationFilter
    user_attendance?: UserAttendanceListRelationFilter
    roles?: UserRoleListRelationFilter
    user_shifts?: UserShiftListRelationFilter
    userMenus?: UserMenuListRelationFilter
    userMenuAction?: UserMenuActionListRelationFilter
  }, "id" | "email" | "tenant_code_company_code_division_code_user_code">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    user_code?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    status?: SortOrder
    tenant_code?: SortOrder
    company_code?: SortOrder
    division_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    user_code?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    status?: EnumEmployeeStatusWithAggregatesFilter<"User"> | $Enums.EmployeeStatus
    tenant_code?: StringWithAggregatesFilter<"User"> | string
    company_code?: StringWithAggregatesFilter<"User"> | string
    division_code?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type UserCompanyHistoryWhereInput = {
    AND?: UserCompanyHistoryWhereInput | UserCompanyHistoryWhereInput[]
    OR?: UserCompanyHistoryWhereInput[]
    NOT?: UserCompanyHistoryWhereInput | UserCompanyHistoryWhereInput[]
    id?: IntFilter<"UserCompanyHistory"> | number
    user_code?: StringFilter<"UserCompanyHistory"> | string
    company_code?: StringFilter<"UserCompanyHistory"> | string
    division_code?: StringFilter<"UserCompanyHistory"> | string
    tenant_code?: StringFilter<"UserCompanyHistory"> | string
    startDate?: DateTimeFilter<"UserCompanyHistory"> | Date | string
    endDate?: DateTimeNullableFilter<"UserCompanyHistory"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }

  export type UserCompanyHistoryOrderByWithRelationInput = {
    id?: SortOrder
    user_code?: SortOrder
    company_code?: SortOrder
    division_code?: SortOrder
    tenant_code?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
  }

  export type UserCompanyHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_code_tenant_code_company_code_startDate?: UserCompanyHistoryUser_codeTenant_codeCompany_codeStartDateCompoundUniqueInput
    AND?: UserCompanyHistoryWhereInput | UserCompanyHistoryWhereInput[]
    OR?: UserCompanyHistoryWhereInput[]
    NOT?: UserCompanyHistoryWhereInput | UserCompanyHistoryWhereInput[]
    user_code?: StringFilter<"UserCompanyHistory"> | string
    company_code?: StringFilter<"UserCompanyHistory"> | string
    division_code?: StringFilter<"UserCompanyHistory"> | string
    tenant_code?: StringFilter<"UserCompanyHistory"> | string
    startDate?: DateTimeFilter<"UserCompanyHistory"> | Date | string
    endDate?: DateTimeNullableFilter<"UserCompanyHistory"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }, "id" | "user_code_tenant_code_company_code_startDate">

  export type UserCompanyHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    user_code?: SortOrder
    company_code?: SortOrder
    division_code?: SortOrder
    tenant_code?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    _count?: UserCompanyHistoryCountOrderByAggregateInput
    _avg?: UserCompanyHistoryAvgOrderByAggregateInput
    _max?: UserCompanyHistoryMaxOrderByAggregateInput
    _min?: UserCompanyHistoryMinOrderByAggregateInput
    _sum?: UserCompanyHistorySumOrderByAggregateInput
  }

  export type UserCompanyHistoryScalarWhereWithAggregatesInput = {
    AND?: UserCompanyHistoryScalarWhereWithAggregatesInput | UserCompanyHistoryScalarWhereWithAggregatesInput[]
    OR?: UserCompanyHistoryScalarWhereWithAggregatesInput[]
    NOT?: UserCompanyHistoryScalarWhereWithAggregatesInput | UserCompanyHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserCompanyHistory"> | number
    user_code?: StringWithAggregatesFilter<"UserCompanyHistory"> | string
    company_code?: StringWithAggregatesFilter<"UserCompanyHistory"> | string
    division_code?: StringWithAggregatesFilter<"UserCompanyHistory"> | string
    tenant_code?: StringWithAggregatesFilter<"UserCompanyHistory"> | string
    startDate?: DateTimeWithAggregatesFilter<"UserCompanyHistory"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"UserCompanyHistory"> | Date | string | null
  }

  export type UserDivisionHistoryWhereInput = {
    AND?: UserDivisionHistoryWhereInput | UserDivisionHistoryWhereInput[]
    OR?: UserDivisionHistoryWhereInput[]
    NOT?: UserDivisionHistoryWhereInput | UserDivisionHistoryWhereInput[]
    id?: IntFilter<"UserDivisionHistory"> | number
    user_code?: StringFilter<"UserDivisionHistory"> | string
    division_code?: StringFilter<"UserDivisionHistory"> | string
    company_code?: StringFilter<"UserDivisionHistory"> | string
    tenant_code?: StringFilter<"UserDivisionHistory"> | string
    startDate?: DateTimeFilter<"UserDivisionHistory"> | Date | string
    endDate?: DateTimeNullableFilter<"UserDivisionHistory"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    division?: XOR<DivisionRelationFilter, DivisionWhereInput>
  }

  export type UserDivisionHistoryOrderByWithRelationInput = {
    id?: SortOrder
    user_code?: SortOrder
    division_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    division?: DivisionOrderByWithRelationInput
  }

  export type UserDivisionHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_code_tenant_code_division_code_company_code_startDate?: UserDivisionHistoryUser_codeTenant_codeDivision_codeCompany_codeStartDateCompoundUniqueInput
    AND?: UserDivisionHistoryWhereInput | UserDivisionHistoryWhereInput[]
    OR?: UserDivisionHistoryWhereInput[]
    NOT?: UserDivisionHistoryWhereInput | UserDivisionHistoryWhereInput[]
    user_code?: StringFilter<"UserDivisionHistory"> | string
    division_code?: StringFilter<"UserDivisionHistory"> | string
    company_code?: StringFilter<"UserDivisionHistory"> | string
    tenant_code?: StringFilter<"UserDivisionHistory"> | string
    startDate?: DateTimeFilter<"UserDivisionHistory"> | Date | string
    endDate?: DateTimeNullableFilter<"UserDivisionHistory"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    division?: XOR<DivisionRelationFilter, DivisionWhereInput>
  }, "id" | "user_code_tenant_code_division_code_company_code_startDate">

  export type UserDivisionHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    user_code?: SortOrder
    division_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    _count?: UserDivisionHistoryCountOrderByAggregateInput
    _avg?: UserDivisionHistoryAvgOrderByAggregateInput
    _max?: UserDivisionHistoryMaxOrderByAggregateInput
    _min?: UserDivisionHistoryMinOrderByAggregateInput
    _sum?: UserDivisionHistorySumOrderByAggregateInput
  }

  export type UserDivisionHistoryScalarWhereWithAggregatesInput = {
    AND?: UserDivisionHistoryScalarWhereWithAggregatesInput | UserDivisionHistoryScalarWhereWithAggregatesInput[]
    OR?: UserDivisionHistoryScalarWhereWithAggregatesInput[]
    NOT?: UserDivisionHistoryScalarWhereWithAggregatesInput | UserDivisionHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserDivisionHistory"> | number
    user_code?: StringWithAggregatesFilter<"UserDivisionHistory"> | string
    division_code?: StringWithAggregatesFilter<"UserDivisionHistory"> | string
    company_code?: StringWithAggregatesFilter<"UserDivisionHistory"> | string
    tenant_code?: StringWithAggregatesFilter<"UserDivisionHistory"> | string
    startDate?: DateTimeWithAggregatesFilter<"UserDivisionHistory"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"UserDivisionHistory"> | Date | string | null
  }

  export type AttendanceLocationWhereInput = {
    AND?: AttendanceLocationWhereInput | AttendanceLocationWhereInput[]
    OR?: AttendanceLocationWhereInput[]
    NOT?: AttendanceLocationWhereInput | AttendanceLocationWhereInput[]
    id?: IntFilter<"AttendanceLocation"> | number
    company_code?: StringFilter<"AttendanceLocation"> | string
    attendance_location_code?: StringFilter<"AttendanceLocation"> | string
    tenant_code?: StringFilter<"AttendanceLocation"> | string
    name?: StringFilter<"AttendanceLocation"> | string
    lat?: StringFilter<"AttendanceLocation"> | string
    lng?: StringFilter<"AttendanceLocation"> | string
    createdAt?: DateTimeFilter<"AttendanceLocation"> | Date | string
    updatedAt?: DateTimeFilter<"AttendanceLocation"> | Date | string
    user_attendance_location?: UserAttendanceLocationListRelationFilter
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }

  export type AttendanceLocationOrderByWithRelationInput = {
    id?: SortOrder
    company_code?: SortOrder
    attendance_location_code?: SortOrder
    tenant_code?: SortOrder
    name?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user_attendance_location?: UserAttendanceLocationOrderByRelationAggregateInput
    company?: CompanyOrderByWithRelationInput
  }

  export type AttendanceLocationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    tenant_code_company_code_attendance_location_code?: AttendanceLocationTenant_codeCompany_codeAttendance_location_codeCompoundUniqueInput
    AND?: AttendanceLocationWhereInput | AttendanceLocationWhereInput[]
    OR?: AttendanceLocationWhereInput[]
    NOT?: AttendanceLocationWhereInput | AttendanceLocationWhereInput[]
    company_code?: StringFilter<"AttendanceLocation"> | string
    attendance_location_code?: StringFilter<"AttendanceLocation"> | string
    tenant_code?: StringFilter<"AttendanceLocation"> | string
    name?: StringFilter<"AttendanceLocation"> | string
    lat?: StringFilter<"AttendanceLocation"> | string
    lng?: StringFilter<"AttendanceLocation"> | string
    createdAt?: DateTimeFilter<"AttendanceLocation"> | Date | string
    updatedAt?: DateTimeFilter<"AttendanceLocation"> | Date | string
    user_attendance_location?: UserAttendanceLocationListRelationFilter
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }, "id" | "tenant_code_company_code_attendance_location_code">

  export type AttendanceLocationOrderByWithAggregationInput = {
    id?: SortOrder
    company_code?: SortOrder
    attendance_location_code?: SortOrder
    tenant_code?: SortOrder
    name?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AttendanceLocationCountOrderByAggregateInput
    _avg?: AttendanceLocationAvgOrderByAggregateInput
    _max?: AttendanceLocationMaxOrderByAggregateInput
    _min?: AttendanceLocationMinOrderByAggregateInput
    _sum?: AttendanceLocationSumOrderByAggregateInput
  }

  export type AttendanceLocationScalarWhereWithAggregatesInput = {
    AND?: AttendanceLocationScalarWhereWithAggregatesInput | AttendanceLocationScalarWhereWithAggregatesInput[]
    OR?: AttendanceLocationScalarWhereWithAggregatesInput[]
    NOT?: AttendanceLocationScalarWhereWithAggregatesInput | AttendanceLocationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AttendanceLocation"> | number
    company_code?: StringWithAggregatesFilter<"AttendanceLocation"> | string
    attendance_location_code?: StringWithAggregatesFilter<"AttendanceLocation"> | string
    tenant_code?: StringWithAggregatesFilter<"AttendanceLocation"> | string
    name?: StringWithAggregatesFilter<"AttendanceLocation"> | string
    lat?: StringWithAggregatesFilter<"AttendanceLocation"> | string
    lng?: StringWithAggregatesFilter<"AttendanceLocation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AttendanceLocation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AttendanceLocation"> | Date | string
  }

  export type UserAttendanceLocationWhereInput = {
    AND?: UserAttendanceLocationWhereInput | UserAttendanceLocationWhereInput[]
    OR?: UserAttendanceLocationWhereInput[]
    NOT?: UserAttendanceLocationWhereInput | UserAttendanceLocationWhereInput[]
    id?: IntFilter<"UserAttendanceLocation"> | number
    name?: StringFilter<"UserAttendanceLocation"> | string
    user_attendance_loaction_code?: StringFilter<"UserAttendanceLocation"> | string
    user_code?: StringFilter<"UserAttendanceLocation"> | string
    company_code?: StringFilter<"UserAttendanceLocation"> | string
    tenant_code?: StringFilter<"UserAttendanceLocation"> | string
    division_code?: StringFilter<"UserAttendanceLocation"> | string
    attendance_location_code?: StringFilter<"UserAttendanceLocation"> | string
    createdAt?: DateTimeFilter<"UserAttendanceLocation"> | Date | string
    updatedAt?: DateTimeFilter<"UserAttendanceLocation"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    location?: XOR<AttendanceLocationRelationFilter, AttendanceLocationWhereInput>
  }

  export type UserAttendanceLocationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    user_attendance_loaction_code?: SortOrder
    user_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    attendance_location_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    location?: AttendanceLocationOrderByWithRelationInput
  }

  export type UserAttendanceLocationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    tenant_code_company_code_user_attendance_loaction_code_user_code_division_code?: UserAttendanceLocationTenant_codeCompany_codeUser_attendance_loaction_codeUser_codeDivision_codeCompoundUniqueInput
    AND?: UserAttendanceLocationWhereInput | UserAttendanceLocationWhereInput[]
    OR?: UserAttendanceLocationWhereInput[]
    NOT?: UserAttendanceLocationWhereInput | UserAttendanceLocationWhereInput[]
    name?: StringFilter<"UserAttendanceLocation"> | string
    user_attendance_loaction_code?: StringFilter<"UserAttendanceLocation"> | string
    user_code?: StringFilter<"UserAttendanceLocation"> | string
    company_code?: StringFilter<"UserAttendanceLocation"> | string
    tenant_code?: StringFilter<"UserAttendanceLocation"> | string
    division_code?: StringFilter<"UserAttendanceLocation"> | string
    attendance_location_code?: StringFilter<"UserAttendanceLocation"> | string
    createdAt?: DateTimeFilter<"UserAttendanceLocation"> | Date | string
    updatedAt?: DateTimeFilter<"UserAttendanceLocation"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    location?: XOR<AttendanceLocationRelationFilter, AttendanceLocationWhereInput>
  }, "id" | "tenant_code_company_code_user_attendance_loaction_code_user_code_division_code">

  export type UserAttendanceLocationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    user_attendance_loaction_code?: SortOrder
    user_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    attendance_location_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserAttendanceLocationCountOrderByAggregateInput
    _avg?: UserAttendanceLocationAvgOrderByAggregateInput
    _max?: UserAttendanceLocationMaxOrderByAggregateInput
    _min?: UserAttendanceLocationMinOrderByAggregateInput
    _sum?: UserAttendanceLocationSumOrderByAggregateInput
  }

  export type UserAttendanceLocationScalarWhereWithAggregatesInput = {
    AND?: UserAttendanceLocationScalarWhereWithAggregatesInput | UserAttendanceLocationScalarWhereWithAggregatesInput[]
    OR?: UserAttendanceLocationScalarWhereWithAggregatesInput[]
    NOT?: UserAttendanceLocationScalarWhereWithAggregatesInput | UserAttendanceLocationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserAttendanceLocation"> | number
    name?: StringWithAggregatesFilter<"UserAttendanceLocation"> | string
    user_attendance_loaction_code?: StringWithAggregatesFilter<"UserAttendanceLocation"> | string
    user_code?: StringWithAggregatesFilter<"UserAttendanceLocation"> | string
    company_code?: StringWithAggregatesFilter<"UserAttendanceLocation"> | string
    tenant_code?: StringWithAggregatesFilter<"UserAttendanceLocation"> | string
    division_code?: StringWithAggregatesFilter<"UserAttendanceLocation"> | string
    attendance_location_code?: StringWithAggregatesFilter<"UserAttendanceLocation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserAttendanceLocation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserAttendanceLocation"> | Date | string
  }

  export type UserAttendanceWhereInput = {
    AND?: UserAttendanceWhereInput | UserAttendanceWhereInput[]
    OR?: UserAttendanceWhereInput[]
    NOT?: UserAttendanceWhereInput | UserAttendanceWhereInput[]
    id?: IntFilter<"UserAttendance"> | number
    status?: StringFilter<"UserAttendance"> | string
    clockInLat?: StringNullableFilter<"UserAttendance"> | string | null
    clockInLng?: StringNullableFilter<"UserAttendance"> | string | null
    clockOutLat?: StringNullableFilter<"UserAttendance"> | string | null
    clockOutLng?: StringNullableFilter<"UserAttendance"> | string | null
    clockIn?: DateTimeNullableFilter<"UserAttendance"> | Date | string | null
    clockOut?: DateTimeNullableFilter<"UserAttendance"> | Date | string | null
    company_code?: StringFilter<"UserAttendance"> | string
    tenant_code?: StringFilter<"UserAttendance"> | string
    division_code?: StringFilter<"UserAttendance"> | string
    user_code?: StringFilter<"UserAttendance"> | string
    createdAt?: DateTimeFilter<"UserAttendance"> | Date | string
    updatedAt?: DateTimeFilter<"UserAttendance"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserAttendanceOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    clockInLat?: SortOrderInput | SortOrder
    clockInLng?: SortOrderInput | SortOrder
    clockOutLat?: SortOrderInput | SortOrder
    clockOutLng?: SortOrderInput | SortOrder
    clockIn?: SortOrderInput | SortOrder
    clockOut?: SortOrderInput | SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserAttendanceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    tenant_code_company_code_createdAt_clockInLat_user_code_division_code?: UserAttendanceTenant_codeCompany_codeCreatedAtClockInLatUser_codeDivision_codeCompoundUniqueInput
    AND?: UserAttendanceWhereInput | UserAttendanceWhereInput[]
    OR?: UserAttendanceWhereInput[]
    NOT?: UserAttendanceWhereInput | UserAttendanceWhereInput[]
    status?: StringFilter<"UserAttendance"> | string
    clockInLat?: StringNullableFilter<"UserAttendance"> | string | null
    clockInLng?: StringNullableFilter<"UserAttendance"> | string | null
    clockOutLat?: StringNullableFilter<"UserAttendance"> | string | null
    clockOutLng?: StringNullableFilter<"UserAttendance"> | string | null
    clockIn?: DateTimeNullableFilter<"UserAttendance"> | Date | string | null
    clockOut?: DateTimeNullableFilter<"UserAttendance"> | Date | string | null
    company_code?: StringFilter<"UserAttendance"> | string
    tenant_code?: StringFilter<"UserAttendance"> | string
    division_code?: StringFilter<"UserAttendance"> | string
    user_code?: StringFilter<"UserAttendance"> | string
    createdAt?: DateTimeFilter<"UserAttendance"> | Date | string
    updatedAt?: DateTimeFilter<"UserAttendance"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "tenant_code_company_code_createdAt_clockInLat_user_code_division_code">

  export type UserAttendanceOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    clockInLat?: SortOrderInput | SortOrder
    clockInLng?: SortOrderInput | SortOrder
    clockOutLat?: SortOrderInput | SortOrder
    clockOutLng?: SortOrderInput | SortOrder
    clockIn?: SortOrderInput | SortOrder
    clockOut?: SortOrderInput | SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserAttendanceCountOrderByAggregateInput
    _avg?: UserAttendanceAvgOrderByAggregateInput
    _max?: UserAttendanceMaxOrderByAggregateInput
    _min?: UserAttendanceMinOrderByAggregateInput
    _sum?: UserAttendanceSumOrderByAggregateInput
  }

  export type UserAttendanceScalarWhereWithAggregatesInput = {
    AND?: UserAttendanceScalarWhereWithAggregatesInput | UserAttendanceScalarWhereWithAggregatesInput[]
    OR?: UserAttendanceScalarWhereWithAggregatesInput[]
    NOT?: UserAttendanceScalarWhereWithAggregatesInput | UserAttendanceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserAttendance"> | number
    status?: StringWithAggregatesFilter<"UserAttendance"> | string
    clockInLat?: StringNullableWithAggregatesFilter<"UserAttendance"> | string | null
    clockInLng?: StringNullableWithAggregatesFilter<"UserAttendance"> | string | null
    clockOutLat?: StringNullableWithAggregatesFilter<"UserAttendance"> | string | null
    clockOutLng?: StringNullableWithAggregatesFilter<"UserAttendance"> | string | null
    clockIn?: DateTimeNullableWithAggregatesFilter<"UserAttendance"> | Date | string | null
    clockOut?: DateTimeNullableWithAggregatesFilter<"UserAttendance"> | Date | string | null
    company_code?: StringWithAggregatesFilter<"UserAttendance"> | string
    tenant_code?: StringWithAggregatesFilter<"UserAttendance"> | string
    division_code?: StringWithAggregatesFilter<"UserAttendance"> | string
    user_code?: StringWithAggregatesFilter<"UserAttendance"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserAttendance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserAttendance"> | Date | string
  }

  export type ShiftTypeWhereInput = {
    AND?: ShiftTypeWhereInput | ShiftTypeWhereInput[]
    OR?: ShiftTypeWhereInput[]
    NOT?: ShiftTypeWhereInput | ShiftTypeWhereInput[]
    id?: IntFilter<"ShiftType"> | number
    name?: StringFilter<"ShiftType"> | string
    startTime?: DateTimeFilter<"ShiftType"> | Date | string
    endTime?: DateTimeFilter<"ShiftType"> | Date | string
    company_code?: StringFilter<"ShiftType"> | string
    shift_code?: StringFilter<"ShiftType"> | string
    tenant_code?: StringFilter<"ShiftType"> | string
    user_shifts?: UserShiftListRelationFilter
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }

  export type ShiftTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    company_code?: SortOrder
    shift_code?: SortOrder
    tenant_code?: SortOrder
    user_shifts?: UserShiftOrderByRelationAggregateInput
    company?: CompanyOrderByWithRelationInput
  }

  export type ShiftTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    tenant_code_company_code_shift_code?: ShiftTypeTenant_codeCompany_codeShift_codeCompoundUniqueInput
    AND?: ShiftTypeWhereInput | ShiftTypeWhereInput[]
    OR?: ShiftTypeWhereInput[]
    NOT?: ShiftTypeWhereInput | ShiftTypeWhereInput[]
    name?: StringFilter<"ShiftType"> | string
    startTime?: DateTimeFilter<"ShiftType"> | Date | string
    endTime?: DateTimeFilter<"ShiftType"> | Date | string
    company_code?: StringFilter<"ShiftType"> | string
    shift_code?: StringFilter<"ShiftType"> | string
    tenant_code?: StringFilter<"ShiftType"> | string
    user_shifts?: UserShiftListRelationFilter
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }, "id" | "tenant_code_company_code_shift_code">

  export type ShiftTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    company_code?: SortOrder
    shift_code?: SortOrder
    tenant_code?: SortOrder
    _count?: ShiftTypeCountOrderByAggregateInput
    _avg?: ShiftTypeAvgOrderByAggregateInput
    _max?: ShiftTypeMaxOrderByAggregateInput
    _min?: ShiftTypeMinOrderByAggregateInput
    _sum?: ShiftTypeSumOrderByAggregateInput
  }

  export type ShiftTypeScalarWhereWithAggregatesInput = {
    AND?: ShiftTypeScalarWhereWithAggregatesInput | ShiftTypeScalarWhereWithAggregatesInput[]
    OR?: ShiftTypeScalarWhereWithAggregatesInput[]
    NOT?: ShiftTypeScalarWhereWithAggregatesInput | ShiftTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ShiftType"> | number
    name?: StringWithAggregatesFilter<"ShiftType"> | string
    startTime?: DateTimeWithAggregatesFilter<"ShiftType"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"ShiftType"> | Date | string
    company_code?: StringWithAggregatesFilter<"ShiftType"> | string
    shift_code?: StringWithAggregatesFilter<"ShiftType"> | string
    tenant_code?: StringWithAggregatesFilter<"ShiftType"> | string
  }

  export type UserShiftWhereInput = {
    AND?: UserShiftWhereInput | UserShiftWhereInput[]
    OR?: UserShiftWhereInput[]
    NOT?: UserShiftWhereInput | UserShiftWhereInput[]
    id?: IntFilter<"UserShift"> | number
    company_code?: StringFilter<"UserShift"> | string
    tenant_code?: StringFilter<"UserShift"> | string
    division_code?: StringFilter<"UserShift"> | string
    user_code?: StringFilter<"UserShift"> | string
    shift_code?: StringFilter<"UserShift"> | string
    date?: DateTimeFilter<"UserShift"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    shift?: XOR<ShiftTypeRelationFilter, ShiftTypeWhereInput>
  }

  export type UserShiftOrderByWithRelationInput = {
    id?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    shift_code?: SortOrder
    date?: SortOrder
    user?: UserOrderByWithRelationInput
    shift?: ShiftTypeOrderByWithRelationInput
  }

  export type UserShiftWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    shift_code_tenant_code_company_code_division_code_user_code?: UserShiftShift_codeTenant_codeCompany_codeDivision_codeUser_codeCompoundUniqueInput
    AND?: UserShiftWhereInput | UserShiftWhereInput[]
    OR?: UserShiftWhereInput[]
    NOT?: UserShiftWhereInput | UserShiftWhereInput[]
    company_code?: StringFilter<"UserShift"> | string
    tenant_code?: StringFilter<"UserShift"> | string
    division_code?: StringFilter<"UserShift"> | string
    user_code?: StringFilter<"UserShift"> | string
    shift_code?: StringFilter<"UserShift"> | string
    date?: DateTimeFilter<"UserShift"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    shift?: XOR<ShiftTypeRelationFilter, ShiftTypeWhereInput>
  }, "id" | "shift_code_tenant_code_company_code_division_code_user_code">

  export type UserShiftOrderByWithAggregationInput = {
    id?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    shift_code?: SortOrder
    date?: SortOrder
    _count?: UserShiftCountOrderByAggregateInput
    _avg?: UserShiftAvgOrderByAggregateInput
    _max?: UserShiftMaxOrderByAggregateInput
    _min?: UserShiftMinOrderByAggregateInput
    _sum?: UserShiftSumOrderByAggregateInput
  }

  export type UserShiftScalarWhereWithAggregatesInput = {
    AND?: UserShiftScalarWhereWithAggregatesInput | UserShiftScalarWhereWithAggregatesInput[]
    OR?: UserShiftScalarWhereWithAggregatesInput[]
    NOT?: UserShiftScalarWhereWithAggregatesInput | UserShiftScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserShift"> | number
    company_code?: StringWithAggregatesFilter<"UserShift"> | string
    tenant_code?: StringWithAggregatesFilter<"UserShift"> | string
    division_code?: StringWithAggregatesFilter<"UserShift"> | string
    user_code?: StringWithAggregatesFilter<"UserShift"> | string
    shift_code?: StringWithAggregatesFilter<"UserShift"> | string
    date?: DateTimeWithAggregatesFilter<"UserShift"> | Date | string
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: IntFilter<"Role"> | number
    role_code?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    users?: UserRoleListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    role_code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserRoleOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    role_code?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    name?: StringFilter<"Role"> | string
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    users?: UserRoleListRelationFilter
  }, "id" | "role_code">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    role_code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Role"> | number
    role_code?: StringWithAggregatesFilter<"Role"> | string
    name?: StringWithAggregatesFilter<"Role"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
  }

  export type UserRoleWhereInput = {
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    id?: IntFilter<"UserRole"> | number
    company_code?: StringFilter<"UserRole"> | string
    tenant_code?: StringFilter<"UserRole"> | string
    division_code?: StringFilter<"UserRole"> | string
    user_code?: StringFilter<"UserRole"> | string
    role_code?: StringFilter<"UserRole"> | string
    createdAt?: DateTimeFilter<"UserRole"> | Date | string
    updatedAt?: DateTimeFilter<"UserRole"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    role?: XOR<RoleRelationFilter, RoleWhereInput>
  }

  export type UserRoleOrderByWithRelationInput = {
    id?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    role_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    role?: RoleOrderByWithRelationInput
  }

  export type UserRoleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    tenant_code_company_code_user_code_role_code?: UserRoleTenant_codeCompany_codeUser_codeRole_codeCompoundUniqueInput
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    company_code?: StringFilter<"UserRole"> | string
    tenant_code?: StringFilter<"UserRole"> | string
    division_code?: StringFilter<"UserRole"> | string
    user_code?: StringFilter<"UserRole"> | string
    role_code?: StringFilter<"UserRole"> | string
    createdAt?: DateTimeFilter<"UserRole"> | Date | string
    updatedAt?: DateTimeFilter<"UserRole"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    role?: XOR<RoleRelationFilter, RoleWhereInput>
  }, "id" | "tenant_code_company_code_user_code_role_code">

  export type UserRoleOrderByWithAggregationInput = {
    id?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    role_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserRoleCountOrderByAggregateInput
    _avg?: UserRoleAvgOrderByAggregateInput
    _max?: UserRoleMaxOrderByAggregateInput
    _min?: UserRoleMinOrderByAggregateInput
    _sum?: UserRoleSumOrderByAggregateInput
  }

  export type UserRoleScalarWhereWithAggregatesInput = {
    AND?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    OR?: UserRoleScalarWhereWithAggregatesInput[]
    NOT?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserRole"> | number
    company_code?: StringWithAggregatesFilter<"UserRole"> | string
    tenant_code?: StringWithAggregatesFilter<"UserRole"> | string
    division_code?: StringWithAggregatesFilter<"UserRole"> | string
    user_code?: StringWithAggregatesFilter<"UserRole"> | string
    role_code?: StringWithAggregatesFilter<"UserRole"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserRole"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserRole"> | Date | string
  }

  export type MasterMenuWhereInput = {
    AND?: MasterMenuWhereInput | MasterMenuWhereInput[]
    OR?: MasterMenuWhereInput[]
    NOT?: MasterMenuWhereInput | MasterMenuWhereInput[]
    id?: IntFilter<"MasterMenu"> | number
    menu_code?: StringFilter<"MasterMenu"> | string
    name?: StringFilter<"MasterMenu"> | string
    url?: StringFilter<"MasterMenu"> | string
    description?: StringFilter<"MasterMenu"> | string
    createdAt?: DateTimeFilter<"MasterMenu"> | Date | string
    updatedAt?: DateTimeFilter<"MasterMenu"> | Date | string
    sub_menu?: MasterSubMenuListRelationFilter
  }

  export type MasterMenuOrderByWithRelationInput = {
    id?: SortOrder
    menu_code?: SortOrder
    name?: SortOrder
    url?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sub_menu?: MasterSubMenuOrderByRelationAggregateInput
  }

  export type MasterMenuWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    menu_code?: string
    AND?: MasterMenuWhereInput | MasterMenuWhereInput[]
    OR?: MasterMenuWhereInput[]
    NOT?: MasterMenuWhereInput | MasterMenuWhereInput[]
    name?: StringFilter<"MasterMenu"> | string
    url?: StringFilter<"MasterMenu"> | string
    description?: StringFilter<"MasterMenu"> | string
    createdAt?: DateTimeFilter<"MasterMenu"> | Date | string
    updatedAt?: DateTimeFilter<"MasterMenu"> | Date | string
    sub_menu?: MasterSubMenuListRelationFilter
  }, "id" | "menu_code">

  export type MasterMenuOrderByWithAggregationInput = {
    id?: SortOrder
    menu_code?: SortOrder
    name?: SortOrder
    url?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MasterMenuCountOrderByAggregateInput
    _avg?: MasterMenuAvgOrderByAggregateInput
    _max?: MasterMenuMaxOrderByAggregateInput
    _min?: MasterMenuMinOrderByAggregateInput
    _sum?: MasterMenuSumOrderByAggregateInput
  }

  export type MasterMenuScalarWhereWithAggregatesInput = {
    AND?: MasterMenuScalarWhereWithAggregatesInput | MasterMenuScalarWhereWithAggregatesInput[]
    OR?: MasterMenuScalarWhereWithAggregatesInput[]
    NOT?: MasterMenuScalarWhereWithAggregatesInput | MasterMenuScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MasterMenu"> | number
    menu_code?: StringWithAggregatesFilter<"MasterMenu"> | string
    name?: StringWithAggregatesFilter<"MasterMenu"> | string
    url?: StringWithAggregatesFilter<"MasterMenu"> | string
    description?: StringWithAggregatesFilter<"MasterMenu"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MasterMenu"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MasterMenu"> | Date | string
  }

  export type MasterSubMenuWhereInput = {
    AND?: MasterSubMenuWhereInput | MasterSubMenuWhereInput[]
    OR?: MasterSubMenuWhereInput[]
    NOT?: MasterSubMenuWhereInput | MasterSubMenuWhereInput[]
    id?: IntFilter<"MasterSubMenu"> | number
    sub_menu_code?: StringFilter<"MasterSubMenu"> | string
    menu_code?: StringFilter<"MasterSubMenu"> | string
    name?: StringFilter<"MasterSubMenu"> | string
    url?: StringFilter<"MasterSubMenu"> | string
    description?: StringFilter<"MasterSubMenu"> | string
    createdAt?: DateTimeFilter<"MasterSubMenu"> | Date | string
    updatedAt?: DateTimeFilter<"MasterSubMenu"> | Date | string
    menu?: XOR<MasterMenuRelationFilter, MasterMenuWhereInput>
    actions?: MasterMenuActionListRelationFilter
  }

  export type MasterSubMenuOrderByWithRelationInput = {
    id?: SortOrder
    sub_menu_code?: SortOrder
    menu_code?: SortOrder
    name?: SortOrder
    url?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    menu?: MasterMenuOrderByWithRelationInput
    actions?: MasterMenuActionOrderByRelationAggregateInput
  }

  export type MasterSubMenuWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sub_menu_code_menu_code?: MasterSubMenuSub_menu_codeMenu_codeCompoundUniqueInput
    AND?: MasterSubMenuWhereInput | MasterSubMenuWhereInput[]
    OR?: MasterSubMenuWhereInput[]
    NOT?: MasterSubMenuWhereInput | MasterSubMenuWhereInput[]
    sub_menu_code?: StringFilter<"MasterSubMenu"> | string
    menu_code?: StringFilter<"MasterSubMenu"> | string
    name?: StringFilter<"MasterSubMenu"> | string
    url?: StringFilter<"MasterSubMenu"> | string
    description?: StringFilter<"MasterSubMenu"> | string
    createdAt?: DateTimeFilter<"MasterSubMenu"> | Date | string
    updatedAt?: DateTimeFilter<"MasterSubMenu"> | Date | string
    menu?: XOR<MasterMenuRelationFilter, MasterMenuWhereInput>
    actions?: MasterMenuActionListRelationFilter
  }, "id" | "sub_menu_code_menu_code">

  export type MasterSubMenuOrderByWithAggregationInput = {
    id?: SortOrder
    sub_menu_code?: SortOrder
    menu_code?: SortOrder
    name?: SortOrder
    url?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MasterSubMenuCountOrderByAggregateInput
    _avg?: MasterSubMenuAvgOrderByAggregateInput
    _max?: MasterSubMenuMaxOrderByAggregateInput
    _min?: MasterSubMenuMinOrderByAggregateInput
    _sum?: MasterSubMenuSumOrderByAggregateInput
  }

  export type MasterSubMenuScalarWhereWithAggregatesInput = {
    AND?: MasterSubMenuScalarWhereWithAggregatesInput | MasterSubMenuScalarWhereWithAggregatesInput[]
    OR?: MasterSubMenuScalarWhereWithAggregatesInput[]
    NOT?: MasterSubMenuScalarWhereWithAggregatesInput | MasterSubMenuScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MasterSubMenu"> | number
    sub_menu_code?: StringWithAggregatesFilter<"MasterSubMenu"> | string
    menu_code?: StringWithAggregatesFilter<"MasterSubMenu"> | string
    name?: StringWithAggregatesFilter<"MasterSubMenu"> | string
    url?: StringWithAggregatesFilter<"MasterSubMenu"> | string
    description?: StringWithAggregatesFilter<"MasterSubMenu"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MasterSubMenu"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MasterSubMenu"> | Date | string
  }

  export type MasterMenuActionWhereInput = {
    AND?: MasterMenuActionWhereInput | MasterMenuActionWhereInput[]
    OR?: MasterMenuActionWhereInput[]
    NOT?: MasterMenuActionWhereInput | MasterMenuActionWhereInput[]
    id?: IntFilter<"MasterMenuAction"> | number
    sub_menu_code?: StringFilter<"MasterMenuAction"> | string
    menu_code?: StringFilter<"MasterMenuAction"> | string
    action_code?: StringFilter<"MasterMenuAction"> | string
    name?: StringFilter<"MasterMenuAction"> | string
    createdAt?: DateTimeFilter<"MasterMenuAction"> | Date | string
    updatedAt?: DateTimeFilter<"MasterMenuAction"> | Date | string
    users?: UserMenuActionListRelationFilter
    sub_menu?: XOR<MasterSubMenuRelationFilter, MasterSubMenuWhereInput>
  }

  export type MasterMenuActionOrderByWithRelationInput = {
    id?: SortOrder
    sub_menu_code?: SortOrder
    menu_code?: SortOrder
    action_code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserMenuActionOrderByRelationAggregateInput
    sub_menu?: MasterSubMenuOrderByWithRelationInput
  }

  export type MasterMenuActionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sub_menu_code_action_code?: MasterMenuActionSub_menu_codeAction_codeCompoundUniqueInput
    AND?: MasterMenuActionWhereInput | MasterMenuActionWhereInput[]
    OR?: MasterMenuActionWhereInput[]
    NOT?: MasterMenuActionWhereInput | MasterMenuActionWhereInput[]
    sub_menu_code?: StringFilter<"MasterMenuAction"> | string
    menu_code?: StringFilter<"MasterMenuAction"> | string
    action_code?: StringFilter<"MasterMenuAction"> | string
    name?: StringFilter<"MasterMenuAction"> | string
    createdAt?: DateTimeFilter<"MasterMenuAction"> | Date | string
    updatedAt?: DateTimeFilter<"MasterMenuAction"> | Date | string
    users?: UserMenuActionListRelationFilter
    sub_menu?: XOR<MasterSubMenuRelationFilter, MasterSubMenuWhereInput>
  }, "id" | "sub_menu_code_action_code">

  export type MasterMenuActionOrderByWithAggregationInput = {
    id?: SortOrder
    sub_menu_code?: SortOrder
    menu_code?: SortOrder
    action_code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MasterMenuActionCountOrderByAggregateInput
    _avg?: MasterMenuActionAvgOrderByAggregateInput
    _max?: MasterMenuActionMaxOrderByAggregateInput
    _min?: MasterMenuActionMinOrderByAggregateInput
    _sum?: MasterMenuActionSumOrderByAggregateInput
  }

  export type MasterMenuActionScalarWhereWithAggregatesInput = {
    AND?: MasterMenuActionScalarWhereWithAggregatesInput | MasterMenuActionScalarWhereWithAggregatesInput[]
    OR?: MasterMenuActionScalarWhereWithAggregatesInput[]
    NOT?: MasterMenuActionScalarWhereWithAggregatesInput | MasterMenuActionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MasterMenuAction"> | number
    sub_menu_code?: StringWithAggregatesFilter<"MasterMenuAction"> | string
    menu_code?: StringWithAggregatesFilter<"MasterMenuAction"> | string
    action_code?: StringWithAggregatesFilter<"MasterMenuAction"> | string
    name?: StringWithAggregatesFilter<"MasterMenuAction"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MasterMenuAction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MasterMenuAction"> | Date | string
  }

  export type CompanyMenuWhereInput = {
    AND?: CompanyMenuWhereInput | CompanyMenuWhereInput[]
    OR?: CompanyMenuWhereInput[]
    NOT?: CompanyMenuWhereInput | CompanyMenuWhereInput[]
    id?: IntFilter<"CompanyMenu"> | number
    menu_code?: StringFilter<"CompanyMenu"> | string
    tenant_code?: StringFilter<"CompanyMenu"> | string
    company_code?: StringFilter<"CompanyMenu"> | string
    sub_menu_code?: StringFilter<"CompanyMenu"> | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    user_menu?: UserMenuListRelationFilter
  }

  export type CompanyMenuOrderByWithRelationInput = {
    id?: SortOrder
    menu_code?: SortOrder
    tenant_code?: SortOrder
    company_code?: SortOrder
    sub_menu_code?: SortOrder
    company?: CompanyOrderByWithRelationInput
    user_menu?: UserMenuOrderByRelationAggregateInput
  }

  export type CompanyMenuWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    tenant_code_company_code_menu_code_sub_menu_code?: CompanyMenuTenant_codeCompany_codeMenu_codeSub_menu_codeCompoundUniqueInput
    AND?: CompanyMenuWhereInput | CompanyMenuWhereInput[]
    OR?: CompanyMenuWhereInput[]
    NOT?: CompanyMenuWhereInput | CompanyMenuWhereInput[]
    menu_code?: StringFilter<"CompanyMenu"> | string
    tenant_code?: StringFilter<"CompanyMenu"> | string
    company_code?: StringFilter<"CompanyMenu"> | string
    sub_menu_code?: StringFilter<"CompanyMenu"> | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    user_menu?: UserMenuListRelationFilter
  }, "id" | "tenant_code_company_code_menu_code_sub_menu_code">

  export type CompanyMenuOrderByWithAggregationInput = {
    id?: SortOrder
    menu_code?: SortOrder
    tenant_code?: SortOrder
    company_code?: SortOrder
    sub_menu_code?: SortOrder
    _count?: CompanyMenuCountOrderByAggregateInput
    _avg?: CompanyMenuAvgOrderByAggregateInput
    _max?: CompanyMenuMaxOrderByAggregateInput
    _min?: CompanyMenuMinOrderByAggregateInput
    _sum?: CompanyMenuSumOrderByAggregateInput
  }

  export type CompanyMenuScalarWhereWithAggregatesInput = {
    AND?: CompanyMenuScalarWhereWithAggregatesInput | CompanyMenuScalarWhereWithAggregatesInput[]
    OR?: CompanyMenuScalarWhereWithAggregatesInput[]
    NOT?: CompanyMenuScalarWhereWithAggregatesInput | CompanyMenuScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CompanyMenu"> | number
    menu_code?: StringWithAggregatesFilter<"CompanyMenu"> | string
    tenant_code?: StringWithAggregatesFilter<"CompanyMenu"> | string
    company_code?: StringWithAggregatesFilter<"CompanyMenu"> | string
    sub_menu_code?: StringWithAggregatesFilter<"CompanyMenu"> | string
  }

  export type UserMenuWhereInput = {
    AND?: UserMenuWhereInput | UserMenuWhereInput[]
    OR?: UserMenuWhereInput[]
    NOT?: UserMenuWhereInput | UserMenuWhereInput[]
    id?: IntFilter<"UserMenu"> | number
    menu_code?: StringFilter<"UserMenu"> | string
    sub_menu_code?: StringFilter<"UserMenu"> | string
    company_code?: StringFilter<"UserMenu"> | string
    tenant_code?: StringFilter<"UserMenu"> | string
    division_code?: StringFilter<"UserMenu"> | string
    user_code?: StringFilter<"UserMenu"> | string
    status?: BoolFilter<"UserMenu"> | boolean
    createdAt?: DateTimeFilter<"UserMenu"> | Date | string
    updatedAt?: DateTimeFilter<"UserMenu"> | Date | string
    menu?: XOR<CompanyMenuRelationFilter, CompanyMenuWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserMenuOrderByWithRelationInput = {
    id?: SortOrder
    menu_code?: SortOrder
    sub_menu_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    menu?: CompanyMenuOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type UserMenuWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    menu_code_company_code_tenant_code_division_code_user_code_sub_menu_code?: UserMenuMenu_codeCompany_codeTenant_codeDivision_codeUser_codeSub_menu_codeCompoundUniqueInput
    AND?: UserMenuWhereInput | UserMenuWhereInput[]
    OR?: UserMenuWhereInput[]
    NOT?: UserMenuWhereInput | UserMenuWhereInput[]
    menu_code?: StringFilter<"UserMenu"> | string
    sub_menu_code?: StringFilter<"UserMenu"> | string
    company_code?: StringFilter<"UserMenu"> | string
    tenant_code?: StringFilter<"UserMenu"> | string
    division_code?: StringFilter<"UserMenu"> | string
    user_code?: StringFilter<"UserMenu"> | string
    status?: BoolFilter<"UserMenu"> | boolean
    createdAt?: DateTimeFilter<"UserMenu"> | Date | string
    updatedAt?: DateTimeFilter<"UserMenu"> | Date | string
    menu?: XOR<CompanyMenuRelationFilter, CompanyMenuWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "menu_code_company_code_tenant_code_division_code_user_code_sub_menu_code">

  export type UserMenuOrderByWithAggregationInput = {
    id?: SortOrder
    menu_code?: SortOrder
    sub_menu_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserMenuCountOrderByAggregateInput
    _avg?: UserMenuAvgOrderByAggregateInput
    _max?: UserMenuMaxOrderByAggregateInput
    _min?: UserMenuMinOrderByAggregateInput
    _sum?: UserMenuSumOrderByAggregateInput
  }

  export type UserMenuScalarWhereWithAggregatesInput = {
    AND?: UserMenuScalarWhereWithAggregatesInput | UserMenuScalarWhereWithAggregatesInput[]
    OR?: UserMenuScalarWhereWithAggregatesInput[]
    NOT?: UserMenuScalarWhereWithAggregatesInput | UserMenuScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserMenu"> | number
    menu_code?: StringWithAggregatesFilter<"UserMenu"> | string
    sub_menu_code?: StringWithAggregatesFilter<"UserMenu"> | string
    company_code?: StringWithAggregatesFilter<"UserMenu"> | string
    tenant_code?: StringWithAggregatesFilter<"UserMenu"> | string
    division_code?: StringWithAggregatesFilter<"UserMenu"> | string
    user_code?: StringWithAggregatesFilter<"UserMenu"> | string
    status?: BoolWithAggregatesFilter<"UserMenu"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserMenu"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserMenu"> | Date | string
  }

  export type UserMenuActionWhereInput = {
    AND?: UserMenuActionWhereInput | UserMenuActionWhereInput[]
    OR?: UserMenuActionWhereInput[]
    NOT?: UserMenuActionWhereInput | UserMenuActionWhereInput[]
    id?: IntFilter<"UserMenuAction"> | number
    sub_menu_code?: StringFilter<"UserMenuAction"> | string
    action_code?: StringFilter<"UserMenuAction"> | string
    company_code?: StringFilter<"UserMenuAction"> | string
    tenant_code?: StringFilter<"UserMenuAction"> | string
    division_code?: StringFilter<"UserMenuAction"> | string
    user_code?: StringFilter<"UserMenuAction"> | string
    status?: BoolFilter<"UserMenuAction"> | boolean
    createdAt?: DateTimeFilter<"UserMenuAction"> | Date | string
    updatedAt?: DateTimeFilter<"UserMenuAction"> | Date | string
    menu?: XOR<MasterMenuActionRelationFilter, MasterMenuActionWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserMenuActionOrderByWithRelationInput = {
    id?: SortOrder
    sub_menu_code?: SortOrder
    action_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    menu?: MasterMenuActionOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type UserMenuActionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sub_menu_code_action_code_company_code_tenant_code_division_code_user_code?: UserMenuActionSub_menu_codeAction_codeCompany_codeTenant_codeDivision_codeUser_codeCompoundUniqueInput
    AND?: UserMenuActionWhereInput | UserMenuActionWhereInput[]
    OR?: UserMenuActionWhereInput[]
    NOT?: UserMenuActionWhereInput | UserMenuActionWhereInput[]
    sub_menu_code?: StringFilter<"UserMenuAction"> | string
    action_code?: StringFilter<"UserMenuAction"> | string
    company_code?: StringFilter<"UserMenuAction"> | string
    tenant_code?: StringFilter<"UserMenuAction"> | string
    division_code?: StringFilter<"UserMenuAction"> | string
    user_code?: StringFilter<"UserMenuAction"> | string
    status?: BoolFilter<"UserMenuAction"> | boolean
    createdAt?: DateTimeFilter<"UserMenuAction"> | Date | string
    updatedAt?: DateTimeFilter<"UserMenuAction"> | Date | string
    menu?: XOR<MasterMenuActionRelationFilter, MasterMenuActionWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "sub_menu_code_action_code_company_code_tenant_code_division_code_user_code">

  export type UserMenuActionOrderByWithAggregationInput = {
    id?: SortOrder
    sub_menu_code?: SortOrder
    action_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserMenuActionCountOrderByAggregateInput
    _avg?: UserMenuActionAvgOrderByAggregateInput
    _max?: UserMenuActionMaxOrderByAggregateInput
    _min?: UserMenuActionMinOrderByAggregateInput
    _sum?: UserMenuActionSumOrderByAggregateInput
  }

  export type UserMenuActionScalarWhereWithAggregatesInput = {
    AND?: UserMenuActionScalarWhereWithAggregatesInput | UserMenuActionScalarWhereWithAggregatesInput[]
    OR?: UserMenuActionScalarWhereWithAggregatesInput[]
    NOT?: UserMenuActionScalarWhereWithAggregatesInput | UserMenuActionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserMenuAction"> | number
    sub_menu_code?: StringWithAggregatesFilter<"UserMenuAction"> | string
    action_code?: StringWithAggregatesFilter<"UserMenuAction"> | string
    company_code?: StringWithAggregatesFilter<"UserMenuAction"> | string
    tenant_code?: StringWithAggregatesFilter<"UserMenuAction"> | string
    division_code?: StringWithAggregatesFilter<"UserMenuAction"> | string
    user_code?: StringWithAggregatesFilter<"UserMenuAction"> | string
    status?: BoolWithAggregatesFilter<"UserMenuAction"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserMenuAction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserMenuAction"> | Date | string
  }

  export type TenantCreateInput = {
    tenant_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyCreateNestedManyWithoutTenantInput
    user?: UserCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateInput = {
    id?: number
    tenant_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyUncheckedCreateNestedManyWithoutTenantInput
    user?: UserUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantUpdateInput = {
    tenant_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUpdateManyWithoutTenantNestedInput
    user?: UserUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenant_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUncheckedUpdateManyWithoutTenantNestedInput
    user?: UserUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateManyInput = {
    id?: number
    tenant_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantUpdateManyMutationInput = {
    tenant_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenant_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateInput = {
    company_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCompaniesInput
    divisions?: DivisionCreateNestedManyWithoutCompanyInput
    user_history?: UserCompanyHistoryCreateNestedManyWithoutCompanyInput
    user?: UserCreateNestedManyWithoutCompanyInput
    attendance_location?: AttendanceLocationCreateNestedManyWithoutCompanyInput
    sift_type?: ShiftTypeCreateNestedManyWithoutCompanyInput
    menu?: CompanyMenuCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: number
    company_code: string
    name: string
    tenant_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    divisions?: DivisionUncheckedCreateNestedManyWithoutCompanyInput
    user_history?: UserCompanyHistoryUncheckedCreateNestedManyWithoutCompanyInput
    user?: UserUncheckedCreateNestedManyWithoutCompanyInput
    attendance_location?: AttendanceLocationUncheckedCreateNestedManyWithoutCompanyInput
    sift_type?: ShiftTypeUncheckedCreateNestedManyWithoutCompanyInput
    menu?: CompanyMenuUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    company_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCompaniesNestedInput
    divisions?: DivisionUpdateManyWithoutCompanyNestedInput
    user_history?: UserCompanyHistoryUpdateManyWithoutCompanyNestedInput
    user?: UserUpdateManyWithoutCompanyNestedInput
    attendance_location?: AttendanceLocationUpdateManyWithoutCompanyNestedInput
    sift_type?: ShiftTypeUpdateManyWithoutCompanyNestedInput
    menu?: CompanyMenuUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    divisions?: DivisionUncheckedUpdateManyWithoutCompanyNestedInput
    user_history?: UserCompanyHistoryUncheckedUpdateManyWithoutCompanyNestedInput
    user?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    attendance_location?: AttendanceLocationUncheckedUpdateManyWithoutCompanyNestedInput
    sift_type?: ShiftTypeUncheckedUpdateManyWithoutCompanyNestedInput
    menu?: CompanyMenuUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: number
    company_code: string
    name: string
    tenant_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUpdateManyMutationInput = {
    company_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DivisionCreateInput = {
    division_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutDivisionsInput
    user_history?: UserDivisionHistoryCreateNestedManyWithoutDivisionInput
    user?: UserCreateNestedManyWithoutDivisionInput
  }

  export type DivisionUncheckedCreateInput = {
    id?: number
    division_code: string
    name: string
    company_code: string
    tenant_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user_history?: UserDivisionHistoryUncheckedCreateNestedManyWithoutDivisionInput
    user?: UserUncheckedCreateNestedManyWithoutDivisionInput
  }

  export type DivisionUpdateInput = {
    division_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutDivisionsNestedInput
    user_history?: UserDivisionHistoryUpdateManyWithoutDivisionNestedInput
    user?: UserUpdateManyWithoutDivisionNestedInput
  }

  export type DivisionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    division_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_history?: UserDivisionHistoryUncheckedUpdateManyWithoutDivisionNestedInput
    user?: UserUncheckedUpdateManyWithoutDivisionNestedInput
  }

  export type DivisionCreateManyInput = {
    id?: number
    division_code: string
    name: string
    company_code: string
    tenant_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DivisionUpdateManyMutationInput = {
    division_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DivisionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    division_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryCreateNestedManyWithoutUserInput
    tenant: TenantCreateNestedOneWithoutUserInput
    company: CompanyCreateNestedOneWithoutUserInput
    division: DivisionCreateNestedOneWithoutUserInput
    attendances_location?: UserAttendanceLocationCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftCreateNestedManyWithoutUserInput
    userMenus?: UserMenuCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    tenant_code: string
    company_code: string
    division_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryUncheckedCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryUncheckedCreateNestedManyWithoutUserInput
    attendances_location?: UserAttendanceLocationUncheckedCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftUncheckedCreateNestedManyWithoutUserInput
    userMenus?: UserMenuUncheckedCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUpdateManyWithoutUserNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUserNestedInput
    company?: CompanyUpdateOneRequiredWithoutUserNestedInput
    division?: DivisionUpdateOneRequiredWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    tenant_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUncheckedUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUncheckedUpdateManyWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUncheckedUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUncheckedUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUncheckedUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    tenant_code: string
    company_code: string
    division_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    tenant_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCompanyHistoryCreateInput = {
    startDate: Date | string
    endDate?: Date | string | null
    user: UserCreateNestedOneWithoutCompany_historyInput
    company: CompanyCreateNestedOneWithoutUser_historyInput
  }

  export type UserCompanyHistoryUncheckedCreateInput = {
    id?: number
    user_code: string
    company_code: string
    division_code: string
    tenant_code: string
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type UserCompanyHistoryUpdateInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutCompany_historyNestedInput
    company?: CompanyUpdateOneRequiredWithoutUser_historyNestedInput
  }

  export type UserCompanyHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCompanyHistoryCreateManyInput = {
    id?: number
    user_code: string
    company_code: string
    division_code: string
    tenant_code: string
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type UserCompanyHistoryUpdateManyMutationInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCompanyHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserDivisionHistoryCreateInput = {
    startDate: Date | string
    endDate?: Date | string | null
    user: UserCreateNestedOneWithoutDivision_historyInput
    division: DivisionCreateNestedOneWithoutUser_historyInput
  }

  export type UserDivisionHistoryUncheckedCreateInput = {
    id?: number
    user_code: string
    division_code: string
    company_code: string
    tenant_code: string
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type UserDivisionHistoryUpdateInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutDivision_historyNestedInput
    division?: DivisionUpdateOneRequiredWithoutUser_historyNestedInput
  }

  export type UserDivisionHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserDivisionHistoryCreateManyInput = {
    id?: number
    user_code: string
    division_code: string
    company_code: string
    tenant_code: string
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type UserDivisionHistoryUpdateManyMutationInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserDivisionHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AttendanceLocationCreateInput = {
    attendance_location_code: string
    name: string
    lat: string
    lng: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user_attendance_location?: UserAttendanceLocationCreateNestedManyWithoutLocationInput
    company: CompanyCreateNestedOneWithoutAttendance_locationInput
  }

  export type AttendanceLocationUncheckedCreateInput = {
    id?: number
    company_code: string
    attendance_location_code: string
    tenant_code: string
    name: string
    lat: string
    lng: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user_attendance_location?: UserAttendanceLocationUncheckedCreateNestedManyWithoutLocationInput
  }

  export type AttendanceLocationUpdateInput = {
    attendance_location_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_attendance_location?: UserAttendanceLocationUpdateManyWithoutLocationNestedInput
    company?: CompanyUpdateOneRequiredWithoutAttendance_locationNestedInput
  }

  export type AttendanceLocationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    attendance_location_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_attendance_location?: UserAttendanceLocationUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type AttendanceLocationCreateManyInput = {
    id?: number
    company_code: string
    attendance_location_code: string
    tenant_code: string
    name: string
    lat: string
    lng: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceLocationUpdateManyMutationInput = {
    attendance_location_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceLocationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    attendance_location_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAttendanceLocationCreateInput = {
    name: string
    user_attendance_loaction_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAttendances_locationInput
    location: AttendanceLocationCreateNestedOneWithoutUser_attendance_locationInput
  }

  export type UserAttendanceLocationUncheckedCreateInput = {
    id?: number
    name: string
    user_attendance_loaction_code: string
    user_code: string
    company_code: string
    tenant_code: string
    division_code: string
    attendance_location_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAttendanceLocationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    user_attendance_loaction_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAttendances_locationNestedInput
    location?: AttendanceLocationUpdateOneRequiredWithoutUser_attendance_locationNestedInput
  }

  export type UserAttendanceLocationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    user_attendance_loaction_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    attendance_location_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAttendanceLocationCreateManyInput = {
    id?: number
    name: string
    user_attendance_loaction_code: string
    user_code: string
    company_code: string
    tenant_code: string
    division_code: string
    attendance_location_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAttendanceLocationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    user_attendance_loaction_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAttendanceLocationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    user_attendance_loaction_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    attendance_location_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAttendanceCreateInput = {
    status: string
    clockInLat?: string | null
    clockInLng?: string | null
    clockOutLat?: string | null
    clockOutLng?: string | null
    clockIn?: Date | string | null
    clockOut?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUser_attendanceInput
  }

  export type UserAttendanceUncheckedCreateInput = {
    id?: number
    status: string
    clockInLat?: string | null
    clockInLng?: string | null
    clockOutLat?: string | null
    clockOutLng?: string | null
    clockIn?: Date | string | null
    clockOut?: Date | string | null
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAttendanceUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    clockInLat?: NullableStringFieldUpdateOperationsInput | string | null
    clockInLng?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutLat?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutLng?: NullableStringFieldUpdateOperationsInput | string | null
    clockIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUser_attendanceNestedInput
  }

  export type UserAttendanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    clockInLat?: NullableStringFieldUpdateOperationsInput | string | null
    clockInLng?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutLat?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutLng?: NullableStringFieldUpdateOperationsInput | string | null
    clockIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAttendanceCreateManyInput = {
    id?: number
    status: string
    clockInLat?: string | null
    clockInLng?: string | null
    clockOutLat?: string | null
    clockOutLng?: string | null
    clockIn?: Date | string | null
    clockOut?: Date | string | null
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAttendanceUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    clockInLat?: NullableStringFieldUpdateOperationsInput | string | null
    clockInLng?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutLat?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutLng?: NullableStringFieldUpdateOperationsInput | string | null
    clockIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAttendanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    clockInLat?: NullableStringFieldUpdateOperationsInput | string | null
    clockInLng?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutLat?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutLng?: NullableStringFieldUpdateOperationsInput | string | null
    clockIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftTypeCreateInput = {
    name: string
    startTime: Date | string
    endTime: Date | string
    shift_code: string
    user_shifts?: UserShiftCreateNestedManyWithoutShiftInput
    company: CompanyCreateNestedOneWithoutSift_typeInput
  }

  export type ShiftTypeUncheckedCreateInput = {
    id?: number
    name: string
    startTime: Date | string
    endTime: Date | string
    company_code: string
    shift_code: string
    tenant_code: string
    user_shifts?: UserShiftUncheckedCreateNestedManyWithoutShiftInput
  }

  export type ShiftTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    shift_code?: StringFieldUpdateOperationsInput | string
    user_shifts?: UserShiftUpdateManyWithoutShiftNestedInput
    company?: CompanyUpdateOneRequiredWithoutSift_typeNestedInput
  }

  export type ShiftTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    company_code?: StringFieldUpdateOperationsInput | string
    shift_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    user_shifts?: UserShiftUncheckedUpdateManyWithoutShiftNestedInput
  }

  export type ShiftTypeCreateManyInput = {
    id?: number
    name: string
    startTime: Date | string
    endTime: Date | string
    company_code: string
    shift_code: string
    tenant_code: string
  }

  export type ShiftTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    shift_code?: StringFieldUpdateOperationsInput | string
  }

  export type ShiftTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    company_code?: StringFieldUpdateOperationsInput | string
    shift_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
  }

  export type UserShiftCreateInput = {
    date: Date | string
    user: UserCreateNestedOneWithoutUser_shiftsInput
    shift: ShiftTypeCreateNestedOneWithoutUser_shiftsInput
  }

  export type UserShiftUncheckedCreateInput = {
    id?: number
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    shift_code: string
    date: Date | string
  }

  export type UserShiftUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUser_shiftsNestedInput
    shift?: ShiftTypeUpdateOneRequiredWithoutUser_shiftsNestedInput
  }

  export type UserShiftUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    shift_code?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserShiftCreateManyInput = {
    id?: number
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    shift_code: string
    date: Date | string
  }

  export type UserShiftUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserShiftUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    shift_code?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleCreateInput = {
    role_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserRoleCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: number
    role_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    role_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserRoleUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: number
    role_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleUpdateManyMutationInput = {
    role_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRolesInput
    role: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserRoleUncheckedCreateInput = {
    id?: number
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    role_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRolesNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserRoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    role_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleCreateManyInput = {
    id?: number
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    role_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    role_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterMenuCreateInput = {
    menu_code: string
    name: string
    url: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sub_menu?: MasterSubMenuCreateNestedManyWithoutMenuInput
  }

  export type MasterMenuUncheckedCreateInput = {
    id?: number
    menu_code: string
    name: string
    url: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sub_menu?: MasterSubMenuUncheckedCreateNestedManyWithoutMenuInput
  }

  export type MasterMenuUpdateInput = {
    menu_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_menu?: MasterSubMenuUpdateManyWithoutMenuNestedInput
  }

  export type MasterMenuUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    menu_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_menu?: MasterSubMenuUncheckedUpdateManyWithoutMenuNestedInput
  }

  export type MasterMenuCreateManyInput = {
    id?: number
    menu_code: string
    name: string
    url: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MasterMenuUpdateManyMutationInput = {
    menu_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterMenuUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    menu_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterSubMenuCreateInput = {
    sub_menu_code: string
    name: string
    url: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    menu: MasterMenuCreateNestedOneWithoutSub_menuInput
    actions?: MasterMenuActionCreateNestedManyWithoutSub_menuInput
  }

  export type MasterSubMenuUncheckedCreateInput = {
    id?: number
    sub_menu_code: string
    menu_code: string
    name: string
    url: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    actions?: MasterMenuActionUncheckedCreateNestedManyWithoutSub_menuInput
  }

  export type MasterSubMenuUpdateInput = {
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menu?: MasterMenuUpdateOneRequiredWithoutSub_menuNestedInput
    actions?: MasterMenuActionUpdateManyWithoutSub_menuNestedInput
  }

  export type MasterSubMenuUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    menu_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actions?: MasterMenuActionUncheckedUpdateManyWithoutSub_menuNestedInput
  }

  export type MasterSubMenuCreateManyInput = {
    id?: number
    sub_menu_code: string
    menu_code: string
    name: string
    url: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MasterSubMenuUpdateManyMutationInput = {
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterSubMenuUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    menu_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterMenuActionCreateInput = {
    action_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserMenuActionCreateNestedManyWithoutMenuInput
    sub_menu: MasterSubMenuCreateNestedOneWithoutActionsInput
  }

  export type MasterMenuActionUncheckedCreateInput = {
    id?: number
    sub_menu_code: string
    menu_code: string
    action_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserMenuActionUncheckedCreateNestedManyWithoutMenuInput
  }

  export type MasterMenuActionUpdateInput = {
    action_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserMenuActionUpdateManyWithoutMenuNestedInput
    sub_menu?: MasterSubMenuUpdateOneRequiredWithoutActionsNestedInput
  }

  export type MasterMenuActionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    menu_code?: StringFieldUpdateOperationsInput | string
    action_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserMenuActionUncheckedUpdateManyWithoutMenuNestedInput
  }

  export type MasterMenuActionCreateManyInput = {
    id?: number
    sub_menu_code: string
    menu_code: string
    action_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MasterMenuActionUpdateManyMutationInput = {
    action_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterMenuActionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    menu_code?: StringFieldUpdateOperationsInput | string
    action_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyMenuCreateInput = {
    menu_code: string
    sub_menu_code: string
    company: CompanyCreateNestedOneWithoutMenuInput
    user_menu?: UserMenuCreateNestedManyWithoutMenuInput
  }

  export type CompanyMenuUncheckedCreateInput = {
    id?: number
    menu_code: string
    tenant_code: string
    company_code: string
    sub_menu_code: string
    user_menu?: UserMenuUncheckedCreateNestedManyWithoutMenuInput
  }

  export type CompanyMenuUpdateInput = {
    menu_code?: StringFieldUpdateOperationsInput | string
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    company?: CompanyUpdateOneRequiredWithoutMenuNestedInput
    user_menu?: UserMenuUpdateManyWithoutMenuNestedInput
  }

  export type CompanyMenuUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    menu_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    user_menu?: UserMenuUncheckedUpdateManyWithoutMenuNestedInput
  }

  export type CompanyMenuCreateManyInput = {
    id?: number
    menu_code: string
    tenant_code: string
    company_code: string
    sub_menu_code: string
  }

  export type CompanyMenuUpdateManyMutationInput = {
    menu_code?: StringFieldUpdateOperationsInput | string
    sub_menu_code?: StringFieldUpdateOperationsInput | string
  }

  export type CompanyMenuUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    menu_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    sub_menu_code?: StringFieldUpdateOperationsInput | string
  }

  export type UserMenuCreateInput = {
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    menu: CompanyMenuCreateNestedOneWithoutUser_menuInput
    user: UserCreateNestedOneWithoutUserMenusInput
  }

  export type UserMenuUncheckedCreateInput = {
    id?: number
    menu_code: string
    sub_menu_code: string
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMenuUpdateInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menu?: CompanyMenuUpdateOneRequiredWithoutUser_menuNestedInput
    user?: UserUpdateOneRequiredWithoutUserMenusNestedInput
  }

  export type UserMenuUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    menu_code?: StringFieldUpdateOperationsInput | string
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMenuCreateManyInput = {
    id?: number
    menu_code: string
    sub_menu_code: string
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMenuUpdateManyMutationInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMenuUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    menu_code?: StringFieldUpdateOperationsInput | string
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMenuActionCreateInput = {
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    menu: MasterMenuActionCreateNestedOneWithoutUsersInput
    user: UserCreateNestedOneWithoutUserMenuActionInput
  }

  export type UserMenuActionUncheckedCreateInput = {
    id?: number
    sub_menu_code: string
    action_code: string
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMenuActionUpdateInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menu?: MasterMenuActionUpdateOneRequiredWithoutUsersNestedInput
    user?: UserUpdateOneRequiredWithoutUserMenuActionNestedInput
  }

  export type UserMenuActionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    action_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMenuActionCreateManyInput = {
    id?: number
    sub_menu_code: string
    action_code: string
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMenuActionUpdateManyMutationInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMenuActionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    action_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CompanyListRelationFilter = {
    every?: CompanyWhereInput
    some?: CompanyWhereInput
    none?: CompanyWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type CompanyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TenantCountOrderByAggregateInput = {
    id?: SortOrder
    tenant_code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TenantMaxOrderByAggregateInput = {
    id?: SortOrder
    tenant_code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantMinOrderByAggregateInput = {
    id?: SortOrder
    tenant_code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type TenantRelationFilter = {
    is?: TenantWhereInput
    isNot?: TenantWhereInput
  }

  export type DivisionListRelationFilter = {
    every?: DivisionWhereInput
    some?: DivisionWhereInput
    none?: DivisionWhereInput
  }

  export type UserCompanyHistoryListRelationFilter = {
    every?: UserCompanyHistoryWhereInput
    some?: UserCompanyHistoryWhereInput
    none?: UserCompanyHistoryWhereInput
  }

  export type AttendanceLocationListRelationFilter = {
    every?: AttendanceLocationWhereInput
    some?: AttendanceLocationWhereInput
    none?: AttendanceLocationWhereInput
  }

  export type ShiftTypeListRelationFilter = {
    every?: ShiftTypeWhereInput
    some?: ShiftTypeWhereInput
    none?: ShiftTypeWhereInput
  }

  export type CompanyMenuListRelationFilter = {
    every?: CompanyMenuWhereInput
    some?: CompanyMenuWhereInput
    none?: CompanyMenuWhereInput
  }

  export type DivisionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCompanyHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttendanceLocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShiftTypeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyMenuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyTenant_codeCompany_codeCompoundUniqueInput = {
    tenant_code: string
    company_code: string
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    company_code?: SortOrder
    name?: SortOrder
    tenant_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    company_code?: SortOrder
    name?: SortOrder
    tenant_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    company_code?: SortOrder
    name?: SortOrder
    tenant_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CompanyRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type UserDivisionHistoryListRelationFilter = {
    every?: UserDivisionHistoryWhereInput
    some?: UserDivisionHistoryWhereInput
    none?: UserDivisionHistoryWhereInput
  }

  export type UserDivisionHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DivisionTenant_codeCompany_codeDivision_codeCompoundUniqueInput = {
    tenant_code: string
    company_code: string
    division_code: string
  }

  export type DivisionCountOrderByAggregateInput = {
    id?: SortOrder
    division_code?: SortOrder
    name?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DivisionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DivisionMaxOrderByAggregateInput = {
    id?: SortOrder
    division_code?: SortOrder
    name?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DivisionMinOrderByAggregateInput = {
    id?: SortOrder
    division_code?: SortOrder
    name?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DivisionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumEmployeeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeStatus | EnumEmployeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeStatus[] | ListEnumEmployeeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmployeeStatus[] | ListEnumEmployeeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmployeeStatusFilter<$PrismaModel> | $Enums.EmployeeStatus
  }

  export type DivisionRelationFilter = {
    is?: DivisionWhereInput
    isNot?: DivisionWhereInput
  }

  export type UserAttendanceLocationListRelationFilter = {
    every?: UserAttendanceLocationWhereInput
    some?: UserAttendanceLocationWhereInput
    none?: UserAttendanceLocationWhereInput
  }

  export type UserAttendanceListRelationFilter = {
    every?: UserAttendanceWhereInput
    some?: UserAttendanceWhereInput
    none?: UserAttendanceWhereInput
  }

  export type UserRoleListRelationFilter = {
    every?: UserRoleWhereInput
    some?: UserRoleWhereInput
    none?: UserRoleWhereInput
  }

  export type UserShiftListRelationFilter = {
    every?: UserShiftWhereInput
    some?: UserShiftWhereInput
    none?: UserShiftWhereInput
  }

  export type UserMenuListRelationFilter = {
    every?: UserMenuWhereInput
    some?: UserMenuWhereInput
    none?: UserMenuWhereInput
  }

  export type UserMenuActionListRelationFilter = {
    every?: UserMenuActionWhereInput
    some?: UserMenuActionWhereInput
    none?: UserMenuActionWhereInput
  }

  export type UserAttendanceLocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserAttendanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserRoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserShiftOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserMenuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserMenuActionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserTenant_codeCompany_codeDivision_codeUser_codeCompoundUniqueInput = {
    tenant_code: string
    company_code: string
    division_code: string
    user_code: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    user_code?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    status?: SortOrder
    tenant_code?: SortOrder
    company_code?: SortOrder
    division_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    user_code?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    status?: SortOrder
    tenant_code?: SortOrder
    company_code?: SortOrder
    division_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    user_code?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    status?: SortOrder
    tenant_code?: SortOrder
    company_code?: SortOrder
    division_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumEmployeeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeStatus | EnumEmployeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeStatus[] | ListEnumEmployeeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmployeeStatus[] | ListEnumEmployeeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmployeeStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmployeeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmployeeStatusFilter<$PrismaModel>
    _max?: NestedEnumEmployeeStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCompanyHistoryUser_codeTenant_codeCompany_codeStartDateCompoundUniqueInput = {
    user_code: string
    tenant_code: string
    company_code: string
    startDate: Date | string
  }

  export type UserCompanyHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    user_code?: SortOrder
    company_code?: SortOrder
    division_code?: SortOrder
    tenant_code?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type UserCompanyHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserCompanyHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    user_code?: SortOrder
    company_code?: SortOrder
    division_code?: SortOrder
    tenant_code?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type UserCompanyHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    user_code?: SortOrder
    company_code?: SortOrder
    division_code?: SortOrder
    tenant_code?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type UserCompanyHistorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserDivisionHistoryUser_codeTenant_codeDivision_codeCompany_codeStartDateCompoundUniqueInput = {
    user_code: string
    tenant_code: string
    division_code: string
    company_code: string
    startDate: Date | string
  }

  export type UserDivisionHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    user_code?: SortOrder
    division_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type UserDivisionHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserDivisionHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    user_code?: SortOrder
    division_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type UserDivisionHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    user_code?: SortOrder
    division_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type UserDivisionHistorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AttendanceLocationTenant_codeCompany_codeAttendance_location_codeCompoundUniqueInput = {
    tenant_code: string
    company_code: string
    attendance_location_code: string
  }

  export type AttendanceLocationCountOrderByAggregateInput = {
    id?: SortOrder
    company_code?: SortOrder
    attendance_location_code?: SortOrder
    tenant_code?: SortOrder
    name?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttendanceLocationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AttendanceLocationMaxOrderByAggregateInput = {
    id?: SortOrder
    company_code?: SortOrder
    attendance_location_code?: SortOrder
    tenant_code?: SortOrder
    name?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttendanceLocationMinOrderByAggregateInput = {
    id?: SortOrder
    company_code?: SortOrder
    attendance_location_code?: SortOrder
    tenant_code?: SortOrder
    name?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttendanceLocationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AttendanceLocationRelationFilter = {
    is?: AttendanceLocationWhereInput
    isNot?: AttendanceLocationWhereInput
  }

  export type UserAttendanceLocationTenant_codeCompany_codeUser_attendance_loaction_codeUser_codeDivision_codeCompoundUniqueInput = {
    tenant_code: string
    company_code: string
    user_attendance_loaction_code: string
    user_code: string
    division_code: string
  }

  export type UserAttendanceLocationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    user_attendance_loaction_code?: SortOrder
    user_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    attendance_location_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAttendanceLocationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserAttendanceLocationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    user_attendance_loaction_code?: SortOrder
    user_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    attendance_location_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAttendanceLocationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    user_attendance_loaction_code?: SortOrder
    user_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    attendance_location_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAttendanceLocationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserAttendanceTenant_codeCompany_codeCreatedAtClockInLatUser_codeDivision_codeCompoundUniqueInput = {
    tenant_code: string
    company_code: string
    createdAt: Date | string
    clockInLat: string
    user_code: string
    division_code: string
  }

  export type UserAttendanceCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    clockInLat?: SortOrder
    clockInLng?: SortOrder
    clockOutLat?: SortOrder
    clockOutLng?: SortOrder
    clockIn?: SortOrder
    clockOut?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAttendanceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserAttendanceMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    clockInLat?: SortOrder
    clockInLng?: SortOrder
    clockOutLat?: SortOrder
    clockOutLng?: SortOrder
    clockIn?: SortOrder
    clockOut?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAttendanceMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    clockInLat?: SortOrder
    clockInLng?: SortOrder
    clockOutLat?: SortOrder
    clockOutLng?: SortOrder
    clockIn?: SortOrder
    clockOut?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAttendanceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ShiftTypeTenant_codeCompany_codeShift_codeCompoundUniqueInput = {
    tenant_code: string
    company_code: string
    shift_code: string
  }

  export type ShiftTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    company_code?: SortOrder
    shift_code?: SortOrder
    tenant_code?: SortOrder
  }

  export type ShiftTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ShiftTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    company_code?: SortOrder
    shift_code?: SortOrder
    tenant_code?: SortOrder
  }

  export type ShiftTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    company_code?: SortOrder
    shift_code?: SortOrder
    tenant_code?: SortOrder
  }

  export type ShiftTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ShiftTypeRelationFilter = {
    is?: ShiftTypeWhereInput
    isNot?: ShiftTypeWhereInput
  }

  export type UserShiftShift_codeTenant_codeCompany_codeDivision_codeUser_codeCompoundUniqueInput = {
    shift_code: string
    tenant_code: string
    company_code: string
    division_code: string
    user_code: string
  }

  export type UserShiftCountOrderByAggregateInput = {
    id?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    shift_code?: SortOrder
    date?: SortOrder
  }

  export type UserShiftAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserShiftMaxOrderByAggregateInput = {
    id?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    shift_code?: SortOrder
    date?: SortOrder
  }

  export type UserShiftMinOrderByAggregateInput = {
    id?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    shift_code?: SortOrder
    date?: SortOrder
  }

  export type UserShiftSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    role_code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    role_code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    role_code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoleRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type UserRoleTenant_codeCompany_codeUser_codeRole_codeCompoundUniqueInput = {
    tenant_code: string
    company_code: string
    user_code: string
    role_code: string
  }

  export type UserRoleCountOrderByAggregateInput = {
    id?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    role_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRoleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRoleMaxOrderByAggregateInput = {
    id?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    role_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRoleMinOrderByAggregateInput = {
    id?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    role_code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRoleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MasterSubMenuListRelationFilter = {
    every?: MasterSubMenuWhereInput
    some?: MasterSubMenuWhereInput
    none?: MasterSubMenuWhereInput
  }

  export type MasterSubMenuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MasterMenuCountOrderByAggregateInput = {
    id?: SortOrder
    menu_code?: SortOrder
    name?: SortOrder
    url?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MasterMenuAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MasterMenuMaxOrderByAggregateInput = {
    id?: SortOrder
    menu_code?: SortOrder
    name?: SortOrder
    url?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MasterMenuMinOrderByAggregateInput = {
    id?: SortOrder
    menu_code?: SortOrder
    name?: SortOrder
    url?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MasterMenuSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MasterMenuRelationFilter = {
    is?: MasterMenuWhereInput
    isNot?: MasterMenuWhereInput
  }

  export type MasterMenuActionListRelationFilter = {
    every?: MasterMenuActionWhereInput
    some?: MasterMenuActionWhereInput
    none?: MasterMenuActionWhereInput
  }

  export type MasterMenuActionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MasterSubMenuSub_menu_codeMenu_codeCompoundUniqueInput = {
    sub_menu_code: string
    menu_code: string
  }

  export type MasterSubMenuCountOrderByAggregateInput = {
    id?: SortOrder
    sub_menu_code?: SortOrder
    menu_code?: SortOrder
    name?: SortOrder
    url?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MasterSubMenuAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MasterSubMenuMaxOrderByAggregateInput = {
    id?: SortOrder
    sub_menu_code?: SortOrder
    menu_code?: SortOrder
    name?: SortOrder
    url?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MasterSubMenuMinOrderByAggregateInput = {
    id?: SortOrder
    sub_menu_code?: SortOrder
    menu_code?: SortOrder
    name?: SortOrder
    url?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MasterSubMenuSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MasterSubMenuRelationFilter = {
    is?: MasterSubMenuWhereInput
    isNot?: MasterSubMenuWhereInput
  }

  export type MasterMenuActionSub_menu_codeAction_codeCompoundUniqueInput = {
    sub_menu_code: string
    action_code: string
  }

  export type MasterMenuActionCountOrderByAggregateInput = {
    id?: SortOrder
    sub_menu_code?: SortOrder
    menu_code?: SortOrder
    action_code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MasterMenuActionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MasterMenuActionMaxOrderByAggregateInput = {
    id?: SortOrder
    sub_menu_code?: SortOrder
    menu_code?: SortOrder
    action_code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MasterMenuActionMinOrderByAggregateInput = {
    id?: SortOrder
    sub_menu_code?: SortOrder
    menu_code?: SortOrder
    action_code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MasterMenuActionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CompanyMenuTenant_codeCompany_codeMenu_codeSub_menu_codeCompoundUniqueInput = {
    tenant_code: string
    company_code: string
    menu_code: string
    sub_menu_code: string
  }

  export type CompanyMenuCountOrderByAggregateInput = {
    id?: SortOrder
    menu_code?: SortOrder
    tenant_code?: SortOrder
    company_code?: SortOrder
    sub_menu_code?: SortOrder
  }

  export type CompanyMenuAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CompanyMenuMaxOrderByAggregateInput = {
    id?: SortOrder
    menu_code?: SortOrder
    tenant_code?: SortOrder
    company_code?: SortOrder
    sub_menu_code?: SortOrder
  }

  export type CompanyMenuMinOrderByAggregateInput = {
    id?: SortOrder
    menu_code?: SortOrder
    tenant_code?: SortOrder
    company_code?: SortOrder
    sub_menu_code?: SortOrder
  }

  export type CompanyMenuSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CompanyMenuRelationFilter = {
    is?: CompanyMenuWhereInput
    isNot?: CompanyMenuWhereInput
  }

  export type UserMenuMenu_codeCompany_codeTenant_codeDivision_codeUser_codeSub_menu_codeCompoundUniqueInput = {
    menu_code: string
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    sub_menu_code: string
  }

  export type UserMenuCountOrderByAggregateInput = {
    id?: SortOrder
    menu_code?: SortOrder
    sub_menu_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMenuAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMenuMaxOrderByAggregateInput = {
    id?: SortOrder
    menu_code?: SortOrder
    sub_menu_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMenuMinOrderByAggregateInput = {
    id?: SortOrder
    menu_code?: SortOrder
    sub_menu_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMenuSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type MasterMenuActionRelationFilter = {
    is?: MasterMenuActionWhereInput
    isNot?: MasterMenuActionWhereInput
  }

  export type UserMenuActionSub_menu_codeAction_codeCompany_codeTenant_codeDivision_codeUser_codeCompoundUniqueInput = {
    sub_menu_code: string
    action_code: string
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
  }

  export type UserMenuActionCountOrderByAggregateInput = {
    id?: SortOrder
    sub_menu_code?: SortOrder
    action_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMenuActionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMenuActionMaxOrderByAggregateInput = {
    id?: SortOrder
    sub_menu_code?: SortOrder
    action_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMenuActionMinOrderByAggregateInput = {
    id?: SortOrder
    sub_menu_code?: SortOrder
    action_code?: SortOrder
    company_code?: SortOrder
    tenant_code?: SortOrder
    division_code?: SortOrder
    user_code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMenuActionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CompanyCreateNestedManyWithoutTenantInput = {
    create?: XOR<CompanyCreateWithoutTenantInput, CompanyUncheckedCreateWithoutTenantInput> | CompanyCreateWithoutTenantInput[] | CompanyUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutTenantInput | CompanyCreateOrConnectWithoutTenantInput[]
    createMany?: CompanyCreateManyTenantInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutTenantInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CompanyUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<CompanyCreateWithoutTenantInput, CompanyUncheckedCreateWithoutTenantInput> | CompanyCreateWithoutTenantInput[] | CompanyUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutTenantInput | CompanyCreateOrConnectWithoutTenantInput[]
    createMany?: CompanyCreateManyTenantInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CompanyUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CompanyCreateWithoutTenantInput, CompanyUncheckedCreateWithoutTenantInput> | CompanyCreateWithoutTenantInput[] | CompanyUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutTenantInput | CompanyCreateOrConnectWithoutTenantInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutTenantInput | CompanyUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CompanyCreateManyTenantInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutTenantInput | CompanyUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutTenantInput | CompanyUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type UserUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTenantInput | UserUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTenantInput | UserUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTenantInput | UserUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CompanyUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CompanyCreateWithoutTenantInput, CompanyUncheckedCreateWithoutTenantInput> | CompanyCreateWithoutTenantInput[] | CompanyUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutTenantInput | CompanyCreateOrConnectWithoutTenantInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutTenantInput | CompanyUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CompanyCreateManyTenantInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutTenantInput | CompanyUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutTenantInput | CompanyUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTenantInput | UserUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTenantInput | UserUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTenantInput | UserUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TenantCreateNestedOneWithoutCompaniesInput = {
    create?: XOR<TenantCreateWithoutCompaniesInput, TenantUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCompaniesInput
    connect?: TenantWhereUniqueInput
  }

  export type DivisionCreateNestedManyWithoutCompanyInput = {
    create?: XOR<DivisionCreateWithoutCompanyInput, DivisionUncheckedCreateWithoutCompanyInput> | DivisionCreateWithoutCompanyInput[] | DivisionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DivisionCreateOrConnectWithoutCompanyInput | DivisionCreateOrConnectWithoutCompanyInput[]
    createMany?: DivisionCreateManyCompanyInputEnvelope
    connect?: DivisionWhereUniqueInput | DivisionWhereUniqueInput[]
  }

  export type UserCompanyHistoryCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCompanyHistoryCreateWithoutCompanyInput, UserCompanyHistoryUncheckedCreateWithoutCompanyInput> | UserCompanyHistoryCreateWithoutCompanyInput[] | UserCompanyHistoryUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCompanyHistoryCreateOrConnectWithoutCompanyInput | UserCompanyHistoryCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCompanyHistoryCreateManyCompanyInputEnvelope
    connect?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AttendanceLocationCreateNestedManyWithoutCompanyInput = {
    create?: XOR<AttendanceLocationCreateWithoutCompanyInput, AttendanceLocationUncheckedCreateWithoutCompanyInput> | AttendanceLocationCreateWithoutCompanyInput[] | AttendanceLocationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AttendanceLocationCreateOrConnectWithoutCompanyInput | AttendanceLocationCreateOrConnectWithoutCompanyInput[]
    createMany?: AttendanceLocationCreateManyCompanyInputEnvelope
    connect?: AttendanceLocationWhereUniqueInput | AttendanceLocationWhereUniqueInput[]
  }

  export type ShiftTypeCreateNestedManyWithoutCompanyInput = {
    create?: XOR<ShiftTypeCreateWithoutCompanyInput, ShiftTypeUncheckedCreateWithoutCompanyInput> | ShiftTypeCreateWithoutCompanyInput[] | ShiftTypeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ShiftTypeCreateOrConnectWithoutCompanyInput | ShiftTypeCreateOrConnectWithoutCompanyInput[]
    createMany?: ShiftTypeCreateManyCompanyInputEnvelope
    connect?: ShiftTypeWhereUniqueInput | ShiftTypeWhereUniqueInput[]
  }

  export type CompanyMenuCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyMenuCreateWithoutCompanyInput, CompanyMenuUncheckedCreateWithoutCompanyInput> | CompanyMenuCreateWithoutCompanyInput[] | CompanyMenuUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyMenuCreateOrConnectWithoutCompanyInput | CompanyMenuCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyMenuCreateManyCompanyInputEnvelope
    connect?: CompanyMenuWhereUniqueInput | CompanyMenuWhereUniqueInput[]
  }

  export type DivisionUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<DivisionCreateWithoutCompanyInput, DivisionUncheckedCreateWithoutCompanyInput> | DivisionCreateWithoutCompanyInput[] | DivisionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DivisionCreateOrConnectWithoutCompanyInput | DivisionCreateOrConnectWithoutCompanyInput[]
    createMany?: DivisionCreateManyCompanyInputEnvelope
    connect?: DivisionWhereUniqueInput | DivisionWhereUniqueInput[]
  }

  export type UserCompanyHistoryUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCompanyHistoryCreateWithoutCompanyInput, UserCompanyHistoryUncheckedCreateWithoutCompanyInput> | UserCompanyHistoryCreateWithoutCompanyInput[] | UserCompanyHistoryUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCompanyHistoryCreateOrConnectWithoutCompanyInput | UserCompanyHistoryCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCompanyHistoryCreateManyCompanyInputEnvelope
    connect?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AttendanceLocationUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<AttendanceLocationCreateWithoutCompanyInput, AttendanceLocationUncheckedCreateWithoutCompanyInput> | AttendanceLocationCreateWithoutCompanyInput[] | AttendanceLocationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AttendanceLocationCreateOrConnectWithoutCompanyInput | AttendanceLocationCreateOrConnectWithoutCompanyInput[]
    createMany?: AttendanceLocationCreateManyCompanyInputEnvelope
    connect?: AttendanceLocationWhereUniqueInput | AttendanceLocationWhereUniqueInput[]
  }

  export type ShiftTypeUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<ShiftTypeCreateWithoutCompanyInput, ShiftTypeUncheckedCreateWithoutCompanyInput> | ShiftTypeCreateWithoutCompanyInput[] | ShiftTypeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ShiftTypeCreateOrConnectWithoutCompanyInput | ShiftTypeCreateOrConnectWithoutCompanyInput[]
    createMany?: ShiftTypeCreateManyCompanyInputEnvelope
    connect?: ShiftTypeWhereUniqueInput | ShiftTypeWhereUniqueInput[]
  }

  export type CompanyMenuUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyMenuCreateWithoutCompanyInput, CompanyMenuUncheckedCreateWithoutCompanyInput> | CompanyMenuCreateWithoutCompanyInput[] | CompanyMenuUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyMenuCreateOrConnectWithoutCompanyInput | CompanyMenuCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyMenuCreateManyCompanyInputEnvelope
    connect?: CompanyMenuWhereUniqueInput | CompanyMenuWhereUniqueInput[]
  }

  export type TenantUpdateOneRequiredWithoutCompaniesNestedInput = {
    create?: XOR<TenantCreateWithoutCompaniesInput, TenantUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCompaniesInput
    upsert?: TenantUpsertWithoutCompaniesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutCompaniesInput, TenantUpdateWithoutCompaniesInput>, TenantUncheckedUpdateWithoutCompaniesInput>
  }

  export type DivisionUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<DivisionCreateWithoutCompanyInput, DivisionUncheckedCreateWithoutCompanyInput> | DivisionCreateWithoutCompanyInput[] | DivisionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DivisionCreateOrConnectWithoutCompanyInput | DivisionCreateOrConnectWithoutCompanyInput[]
    upsert?: DivisionUpsertWithWhereUniqueWithoutCompanyInput | DivisionUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: DivisionCreateManyCompanyInputEnvelope
    set?: DivisionWhereUniqueInput | DivisionWhereUniqueInput[]
    disconnect?: DivisionWhereUniqueInput | DivisionWhereUniqueInput[]
    delete?: DivisionWhereUniqueInput | DivisionWhereUniqueInput[]
    connect?: DivisionWhereUniqueInput | DivisionWhereUniqueInput[]
    update?: DivisionUpdateWithWhereUniqueWithoutCompanyInput | DivisionUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: DivisionUpdateManyWithWhereWithoutCompanyInput | DivisionUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: DivisionScalarWhereInput | DivisionScalarWhereInput[]
  }

  export type UserCompanyHistoryUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCompanyHistoryCreateWithoutCompanyInput, UserCompanyHistoryUncheckedCreateWithoutCompanyInput> | UserCompanyHistoryCreateWithoutCompanyInput[] | UserCompanyHistoryUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCompanyHistoryCreateOrConnectWithoutCompanyInput | UserCompanyHistoryCreateOrConnectWithoutCompanyInput[]
    upsert?: UserCompanyHistoryUpsertWithWhereUniqueWithoutCompanyInput | UserCompanyHistoryUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCompanyHistoryCreateManyCompanyInputEnvelope
    set?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
    disconnect?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
    delete?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
    connect?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
    update?: UserCompanyHistoryUpdateWithWhereUniqueWithoutCompanyInput | UserCompanyHistoryUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserCompanyHistoryUpdateManyWithWhereWithoutCompanyInput | UserCompanyHistoryUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserCompanyHistoryScalarWhereInput | UserCompanyHistoryScalarWhereInput[]
  }

  export type UserUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCompanyInput | UserUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCompanyInput | UserUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCompanyInput | UserUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AttendanceLocationUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<AttendanceLocationCreateWithoutCompanyInput, AttendanceLocationUncheckedCreateWithoutCompanyInput> | AttendanceLocationCreateWithoutCompanyInput[] | AttendanceLocationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AttendanceLocationCreateOrConnectWithoutCompanyInput | AttendanceLocationCreateOrConnectWithoutCompanyInput[]
    upsert?: AttendanceLocationUpsertWithWhereUniqueWithoutCompanyInput | AttendanceLocationUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: AttendanceLocationCreateManyCompanyInputEnvelope
    set?: AttendanceLocationWhereUniqueInput | AttendanceLocationWhereUniqueInput[]
    disconnect?: AttendanceLocationWhereUniqueInput | AttendanceLocationWhereUniqueInput[]
    delete?: AttendanceLocationWhereUniqueInput | AttendanceLocationWhereUniqueInput[]
    connect?: AttendanceLocationWhereUniqueInput | AttendanceLocationWhereUniqueInput[]
    update?: AttendanceLocationUpdateWithWhereUniqueWithoutCompanyInput | AttendanceLocationUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: AttendanceLocationUpdateManyWithWhereWithoutCompanyInput | AttendanceLocationUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: AttendanceLocationScalarWhereInput | AttendanceLocationScalarWhereInput[]
  }

  export type ShiftTypeUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<ShiftTypeCreateWithoutCompanyInput, ShiftTypeUncheckedCreateWithoutCompanyInput> | ShiftTypeCreateWithoutCompanyInput[] | ShiftTypeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ShiftTypeCreateOrConnectWithoutCompanyInput | ShiftTypeCreateOrConnectWithoutCompanyInput[]
    upsert?: ShiftTypeUpsertWithWhereUniqueWithoutCompanyInput | ShiftTypeUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: ShiftTypeCreateManyCompanyInputEnvelope
    set?: ShiftTypeWhereUniqueInput | ShiftTypeWhereUniqueInput[]
    disconnect?: ShiftTypeWhereUniqueInput | ShiftTypeWhereUniqueInput[]
    delete?: ShiftTypeWhereUniqueInput | ShiftTypeWhereUniqueInput[]
    connect?: ShiftTypeWhereUniqueInput | ShiftTypeWhereUniqueInput[]
    update?: ShiftTypeUpdateWithWhereUniqueWithoutCompanyInput | ShiftTypeUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: ShiftTypeUpdateManyWithWhereWithoutCompanyInput | ShiftTypeUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: ShiftTypeScalarWhereInput | ShiftTypeScalarWhereInput[]
  }

  export type CompanyMenuUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyMenuCreateWithoutCompanyInput, CompanyMenuUncheckedCreateWithoutCompanyInput> | CompanyMenuCreateWithoutCompanyInput[] | CompanyMenuUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyMenuCreateOrConnectWithoutCompanyInput | CompanyMenuCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyMenuUpsertWithWhereUniqueWithoutCompanyInput | CompanyMenuUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyMenuCreateManyCompanyInputEnvelope
    set?: CompanyMenuWhereUniqueInput | CompanyMenuWhereUniqueInput[]
    disconnect?: CompanyMenuWhereUniqueInput | CompanyMenuWhereUniqueInput[]
    delete?: CompanyMenuWhereUniqueInput | CompanyMenuWhereUniqueInput[]
    connect?: CompanyMenuWhereUniqueInput | CompanyMenuWhereUniqueInput[]
    update?: CompanyMenuUpdateWithWhereUniqueWithoutCompanyInput | CompanyMenuUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyMenuUpdateManyWithWhereWithoutCompanyInput | CompanyMenuUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyMenuScalarWhereInput | CompanyMenuScalarWhereInput[]
  }

  export type DivisionUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<DivisionCreateWithoutCompanyInput, DivisionUncheckedCreateWithoutCompanyInput> | DivisionCreateWithoutCompanyInput[] | DivisionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DivisionCreateOrConnectWithoutCompanyInput | DivisionCreateOrConnectWithoutCompanyInput[]
    upsert?: DivisionUpsertWithWhereUniqueWithoutCompanyInput | DivisionUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: DivisionCreateManyCompanyInputEnvelope
    set?: DivisionWhereUniqueInput | DivisionWhereUniqueInput[]
    disconnect?: DivisionWhereUniqueInput | DivisionWhereUniqueInput[]
    delete?: DivisionWhereUniqueInput | DivisionWhereUniqueInput[]
    connect?: DivisionWhereUniqueInput | DivisionWhereUniqueInput[]
    update?: DivisionUpdateWithWhereUniqueWithoutCompanyInput | DivisionUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: DivisionUpdateManyWithWhereWithoutCompanyInput | DivisionUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: DivisionScalarWhereInput | DivisionScalarWhereInput[]
  }

  export type UserCompanyHistoryUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCompanyHistoryCreateWithoutCompanyInput, UserCompanyHistoryUncheckedCreateWithoutCompanyInput> | UserCompanyHistoryCreateWithoutCompanyInput[] | UserCompanyHistoryUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCompanyHistoryCreateOrConnectWithoutCompanyInput | UserCompanyHistoryCreateOrConnectWithoutCompanyInput[]
    upsert?: UserCompanyHistoryUpsertWithWhereUniqueWithoutCompanyInput | UserCompanyHistoryUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCompanyHistoryCreateManyCompanyInputEnvelope
    set?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
    disconnect?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
    delete?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
    connect?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
    update?: UserCompanyHistoryUpdateWithWhereUniqueWithoutCompanyInput | UserCompanyHistoryUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserCompanyHistoryUpdateManyWithWhereWithoutCompanyInput | UserCompanyHistoryUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserCompanyHistoryScalarWhereInput | UserCompanyHistoryScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCompanyInput | UserUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCompanyInput | UserUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCompanyInput | UserUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AttendanceLocationUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<AttendanceLocationCreateWithoutCompanyInput, AttendanceLocationUncheckedCreateWithoutCompanyInput> | AttendanceLocationCreateWithoutCompanyInput[] | AttendanceLocationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AttendanceLocationCreateOrConnectWithoutCompanyInput | AttendanceLocationCreateOrConnectWithoutCompanyInput[]
    upsert?: AttendanceLocationUpsertWithWhereUniqueWithoutCompanyInput | AttendanceLocationUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: AttendanceLocationCreateManyCompanyInputEnvelope
    set?: AttendanceLocationWhereUniqueInput | AttendanceLocationWhereUniqueInput[]
    disconnect?: AttendanceLocationWhereUniqueInput | AttendanceLocationWhereUniqueInput[]
    delete?: AttendanceLocationWhereUniqueInput | AttendanceLocationWhereUniqueInput[]
    connect?: AttendanceLocationWhereUniqueInput | AttendanceLocationWhereUniqueInput[]
    update?: AttendanceLocationUpdateWithWhereUniqueWithoutCompanyInput | AttendanceLocationUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: AttendanceLocationUpdateManyWithWhereWithoutCompanyInput | AttendanceLocationUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: AttendanceLocationScalarWhereInput | AttendanceLocationScalarWhereInput[]
  }

  export type ShiftTypeUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<ShiftTypeCreateWithoutCompanyInput, ShiftTypeUncheckedCreateWithoutCompanyInput> | ShiftTypeCreateWithoutCompanyInput[] | ShiftTypeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ShiftTypeCreateOrConnectWithoutCompanyInput | ShiftTypeCreateOrConnectWithoutCompanyInput[]
    upsert?: ShiftTypeUpsertWithWhereUniqueWithoutCompanyInput | ShiftTypeUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: ShiftTypeCreateManyCompanyInputEnvelope
    set?: ShiftTypeWhereUniqueInput | ShiftTypeWhereUniqueInput[]
    disconnect?: ShiftTypeWhereUniqueInput | ShiftTypeWhereUniqueInput[]
    delete?: ShiftTypeWhereUniqueInput | ShiftTypeWhereUniqueInput[]
    connect?: ShiftTypeWhereUniqueInput | ShiftTypeWhereUniqueInput[]
    update?: ShiftTypeUpdateWithWhereUniqueWithoutCompanyInput | ShiftTypeUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: ShiftTypeUpdateManyWithWhereWithoutCompanyInput | ShiftTypeUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: ShiftTypeScalarWhereInput | ShiftTypeScalarWhereInput[]
  }

  export type CompanyMenuUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyMenuCreateWithoutCompanyInput, CompanyMenuUncheckedCreateWithoutCompanyInput> | CompanyMenuCreateWithoutCompanyInput[] | CompanyMenuUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyMenuCreateOrConnectWithoutCompanyInput | CompanyMenuCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyMenuUpsertWithWhereUniqueWithoutCompanyInput | CompanyMenuUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyMenuCreateManyCompanyInputEnvelope
    set?: CompanyMenuWhereUniqueInput | CompanyMenuWhereUniqueInput[]
    disconnect?: CompanyMenuWhereUniqueInput | CompanyMenuWhereUniqueInput[]
    delete?: CompanyMenuWhereUniqueInput | CompanyMenuWhereUniqueInput[]
    connect?: CompanyMenuWhereUniqueInput | CompanyMenuWhereUniqueInput[]
    update?: CompanyMenuUpdateWithWhereUniqueWithoutCompanyInput | CompanyMenuUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyMenuUpdateManyWithWhereWithoutCompanyInput | CompanyMenuUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyMenuScalarWhereInput | CompanyMenuScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutDivisionsInput = {
    create?: XOR<CompanyCreateWithoutDivisionsInput, CompanyUncheckedCreateWithoutDivisionsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutDivisionsInput
    connect?: CompanyWhereUniqueInput
  }

  export type UserDivisionHistoryCreateNestedManyWithoutDivisionInput = {
    create?: XOR<UserDivisionHistoryCreateWithoutDivisionInput, UserDivisionHistoryUncheckedCreateWithoutDivisionInput> | UserDivisionHistoryCreateWithoutDivisionInput[] | UserDivisionHistoryUncheckedCreateWithoutDivisionInput[]
    connectOrCreate?: UserDivisionHistoryCreateOrConnectWithoutDivisionInput | UserDivisionHistoryCreateOrConnectWithoutDivisionInput[]
    createMany?: UserDivisionHistoryCreateManyDivisionInputEnvelope
    connect?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutDivisionInput = {
    create?: XOR<UserCreateWithoutDivisionInput, UserUncheckedCreateWithoutDivisionInput> | UserCreateWithoutDivisionInput[] | UserUncheckedCreateWithoutDivisionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDivisionInput | UserCreateOrConnectWithoutDivisionInput[]
    createMany?: UserCreateManyDivisionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserDivisionHistoryUncheckedCreateNestedManyWithoutDivisionInput = {
    create?: XOR<UserDivisionHistoryCreateWithoutDivisionInput, UserDivisionHistoryUncheckedCreateWithoutDivisionInput> | UserDivisionHistoryCreateWithoutDivisionInput[] | UserDivisionHistoryUncheckedCreateWithoutDivisionInput[]
    connectOrCreate?: UserDivisionHistoryCreateOrConnectWithoutDivisionInput | UserDivisionHistoryCreateOrConnectWithoutDivisionInput[]
    createMany?: UserDivisionHistoryCreateManyDivisionInputEnvelope
    connect?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutDivisionInput = {
    create?: XOR<UserCreateWithoutDivisionInput, UserUncheckedCreateWithoutDivisionInput> | UserCreateWithoutDivisionInput[] | UserUncheckedCreateWithoutDivisionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDivisionInput | UserCreateOrConnectWithoutDivisionInput[]
    createMany?: UserCreateManyDivisionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CompanyUpdateOneRequiredWithoutDivisionsNestedInput = {
    create?: XOR<CompanyCreateWithoutDivisionsInput, CompanyUncheckedCreateWithoutDivisionsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutDivisionsInput
    upsert?: CompanyUpsertWithoutDivisionsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutDivisionsInput, CompanyUpdateWithoutDivisionsInput>, CompanyUncheckedUpdateWithoutDivisionsInput>
  }

  export type UserDivisionHistoryUpdateManyWithoutDivisionNestedInput = {
    create?: XOR<UserDivisionHistoryCreateWithoutDivisionInput, UserDivisionHistoryUncheckedCreateWithoutDivisionInput> | UserDivisionHistoryCreateWithoutDivisionInput[] | UserDivisionHistoryUncheckedCreateWithoutDivisionInput[]
    connectOrCreate?: UserDivisionHistoryCreateOrConnectWithoutDivisionInput | UserDivisionHistoryCreateOrConnectWithoutDivisionInput[]
    upsert?: UserDivisionHistoryUpsertWithWhereUniqueWithoutDivisionInput | UserDivisionHistoryUpsertWithWhereUniqueWithoutDivisionInput[]
    createMany?: UserDivisionHistoryCreateManyDivisionInputEnvelope
    set?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
    disconnect?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
    delete?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
    connect?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
    update?: UserDivisionHistoryUpdateWithWhereUniqueWithoutDivisionInput | UserDivisionHistoryUpdateWithWhereUniqueWithoutDivisionInput[]
    updateMany?: UserDivisionHistoryUpdateManyWithWhereWithoutDivisionInput | UserDivisionHistoryUpdateManyWithWhereWithoutDivisionInput[]
    deleteMany?: UserDivisionHistoryScalarWhereInput | UserDivisionHistoryScalarWhereInput[]
  }

  export type UserUpdateManyWithoutDivisionNestedInput = {
    create?: XOR<UserCreateWithoutDivisionInput, UserUncheckedCreateWithoutDivisionInput> | UserCreateWithoutDivisionInput[] | UserUncheckedCreateWithoutDivisionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDivisionInput | UserCreateOrConnectWithoutDivisionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDivisionInput | UserUpsertWithWhereUniqueWithoutDivisionInput[]
    createMany?: UserCreateManyDivisionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDivisionInput | UserUpdateWithWhereUniqueWithoutDivisionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDivisionInput | UserUpdateManyWithWhereWithoutDivisionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserDivisionHistoryUncheckedUpdateManyWithoutDivisionNestedInput = {
    create?: XOR<UserDivisionHistoryCreateWithoutDivisionInput, UserDivisionHistoryUncheckedCreateWithoutDivisionInput> | UserDivisionHistoryCreateWithoutDivisionInput[] | UserDivisionHistoryUncheckedCreateWithoutDivisionInput[]
    connectOrCreate?: UserDivisionHistoryCreateOrConnectWithoutDivisionInput | UserDivisionHistoryCreateOrConnectWithoutDivisionInput[]
    upsert?: UserDivisionHistoryUpsertWithWhereUniqueWithoutDivisionInput | UserDivisionHistoryUpsertWithWhereUniqueWithoutDivisionInput[]
    createMany?: UserDivisionHistoryCreateManyDivisionInputEnvelope
    set?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
    disconnect?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
    delete?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
    connect?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
    update?: UserDivisionHistoryUpdateWithWhereUniqueWithoutDivisionInput | UserDivisionHistoryUpdateWithWhereUniqueWithoutDivisionInput[]
    updateMany?: UserDivisionHistoryUpdateManyWithWhereWithoutDivisionInput | UserDivisionHistoryUpdateManyWithWhereWithoutDivisionInput[]
    deleteMany?: UserDivisionHistoryScalarWhereInput | UserDivisionHistoryScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutDivisionNestedInput = {
    create?: XOR<UserCreateWithoutDivisionInput, UserUncheckedCreateWithoutDivisionInput> | UserCreateWithoutDivisionInput[] | UserUncheckedCreateWithoutDivisionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDivisionInput | UserCreateOrConnectWithoutDivisionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDivisionInput | UserUpsertWithWhereUniqueWithoutDivisionInput[]
    createMany?: UserCreateManyDivisionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDivisionInput | UserUpdateWithWhereUniqueWithoutDivisionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDivisionInput | UserUpdateManyWithWhereWithoutDivisionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCompanyHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCompanyHistoryCreateWithoutUserInput, UserCompanyHistoryUncheckedCreateWithoutUserInput> | UserCompanyHistoryCreateWithoutUserInput[] | UserCompanyHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCompanyHistoryCreateOrConnectWithoutUserInput | UserCompanyHistoryCreateOrConnectWithoutUserInput[]
    createMany?: UserCompanyHistoryCreateManyUserInputEnvelope
    connect?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
  }

  export type UserDivisionHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<UserDivisionHistoryCreateWithoutUserInput, UserDivisionHistoryUncheckedCreateWithoutUserInput> | UserDivisionHistoryCreateWithoutUserInput[] | UserDivisionHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserDivisionHistoryCreateOrConnectWithoutUserInput | UserDivisionHistoryCreateOrConnectWithoutUserInput[]
    createMany?: UserDivisionHistoryCreateManyUserInputEnvelope
    connect?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
  }

  export type TenantCreateNestedOneWithoutUserInput = {
    create?: XOR<TenantCreateWithoutUserInput, TenantUncheckedCreateWithoutUserInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUserInput
    connect?: TenantWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutUserInput = {
    create?: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUserInput
    connect?: CompanyWhereUniqueInput
  }

  export type DivisionCreateNestedOneWithoutUserInput = {
    create?: XOR<DivisionCreateWithoutUserInput, DivisionUncheckedCreateWithoutUserInput>
    connectOrCreate?: DivisionCreateOrConnectWithoutUserInput
    connect?: DivisionWhereUniqueInput
  }

  export type UserAttendanceLocationCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAttendanceLocationCreateWithoutUserInput, UserAttendanceLocationUncheckedCreateWithoutUserInput> | UserAttendanceLocationCreateWithoutUserInput[] | UserAttendanceLocationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAttendanceLocationCreateOrConnectWithoutUserInput | UserAttendanceLocationCreateOrConnectWithoutUserInput[]
    createMany?: UserAttendanceLocationCreateManyUserInputEnvelope
    connect?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
  }

  export type UserAttendanceCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAttendanceCreateWithoutUserInput, UserAttendanceUncheckedCreateWithoutUserInput> | UserAttendanceCreateWithoutUserInput[] | UserAttendanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAttendanceCreateOrConnectWithoutUserInput | UserAttendanceCreateOrConnectWithoutUserInput[]
    createMany?: UserAttendanceCreateManyUserInputEnvelope
    connect?: UserAttendanceWhereUniqueInput | UserAttendanceWhereUniqueInput[]
  }

  export type UserRoleCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type UserShiftCreateNestedManyWithoutUserInput = {
    create?: XOR<UserShiftCreateWithoutUserInput, UserShiftUncheckedCreateWithoutUserInput> | UserShiftCreateWithoutUserInput[] | UserShiftUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserShiftCreateOrConnectWithoutUserInput | UserShiftCreateOrConnectWithoutUserInput[]
    createMany?: UserShiftCreateManyUserInputEnvelope
    connect?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
  }

  export type UserMenuCreateNestedManyWithoutUserInput = {
    create?: XOR<UserMenuCreateWithoutUserInput, UserMenuUncheckedCreateWithoutUserInput> | UserMenuCreateWithoutUserInput[] | UserMenuUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMenuCreateOrConnectWithoutUserInput | UserMenuCreateOrConnectWithoutUserInput[]
    createMany?: UserMenuCreateManyUserInputEnvelope
    connect?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
  }

  export type UserMenuActionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserMenuActionCreateWithoutUserInput, UserMenuActionUncheckedCreateWithoutUserInput> | UserMenuActionCreateWithoutUserInput[] | UserMenuActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMenuActionCreateOrConnectWithoutUserInput | UserMenuActionCreateOrConnectWithoutUserInput[]
    createMany?: UserMenuActionCreateManyUserInputEnvelope
    connect?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
  }

  export type UserCompanyHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCompanyHistoryCreateWithoutUserInput, UserCompanyHistoryUncheckedCreateWithoutUserInput> | UserCompanyHistoryCreateWithoutUserInput[] | UserCompanyHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCompanyHistoryCreateOrConnectWithoutUserInput | UserCompanyHistoryCreateOrConnectWithoutUserInput[]
    createMany?: UserCompanyHistoryCreateManyUserInputEnvelope
    connect?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
  }

  export type UserDivisionHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserDivisionHistoryCreateWithoutUserInput, UserDivisionHistoryUncheckedCreateWithoutUserInput> | UserDivisionHistoryCreateWithoutUserInput[] | UserDivisionHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserDivisionHistoryCreateOrConnectWithoutUserInput | UserDivisionHistoryCreateOrConnectWithoutUserInput[]
    createMany?: UserDivisionHistoryCreateManyUserInputEnvelope
    connect?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
  }

  export type UserAttendanceLocationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAttendanceLocationCreateWithoutUserInput, UserAttendanceLocationUncheckedCreateWithoutUserInput> | UserAttendanceLocationCreateWithoutUserInput[] | UserAttendanceLocationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAttendanceLocationCreateOrConnectWithoutUserInput | UserAttendanceLocationCreateOrConnectWithoutUserInput[]
    createMany?: UserAttendanceLocationCreateManyUserInputEnvelope
    connect?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
  }

  export type UserAttendanceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAttendanceCreateWithoutUserInput, UserAttendanceUncheckedCreateWithoutUserInput> | UserAttendanceCreateWithoutUserInput[] | UserAttendanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAttendanceCreateOrConnectWithoutUserInput | UserAttendanceCreateOrConnectWithoutUserInput[]
    createMany?: UserAttendanceCreateManyUserInputEnvelope
    connect?: UserAttendanceWhereUniqueInput | UserAttendanceWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type UserShiftUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserShiftCreateWithoutUserInput, UserShiftUncheckedCreateWithoutUserInput> | UserShiftCreateWithoutUserInput[] | UserShiftUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserShiftCreateOrConnectWithoutUserInput | UserShiftCreateOrConnectWithoutUserInput[]
    createMany?: UserShiftCreateManyUserInputEnvelope
    connect?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
  }

  export type UserMenuUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserMenuCreateWithoutUserInput, UserMenuUncheckedCreateWithoutUserInput> | UserMenuCreateWithoutUserInput[] | UserMenuUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMenuCreateOrConnectWithoutUserInput | UserMenuCreateOrConnectWithoutUserInput[]
    createMany?: UserMenuCreateManyUserInputEnvelope
    connect?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
  }

  export type UserMenuActionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserMenuActionCreateWithoutUserInput, UserMenuActionUncheckedCreateWithoutUserInput> | UserMenuActionCreateWithoutUserInput[] | UserMenuActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMenuActionCreateOrConnectWithoutUserInput | UserMenuActionCreateOrConnectWithoutUserInput[]
    createMany?: UserMenuActionCreateManyUserInputEnvelope
    connect?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
  }

  export type EnumEmployeeStatusFieldUpdateOperationsInput = {
    set?: $Enums.EmployeeStatus
  }

  export type UserCompanyHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCompanyHistoryCreateWithoutUserInput, UserCompanyHistoryUncheckedCreateWithoutUserInput> | UserCompanyHistoryCreateWithoutUserInput[] | UserCompanyHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCompanyHistoryCreateOrConnectWithoutUserInput | UserCompanyHistoryCreateOrConnectWithoutUserInput[]
    upsert?: UserCompanyHistoryUpsertWithWhereUniqueWithoutUserInput | UserCompanyHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCompanyHistoryCreateManyUserInputEnvelope
    set?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
    disconnect?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
    delete?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
    connect?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
    update?: UserCompanyHistoryUpdateWithWhereUniqueWithoutUserInput | UserCompanyHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCompanyHistoryUpdateManyWithWhereWithoutUserInput | UserCompanyHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCompanyHistoryScalarWhereInput | UserCompanyHistoryScalarWhereInput[]
  }

  export type UserDivisionHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserDivisionHistoryCreateWithoutUserInput, UserDivisionHistoryUncheckedCreateWithoutUserInput> | UserDivisionHistoryCreateWithoutUserInput[] | UserDivisionHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserDivisionHistoryCreateOrConnectWithoutUserInput | UserDivisionHistoryCreateOrConnectWithoutUserInput[]
    upsert?: UserDivisionHistoryUpsertWithWhereUniqueWithoutUserInput | UserDivisionHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserDivisionHistoryCreateManyUserInputEnvelope
    set?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
    disconnect?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
    delete?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
    connect?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
    update?: UserDivisionHistoryUpdateWithWhereUniqueWithoutUserInput | UserDivisionHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserDivisionHistoryUpdateManyWithWhereWithoutUserInput | UserDivisionHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserDivisionHistoryScalarWhereInput | UserDivisionHistoryScalarWhereInput[]
  }

  export type TenantUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<TenantCreateWithoutUserInput, TenantUncheckedCreateWithoutUserInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUserInput
    upsert?: TenantUpsertWithoutUserInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutUserInput, TenantUpdateWithoutUserInput>, TenantUncheckedUpdateWithoutUserInput>
  }

  export type CompanyUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUserInput
    upsert?: CompanyUpsertWithoutUserInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutUserInput, CompanyUpdateWithoutUserInput>, CompanyUncheckedUpdateWithoutUserInput>
  }

  export type DivisionUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<DivisionCreateWithoutUserInput, DivisionUncheckedCreateWithoutUserInput>
    connectOrCreate?: DivisionCreateOrConnectWithoutUserInput
    upsert?: DivisionUpsertWithoutUserInput
    connect?: DivisionWhereUniqueInput
    update?: XOR<XOR<DivisionUpdateToOneWithWhereWithoutUserInput, DivisionUpdateWithoutUserInput>, DivisionUncheckedUpdateWithoutUserInput>
  }

  export type UserAttendanceLocationUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAttendanceLocationCreateWithoutUserInput, UserAttendanceLocationUncheckedCreateWithoutUserInput> | UserAttendanceLocationCreateWithoutUserInput[] | UserAttendanceLocationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAttendanceLocationCreateOrConnectWithoutUserInput | UserAttendanceLocationCreateOrConnectWithoutUserInput[]
    upsert?: UserAttendanceLocationUpsertWithWhereUniqueWithoutUserInput | UserAttendanceLocationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAttendanceLocationCreateManyUserInputEnvelope
    set?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
    disconnect?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
    delete?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
    connect?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
    update?: UserAttendanceLocationUpdateWithWhereUniqueWithoutUserInput | UserAttendanceLocationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAttendanceLocationUpdateManyWithWhereWithoutUserInput | UserAttendanceLocationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAttendanceLocationScalarWhereInput | UserAttendanceLocationScalarWhereInput[]
  }

  export type UserAttendanceUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAttendanceCreateWithoutUserInput, UserAttendanceUncheckedCreateWithoutUserInput> | UserAttendanceCreateWithoutUserInput[] | UserAttendanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAttendanceCreateOrConnectWithoutUserInput | UserAttendanceCreateOrConnectWithoutUserInput[]
    upsert?: UserAttendanceUpsertWithWhereUniqueWithoutUserInput | UserAttendanceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAttendanceCreateManyUserInputEnvelope
    set?: UserAttendanceWhereUniqueInput | UserAttendanceWhereUniqueInput[]
    disconnect?: UserAttendanceWhereUniqueInput | UserAttendanceWhereUniqueInput[]
    delete?: UserAttendanceWhereUniqueInput | UserAttendanceWhereUniqueInput[]
    connect?: UserAttendanceWhereUniqueInput | UserAttendanceWhereUniqueInput[]
    update?: UserAttendanceUpdateWithWhereUniqueWithoutUserInput | UserAttendanceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAttendanceUpdateManyWithWhereWithoutUserInput | UserAttendanceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAttendanceScalarWhereInput | UserAttendanceScalarWhereInput[]
  }

  export type UserRoleUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type UserShiftUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserShiftCreateWithoutUserInput, UserShiftUncheckedCreateWithoutUserInput> | UserShiftCreateWithoutUserInput[] | UserShiftUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserShiftCreateOrConnectWithoutUserInput | UserShiftCreateOrConnectWithoutUserInput[]
    upsert?: UserShiftUpsertWithWhereUniqueWithoutUserInput | UserShiftUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserShiftCreateManyUserInputEnvelope
    set?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
    disconnect?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
    delete?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
    connect?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
    update?: UserShiftUpdateWithWhereUniqueWithoutUserInput | UserShiftUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserShiftUpdateManyWithWhereWithoutUserInput | UserShiftUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserShiftScalarWhereInput | UserShiftScalarWhereInput[]
  }

  export type UserMenuUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserMenuCreateWithoutUserInput, UserMenuUncheckedCreateWithoutUserInput> | UserMenuCreateWithoutUserInput[] | UserMenuUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMenuCreateOrConnectWithoutUserInput | UserMenuCreateOrConnectWithoutUserInput[]
    upsert?: UserMenuUpsertWithWhereUniqueWithoutUserInput | UserMenuUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserMenuCreateManyUserInputEnvelope
    set?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
    disconnect?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
    delete?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
    connect?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
    update?: UserMenuUpdateWithWhereUniqueWithoutUserInput | UserMenuUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserMenuUpdateManyWithWhereWithoutUserInput | UserMenuUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserMenuScalarWhereInput | UserMenuScalarWhereInput[]
  }

  export type UserMenuActionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserMenuActionCreateWithoutUserInput, UserMenuActionUncheckedCreateWithoutUserInput> | UserMenuActionCreateWithoutUserInput[] | UserMenuActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMenuActionCreateOrConnectWithoutUserInput | UserMenuActionCreateOrConnectWithoutUserInput[]
    upsert?: UserMenuActionUpsertWithWhereUniqueWithoutUserInput | UserMenuActionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserMenuActionCreateManyUserInputEnvelope
    set?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
    disconnect?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
    delete?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
    connect?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
    update?: UserMenuActionUpdateWithWhereUniqueWithoutUserInput | UserMenuActionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserMenuActionUpdateManyWithWhereWithoutUserInput | UserMenuActionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserMenuActionScalarWhereInput | UserMenuActionScalarWhereInput[]
  }

  export type UserCompanyHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCompanyHistoryCreateWithoutUserInput, UserCompanyHistoryUncheckedCreateWithoutUserInput> | UserCompanyHistoryCreateWithoutUserInput[] | UserCompanyHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCompanyHistoryCreateOrConnectWithoutUserInput | UserCompanyHistoryCreateOrConnectWithoutUserInput[]
    upsert?: UserCompanyHistoryUpsertWithWhereUniqueWithoutUserInput | UserCompanyHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCompanyHistoryCreateManyUserInputEnvelope
    set?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
    disconnect?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
    delete?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
    connect?: UserCompanyHistoryWhereUniqueInput | UserCompanyHistoryWhereUniqueInput[]
    update?: UserCompanyHistoryUpdateWithWhereUniqueWithoutUserInput | UserCompanyHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCompanyHistoryUpdateManyWithWhereWithoutUserInput | UserCompanyHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCompanyHistoryScalarWhereInput | UserCompanyHistoryScalarWhereInput[]
  }

  export type UserDivisionHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserDivisionHistoryCreateWithoutUserInput, UserDivisionHistoryUncheckedCreateWithoutUserInput> | UserDivisionHistoryCreateWithoutUserInput[] | UserDivisionHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserDivisionHistoryCreateOrConnectWithoutUserInput | UserDivisionHistoryCreateOrConnectWithoutUserInput[]
    upsert?: UserDivisionHistoryUpsertWithWhereUniqueWithoutUserInput | UserDivisionHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserDivisionHistoryCreateManyUserInputEnvelope
    set?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
    disconnect?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
    delete?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
    connect?: UserDivisionHistoryWhereUniqueInput | UserDivisionHistoryWhereUniqueInput[]
    update?: UserDivisionHistoryUpdateWithWhereUniqueWithoutUserInput | UserDivisionHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserDivisionHistoryUpdateManyWithWhereWithoutUserInput | UserDivisionHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserDivisionHistoryScalarWhereInput | UserDivisionHistoryScalarWhereInput[]
  }

  export type UserAttendanceLocationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAttendanceLocationCreateWithoutUserInput, UserAttendanceLocationUncheckedCreateWithoutUserInput> | UserAttendanceLocationCreateWithoutUserInput[] | UserAttendanceLocationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAttendanceLocationCreateOrConnectWithoutUserInput | UserAttendanceLocationCreateOrConnectWithoutUserInput[]
    upsert?: UserAttendanceLocationUpsertWithWhereUniqueWithoutUserInput | UserAttendanceLocationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAttendanceLocationCreateManyUserInputEnvelope
    set?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
    disconnect?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
    delete?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
    connect?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
    update?: UserAttendanceLocationUpdateWithWhereUniqueWithoutUserInput | UserAttendanceLocationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAttendanceLocationUpdateManyWithWhereWithoutUserInput | UserAttendanceLocationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAttendanceLocationScalarWhereInput | UserAttendanceLocationScalarWhereInput[]
  }

  export type UserAttendanceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAttendanceCreateWithoutUserInput, UserAttendanceUncheckedCreateWithoutUserInput> | UserAttendanceCreateWithoutUserInput[] | UserAttendanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAttendanceCreateOrConnectWithoutUserInput | UserAttendanceCreateOrConnectWithoutUserInput[]
    upsert?: UserAttendanceUpsertWithWhereUniqueWithoutUserInput | UserAttendanceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAttendanceCreateManyUserInputEnvelope
    set?: UserAttendanceWhereUniqueInput | UserAttendanceWhereUniqueInput[]
    disconnect?: UserAttendanceWhereUniqueInput | UserAttendanceWhereUniqueInput[]
    delete?: UserAttendanceWhereUniqueInput | UserAttendanceWhereUniqueInput[]
    connect?: UserAttendanceWhereUniqueInput | UserAttendanceWhereUniqueInput[]
    update?: UserAttendanceUpdateWithWhereUniqueWithoutUserInput | UserAttendanceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAttendanceUpdateManyWithWhereWithoutUserInput | UserAttendanceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAttendanceScalarWhereInput | UserAttendanceScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type UserShiftUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserShiftCreateWithoutUserInput, UserShiftUncheckedCreateWithoutUserInput> | UserShiftCreateWithoutUserInput[] | UserShiftUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserShiftCreateOrConnectWithoutUserInput | UserShiftCreateOrConnectWithoutUserInput[]
    upsert?: UserShiftUpsertWithWhereUniqueWithoutUserInput | UserShiftUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserShiftCreateManyUserInputEnvelope
    set?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
    disconnect?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
    delete?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
    connect?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
    update?: UserShiftUpdateWithWhereUniqueWithoutUserInput | UserShiftUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserShiftUpdateManyWithWhereWithoutUserInput | UserShiftUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserShiftScalarWhereInput | UserShiftScalarWhereInput[]
  }

  export type UserMenuUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserMenuCreateWithoutUserInput, UserMenuUncheckedCreateWithoutUserInput> | UserMenuCreateWithoutUserInput[] | UserMenuUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMenuCreateOrConnectWithoutUserInput | UserMenuCreateOrConnectWithoutUserInput[]
    upsert?: UserMenuUpsertWithWhereUniqueWithoutUserInput | UserMenuUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserMenuCreateManyUserInputEnvelope
    set?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
    disconnect?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
    delete?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
    connect?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
    update?: UserMenuUpdateWithWhereUniqueWithoutUserInput | UserMenuUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserMenuUpdateManyWithWhereWithoutUserInput | UserMenuUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserMenuScalarWhereInput | UserMenuScalarWhereInput[]
  }

  export type UserMenuActionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserMenuActionCreateWithoutUserInput, UserMenuActionUncheckedCreateWithoutUserInput> | UserMenuActionCreateWithoutUserInput[] | UserMenuActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMenuActionCreateOrConnectWithoutUserInput | UserMenuActionCreateOrConnectWithoutUserInput[]
    upsert?: UserMenuActionUpsertWithWhereUniqueWithoutUserInput | UserMenuActionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserMenuActionCreateManyUserInputEnvelope
    set?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
    disconnect?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
    delete?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
    connect?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
    update?: UserMenuActionUpdateWithWhereUniqueWithoutUserInput | UserMenuActionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserMenuActionUpdateManyWithWhereWithoutUserInput | UserMenuActionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserMenuActionScalarWhereInput | UserMenuActionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCompany_historyInput = {
    create?: XOR<UserCreateWithoutCompany_historyInput, UserUncheckedCreateWithoutCompany_historyInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompany_historyInput
    connect?: UserWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutUser_historyInput = {
    create?: XOR<CompanyCreateWithoutUser_historyInput, CompanyUncheckedCreateWithoutUser_historyInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUser_historyInput
    connect?: CompanyWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutCompany_historyNestedInput = {
    create?: XOR<UserCreateWithoutCompany_historyInput, UserUncheckedCreateWithoutCompany_historyInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompany_historyInput
    upsert?: UserUpsertWithoutCompany_historyInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCompany_historyInput, UserUpdateWithoutCompany_historyInput>, UserUncheckedUpdateWithoutCompany_historyInput>
  }

  export type CompanyUpdateOneRequiredWithoutUser_historyNestedInput = {
    create?: XOR<CompanyCreateWithoutUser_historyInput, CompanyUncheckedCreateWithoutUser_historyInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUser_historyInput
    upsert?: CompanyUpsertWithoutUser_historyInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutUser_historyInput, CompanyUpdateWithoutUser_historyInput>, CompanyUncheckedUpdateWithoutUser_historyInput>
  }

  export type UserCreateNestedOneWithoutDivision_historyInput = {
    create?: XOR<UserCreateWithoutDivision_historyInput, UserUncheckedCreateWithoutDivision_historyInput>
    connectOrCreate?: UserCreateOrConnectWithoutDivision_historyInput
    connect?: UserWhereUniqueInput
  }

  export type DivisionCreateNestedOneWithoutUser_historyInput = {
    create?: XOR<DivisionCreateWithoutUser_historyInput, DivisionUncheckedCreateWithoutUser_historyInput>
    connectOrCreate?: DivisionCreateOrConnectWithoutUser_historyInput
    connect?: DivisionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDivision_historyNestedInput = {
    create?: XOR<UserCreateWithoutDivision_historyInput, UserUncheckedCreateWithoutDivision_historyInput>
    connectOrCreate?: UserCreateOrConnectWithoutDivision_historyInput
    upsert?: UserUpsertWithoutDivision_historyInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDivision_historyInput, UserUpdateWithoutDivision_historyInput>, UserUncheckedUpdateWithoutDivision_historyInput>
  }

  export type DivisionUpdateOneRequiredWithoutUser_historyNestedInput = {
    create?: XOR<DivisionCreateWithoutUser_historyInput, DivisionUncheckedCreateWithoutUser_historyInput>
    connectOrCreate?: DivisionCreateOrConnectWithoutUser_historyInput
    upsert?: DivisionUpsertWithoutUser_historyInput
    connect?: DivisionWhereUniqueInput
    update?: XOR<XOR<DivisionUpdateToOneWithWhereWithoutUser_historyInput, DivisionUpdateWithoutUser_historyInput>, DivisionUncheckedUpdateWithoutUser_historyInput>
  }

  export type UserAttendanceLocationCreateNestedManyWithoutLocationInput = {
    create?: XOR<UserAttendanceLocationCreateWithoutLocationInput, UserAttendanceLocationUncheckedCreateWithoutLocationInput> | UserAttendanceLocationCreateWithoutLocationInput[] | UserAttendanceLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: UserAttendanceLocationCreateOrConnectWithoutLocationInput | UserAttendanceLocationCreateOrConnectWithoutLocationInput[]
    createMany?: UserAttendanceLocationCreateManyLocationInputEnvelope
    connect?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
  }

  export type CompanyCreateNestedOneWithoutAttendance_locationInput = {
    create?: XOR<CompanyCreateWithoutAttendance_locationInput, CompanyUncheckedCreateWithoutAttendance_locationInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAttendance_locationInput
    connect?: CompanyWhereUniqueInput
  }

  export type UserAttendanceLocationUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<UserAttendanceLocationCreateWithoutLocationInput, UserAttendanceLocationUncheckedCreateWithoutLocationInput> | UserAttendanceLocationCreateWithoutLocationInput[] | UserAttendanceLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: UserAttendanceLocationCreateOrConnectWithoutLocationInput | UserAttendanceLocationCreateOrConnectWithoutLocationInput[]
    createMany?: UserAttendanceLocationCreateManyLocationInputEnvelope
    connect?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
  }

  export type UserAttendanceLocationUpdateManyWithoutLocationNestedInput = {
    create?: XOR<UserAttendanceLocationCreateWithoutLocationInput, UserAttendanceLocationUncheckedCreateWithoutLocationInput> | UserAttendanceLocationCreateWithoutLocationInput[] | UserAttendanceLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: UserAttendanceLocationCreateOrConnectWithoutLocationInput | UserAttendanceLocationCreateOrConnectWithoutLocationInput[]
    upsert?: UserAttendanceLocationUpsertWithWhereUniqueWithoutLocationInput | UserAttendanceLocationUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: UserAttendanceLocationCreateManyLocationInputEnvelope
    set?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
    disconnect?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
    delete?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
    connect?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
    update?: UserAttendanceLocationUpdateWithWhereUniqueWithoutLocationInput | UserAttendanceLocationUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: UserAttendanceLocationUpdateManyWithWhereWithoutLocationInput | UserAttendanceLocationUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: UserAttendanceLocationScalarWhereInput | UserAttendanceLocationScalarWhereInput[]
  }

  export type CompanyUpdateOneRequiredWithoutAttendance_locationNestedInput = {
    create?: XOR<CompanyCreateWithoutAttendance_locationInput, CompanyUncheckedCreateWithoutAttendance_locationInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAttendance_locationInput
    upsert?: CompanyUpsertWithoutAttendance_locationInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutAttendance_locationInput, CompanyUpdateWithoutAttendance_locationInput>, CompanyUncheckedUpdateWithoutAttendance_locationInput>
  }

  export type UserAttendanceLocationUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<UserAttendanceLocationCreateWithoutLocationInput, UserAttendanceLocationUncheckedCreateWithoutLocationInput> | UserAttendanceLocationCreateWithoutLocationInput[] | UserAttendanceLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: UserAttendanceLocationCreateOrConnectWithoutLocationInput | UserAttendanceLocationCreateOrConnectWithoutLocationInput[]
    upsert?: UserAttendanceLocationUpsertWithWhereUniqueWithoutLocationInput | UserAttendanceLocationUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: UserAttendanceLocationCreateManyLocationInputEnvelope
    set?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
    disconnect?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
    delete?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
    connect?: UserAttendanceLocationWhereUniqueInput | UserAttendanceLocationWhereUniqueInput[]
    update?: UserAttendanceLocationUpdateWithWhereUniqueWithoutLocationInput | UserAttendanceLocationUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: UserAttendanceLocationUpdateManyWithWhereWithoutLocationInput | UserAttendanceLocationUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: UserAttendanceLocationScalarWhereInput | UserAttendanceLocationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAttendances_locationInput = {
    create?: XOR<UserCreateWithoutAttendances_locationInput, UserUncheckedCreateWithoutAttendances_locationInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttendances_locationInput
    connect?: UserWhereUniqueInput
  }

  export type AttendanceLocationCreateNestedOneWithoutUser_attendance_locationInput = {
    create?: XOR<AttendanceLocationCreateWithoutUser_attendance_locationInput, AttendanceLocationUncheckedCreateWithoutUser_attendance_locationInput>
    connectOrCreate?: AttendanceLocationCreateOrConnectWithoutUser_attendance_locationInput
    connect?: AttendanceLocationWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAttendances_locationNestedInput = {
    create?: XOR<UserCreateWithoutAttendances_locationInput, UserUncheckedCreateWithoutAttendances_locationInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttendances_locationInput
    upsert?: UserUpsertWithoutAttendances_locationInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAttendances_locationInput, UserUpdateWithoutAttendances_locationInput>, UserUncheckedUpdateWithoutAttendances_locationInput>
  }

  export type AttendanceLocationUpdateOneRequiredWithoutUser_attendance_locationNestedInput = {
    create?: XOR<AttendanceLocationCreateWithoutUser_attendance_locationInput, AttendanceLocationUncheckedCreateWithoutUser_attendance_locationInput>
    connectOrCreate?: AttendanceLocationCreateOrConnectWithoutUser_attendance_locationInput
    upsert?: AttendanceLocationUpsertWithoutUser_attendance_locationInput
    connect?: AttendanceLocationWhereUniqueInput
    update?: XOR<XOR<AttendanceLocationUpdateToOneWithWhereWithoutUser_attendance_locationInput, AttendanceLocationUpdateWithoutUser_attendance_locationInput>, AttendanceLocationUncheckedUpdateWithoutUser_attendance_locationInput>
  }

  export type UserCreateNestedOneWithoutUser_attendanceInput = {
    create?: XOR<UserCreateWithoutUser_attendanceInput, UserUncheckedCreateWithoutUser_attendanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutUser_attendanceInput
    connect?: UserWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutUser_attendanceNestedInput = {
    create?: XOR<UserCreateWithoutUser_attendanceInput, UserUncheckedCreateWithoutUser_attendanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutUser_attendanceInput
    upsert?: UserUpsertWithoutUser_attendanceInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUser_attendanceInput, UserUpdateWithoutUser_attendanceInput>, UserUncheckedUpdateWithoutUser_attendanceInput>
  }

  export type UserShiftCreateNestedManyWithoutShiftInput = {
    create?: XOR<UserShiftCreateWithoutShiftInput, UserShiftUncheckedCreateWithoutShiftInput> | UserShiftCreateWithoutShiftInput[] | UserShiftUncheckedCreateWithoutShiftInput[]
    connectOrCreate?: UserShiftCreateOrConnectWithoutShiftInput | UserShiftCreateOrConnectWithoutShiftInput[]
    createMany?: UserShiftCreateManyShiftInputEnvelope
    connect?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
  }

  export type CompanyCreateNestedOneWithoutSift_typeInput = {
    create?: XOR<CompanyCreateWithoutSift_typeInput, CompanyUncheckedCreateWithoutSift_typeInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutSift_typeInput
    connect?: CompanyWhereUniqueInput
  }

  export type UserShiftUncheckedCreateNestedManyWithoutShiftInput = {
    create?: XOR<UserShiftCreateWithoutShiftInput, UserShiftUncheckedCreateWithoutShiftInput> | UserShiftCreateWithoutShiftInput[] | UserShiftUncheckedCreateWithoutShiftInput[]
    connectOrCreate?: UserShiftCreateOrConnectWithoutShiftInput | UserShiftCreateOrConnectWithoutShiftInput[]
    createMany?: UserShiftCreateManyShiftInputEnvelope
    connect?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
  }

  export type UserShiftUpdateManyWithoutShiftNestedInput = {
    create?: XOR<UserShiftCreateWithoutShiftInput, UserShiftUncheckedCreateWithoutShiftInput> | UserShiftCreateWithoutShiftInput[] | UserShiftUncheckedCreateWithoutShiftInput[]
    connectOrCreate?: UserShiftCreateOrConnectWithoutShiftInput | UserShiftCreateOrConnectWithoutShiftInput[]
    upsert?: UserShiftUpsertWithWhereUniqueWithoutShiftInput | UserShiftUpsertWithWhereUniqueWithoutShiftInput[]
    createMany?: UserShiftCreateManyShiftInputEnvelope
    set?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
    disconnect?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
    delete?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
    connect?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
    update?: UserShiftUpdateWithWhereUniqueWithoutShiftInput | UserShiftUpdateWithWhereUniqueWithoutShiftInput[]
    updateMany?: UserShiftUpdateManyWithWhereWithoutShiftInput | UserShiftUpdateManyWithWhereWithoutShiftInput[]
    deleteMany?: UserShiftScalarWhereInput | UserShiftScalarWhereInput[]
  }

  export type CompanyUpdateOneRequiredWithoutSift_typeNestedInput = {
    create?: XOR<CompanyCreateWithoutSift_typeInput, CompanyUncheckedCreateWithoutSift_typeInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutSift_typeInput
    upsert?: CompanyUpsertWithoutSift_typeInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutSift_typeInput, CompanyUpdateWithoutSift_typeInput>, CompanyUncheckedUpdateWithoutSift_typeInput>
  }

  export type UserShiftUncheckedUpdateManyWithoutShiftNestedInput = {
    create?: XOR<UserShiftCreateWithoutShiftInput, UserShiftUncheckedCreateWithoutShiftInput> | UserShiftCreateWithoutShiftInput[] | UserShiftUncheckedCreateWithoutShiftInput[]
    connectOrCreate?: UserShiftCreateOrConnectWithoutShiftInput | UserShiftCreateOrConnectWithoutShiftInput[]
    upsert?: UserShiftUpsertWithWhereUniqueWithoutShiftInput | UserShiftUpsertWithWhereUniqueWithoutShiftInput[]
    createMany?: UserShiftCreateManyShiftInputEnvelope
    set?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
    disconnect?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
    delete?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
    connect?: UserShiftWhereUniqueInput | UserShiftWhereUniqueInput[]
    update?: UserShiftUpdateWithWhereUniqueWithoutShiftInput | UserShiftUpdateWithWhereUniqueWithoutShiftInput[]
    updateMany?: UserShiftUpdateManyWithWhereWithoutShiftInput | UserShiftUpdateManyWithWhereWithoutShiftInput[]
    deleteMany?: UserShiftScalarWhereInput | UserShiftScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUser_shiftsInput = {
    create?: XOR<UserCreateWithoutUser_shiftsInput, UserUncheckedCreateWithoutUser_shiftsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUser_shiftsInput
    connect?: UserWhereUniqueInput
  }

  export type ShiftTypeCreateNestedOneWithoutUser_shiftsInput = {
    create?: XOR<ShiftTypeCreateWithoutUser_shiftsInput, ShiftTypeUncheckedCreateWithoutUser_shiftsInput>
    connectOrCreate?: ShiftTypeCreateOrConnectWithoutUser_shiftsInput
    connect?: ShiftTypeWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUser_shiftsNestedInput = {
    create?: XOR<UserCreateWithoutUser_shiftsInput, UserUncheckedCreateWithoutUser_shiftsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUser_shiftsInput
    upsert?: UserUpsertWithoutUser_shiftsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUser_shiftsInput, UserUpdateWithoutUser_shiftsInput>, UserUncheckedUpdateWithoutUser_shiftsInput>
  }

  export type ShiftTypeUpdateOneRequiredWithoutUser_shiftsNestedInput = {
    create?: XOR<ShiftTypeCreateWithoutUser_shiftsInput, ShiftTypeUncheckedCreateWithoutUser_shiftsInput>
    connectOrCreate?: ShiftTypeCreateOrConnectWithoutUser_shiftsInput
    upsert?: ShiftTypeUpsertWithoutUser_shiftsInput
    connect?: ShiftTypeWhereUniqueInput
    update?: XOR<XOR<ShiftTypeUpdateToOneWithWhereWithoutUser_shiftsInput, ShiftTypeUpdateWithoutUser_shiftsInput>, ShiftTypeUncheckedUpdateWithoutUser_shiftsInput>
  }

  export type UserRoleCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type UserRoleUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRolesInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput
    connect?: UserWhereUniqueInput
  }

  export type RoleCreateNestedOneWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    connect?: RoleWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRolesNestedInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput
    upsert?: UserUpsertWithoutRolesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRolesInput, UserUpdateWithoutRolesInput>, UserUncheckedUpdateWithoutRolesInput>
  }

  export type RoleUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    upsert?: RoleUpsertWithoutUsersInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUsersInput, RoleUpdateWithoutUsersInput>, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type MasterSubMenuCreateNestedManyWithoutMenuInput = {
    create?: XOR<MasterSubMenuCreateWithoutMenuInput, MasterSubMenuUncheckedCreateWithoutMenuInput> | MasterSubMenuCreateWithoutMenuInput[] | MasterSubMenuUncheckedCreateWithoutMenuInput[]
    connectOrCreate?: MasterSubMenuCreateOrConnectWithoutMenuInput | MasterSubMenuCreateOrConnectWithoutMenuInput[]
    createMany?: MasterSubMenuCreateManyMenuInputEnvelope
    connect?: MasterSubMenuWhereUniqueInput | MasterSubMenuWhereUniqueInput[]
  }

  export type MasterSubMenuUncheckedCreateNestedManyWithoutMenuInput = {
    create?: XOR<MasterSubMenuCreateWithoutMenuInput, MasterSubMenuUncheckedCreateWithoutMenuInput> | MasterSubMenuCreateWithoutMenuInput[] | MasterSubMenuUncheckedCreateWithoutMenuInput[]
    connectOrCreate?: MasterSubMenuCreateOrConnectWithoutMenuInput | MasterSubMenuCreateOrConnectWithoutMenuInput[]
    createMany?: MasterSubMenuCreateManyMenuInputEnvelope
    connect?: MasterSubMenuWhereUniqueInput | MasterSubMenuWhereUniqueInput[]
  }

  export type MasterSubMenuUpdateManyWithoutMenuNestedInput = {
    create?: XOR<MasterSubMenuCreateWithoutMenuInput, MasterSubMenuUncheckedCreateWithoutMenuInput> | MasterSubMenuCreateWithoutMenuInput[] | MasterSubMenuUncheckedCreateWithoutMenuInput[]
    connectOrCreate?: MasterSubMenuCreateOrConnectWithoutMenuInput | MasterSubMenuCreateOrConnectWithoutMenuInput[]
    upsert?: MasterSubMenuUpsertWithWhereUniqueWithoutMenuInput | MasterSubMenuUpsertWithWhereUniqueWithoutMenuInput[]
    createMany?: MasterSubMenuCreateManyMenuInputEnvelope
    set?: MasterSubMenuWhereUniqueInput | MasterSubMenuWhereUniqueInput[]
    disconnect?: MasterSubMenuWhereUniqueInput | MasterSubMenuWhereUniqueInput[]
    delete?: MasterSubMenuWhereUniqueInput | MasterSubMenuWhereUniqueInput[]
    connect?: MasterSubMenuWhereUniqueInput | MasterSubMenuWhereUniqueInput[]
    update?: MasterSubMenuUpdateWithWhereUniqueWithoutMenuInput | MasterSubMenuUpdateWithWhereUniqueWithoutMenuInput[]
    updateMany?: MasterSubMenuUpdateManyWithWhereWithoutMenuInput | MasterSubMenuUpdateManyWithWhereWithoutMenuInput[]
    deleteMany?: MasterSubMenuScalarWhereInput | MasterSubMenuScalarWhereInput[]
  }

  export type MasterSubMenuUncheckedUpdateManyWithoutMenuNestedInput = {
    create?: XOR<MasterSubMenuCreateWithoutMenuInput, MasterSubMenuUncheckedCreateWithoutMenuInput> | MasterSubMenuCreateWithoutMenuInput[] | MasterSubMenuUncheckedCreateWithoutMenuInput[]
    connectOrCreate?: MasterSubMenuCreateOrConnectWithoutMenuInput | MasterSubMenuCreateOrConnectWithoutMenuInput[]
    upsert?: MasterSubMenuUpsertWithWhereUniqueWithoutMenuInput | MasterSubMenuUpsertWithWhereUniqueWithoutMenuInput[]
    createMany?: MasterSubMenuCreateManyMenuInputEnvelope
    set?: MasterSubMenuWhereUniqueInput | MasterSubMenuWhereUniqueInput[]
    disconnect?: MasterSubMenuWhereUniqueInput | MasterSubMenuWhereUniqueInput[]
    delete?: MasterSubMenuWhereUniqueInput | MasterSubMenuWhereUniqueInput[]
    connect?: MasterSubMenuWhereUniqueInput | MasterSubMenuWhereUniqueInput[]
    update?: MasterSubMenuUpdateWithWhereUniqueWithoutMenuInput | MasterSubMenuUpdateWithWhereUniqueWithoutMenuInput[]
    updateMany?: MasterSubMenuUpdateManyWithWhereWithoutMenuInput | MasterSubMenuUpdateManyWithWhereWithoutMenuInput[]
    deleteMany?: MasterSubMenuScalarWhereInput | MasterSubMenuScalarWhereInput[]
  }

  export type MasterMenuCreateNestedOneWithoutSub_menuInput = {
    create?: XOR<MasterMenuCreateWithoutSub_menuInput, MasterMenuUncheckedCreateWithoutSub_menuInput>
    connectOrCreate?: MasterMenuCreateOrConnectWithoutSub_menuInput
    connect?: MasterMenuWhereUniqueInput
  }

  export type MasterMenuActionCreateNestedManyWithoutSub_menuInput = {
    create?: XOR<MasterMenuActionCreateWithoutSub_menuInput, MasterMenuActionUncheckedCreateWithoutSub_menuInput> | MasterMenuActionCreateWithoutSub_menuInput[] | MasterMenuActionUncheckedCreateWithoutSub_menuInput[]
    connectOrCreate?: MasterMenuActionCreateOrConnectWithoutSub_menuInput | MasterMenuActionCreateOrConnectWithoutSub_menuInput[]
    createMany?: MasterMenuActionCreateManySub_menuInputEnvelope
    connect?: MasterMenuActionWhereUniqueInput | MasterMenuActionWhereUniqueInput[]
  }

  export type MasterMenuActionUncheckedCreateNestedManyWithoutSub_menuInput = {
    create?: XOR<MasterMenuActionCreateWithoutSub_menuInput, MasterMenuActionUncheckedCreateWithoutSub_menuInput> | MasterMenuActionCreateWithoutSub_menuInput[] | MasterMenuActionUncheckedCreateWithoutSub_menuInput[]
    connectOrCreate?: MasterMenuActionCreateOrConnectWithoutSub_menuInput | MasterMenuActionCreateOrConnectWithoutSub_menuInput[]
    createMany?: MasterMenuActionCreateManySub_menuInputEnvelope
    connect?: MasterMenuActionWhereUniqueInput | MasterMenuActionWhereUniqueInput[]
  }

  export type MasterMenuUpdateOneRequiredWithoutSub_menuNestedInput = {
    create?: XOR<MasterMenuCreateWithoutSub_menuInput, MasterMenuUncheckedCreateWithoutSub_menuInput>
    connectOrCreate?: MasterMenuCreateOrConnectWithoutSub_menuInput
    upsert?: MasterMenuUpsertWithoutSub_menuInput
    connect?: MasterMenuWhereUniqueInput
    update?: XOR<XOR<MasterMenuUpdateToOneWithWhereWithoutSub_menuInput, MasterMenuUpdateWithoutSub_menuInput>, MasterMenuUncheckedUpdateWithoutSub_menuInput>
  }

  export type MasterMenuActionUpdateManyWithoutSub_menuNestedInput = {
    create?: XOR<MasterMenuActionCreateWithoutSub_menuInput, MasterMenuActionUncheckedCreateWithoutSub_menuInput> | MasterMenuActionCreateWithoutSub_menuInput[] | MasterMenuActionUncheckedCreateWithoutSub_menuInput[]
    connectOrCreate?: MasterMenuActionCreateOrConnectWithoutSub_menuInput | MasterMenuActionCreateOrConnectWithoutSub_menuInput[]
    upsert?: MasterMenuActionUpsertWithWhereUniqueWithoutSub_menuInput | MasterMenuActionUpsertWithWhereUniqueWithoutSub_menuInput[]
    createMany?: MasterMenuActionCreateManySub_menuInputEnvelope
    set?: MasterMenuActionWhereUniqueInput | MasterMenuActionWhereUniqueInput[]
    disconnect?: MasterMenuActionWhereUniqueInput | MasterMenuActionWhereUniqueInput[]
    delete?: MasterMenuActionWhereUniqueInput | MasterMenuActionWhereUniqueInput[]
    connect?: MasterMenuActionWhereUniqueInput | MasterMenuActionWhereUniqueInput[]
    update?: MasterMenuActionUpdateWithWhereUniqueWithoutSub_menuInput | MasterMenuActionUpdateWithWhereUniqueWithoutSub_menuInput[]
    updateMany?: MasterMenuActionUpdateManyWithWhereWithoutSub_menuInput | MasterMenuActionUpdateManyWithWhereWithoutSub_menuInput[]
    deleteMany?: MasterMenuActionScalarWhereInput | MasterMenuActionScalarWhereInput[]
  }

  export type MasterMenuActionUncheckedUpdateManyWithoutSub_menuNestedInput = {
    create?: XOR<MasterMenuActionCreateWithoutSub_menuInput, MasterMenuActionUncheckedCreateWithoutSub_menuInput> | MasterMenuActionCreateWithoutSub_menuInput[] | MasterMenuActionUncheckedCreateWithoutSub_menuInput[]
    connectOrCreate?: MasterMenuActionCreateOrConnectWithoutSub_menuInput | MasterMenuActionCreateOrConnectWithoutSub_menuInput[]
    upsert?: MasterMenuActionUpsertWithWhereUniqueWithoutSub_menuInput | MasterMenuActionUpsertWithWhereUniqueWithoutSub_menuInput[]
    createMany?: MasterMenuActionCreateManySub_menuInputEnvelope
    set?: MasterMenuActionWhereUniqueInput | MasterMenuActionWhereUniqueInput[]
    disconnect?: MasterMenuActionWhereUniqueInput | MasterMenuActionWhereUniqueInput[]
    delete?: MasterMenuActionWhereUniqueInput | MasterMenuActionWhereUniqueInput[]
    connect?: MasterMenuActionWhereUniqueInput | MasterMenuActionWhereUniqueInput[]
    update?: MasterMenuActionUpdateWithWhereUniqueWithoutSub_menuInput | MasterMenuActionUpdateWithWhereUniqueWithoutSub_menuInput[]
    updateMany?: MasterMenuActionUpdateManyWithWhereWithoutSub_menuInput | MasterMenuActionUpdateManyWithWhereWithoutSub_menuInput[]
    deleteMany?: MasterMenuActionScalarWhereInput | MasterMenuActionScalarWhereInput[]
  }

  export type UserMenuActionCreateNestedManyWithoutMenuInput = {
    create?: XOR<UserMenuActionCreateWithoutMenuInput, UserMenuActionUncheckedCreateWithoutMenuInput> | UserMenuActionCreateWithoutMenuInput[] | UserMenuActionUncheckedCreateWithoutMenuInput[]
    connectOrCreate?: UserMenuActionCreateOrConnectWithoutMenuInput | UserMenuActionCreateOrConnectWithoutMenuInput[]
    createMany?: UserMenuActionCreateManyMenuInputEnvelope
    connect?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
  }

  export type MasterSubMenuCreateNestedOneWithoutActionsInput = {
    create?: XOR<MasterSubMenuCreateWithoutActionsInput, MasterSubMenuUncheckedCreateWithoutActionsInput>
    connectOrCreate?: MasterSubMenuCreateOrConnectWithoutActionsInput
    connect?: MasterSubMenuWhereUniqueInput
  }

  export type UserMenuActionUncheckedCreateNestedManyWithoutMenuInput = {
    create?: XOR<UserMenuActionCreateWithoutMenuInput, UserMenuActionUncheckedCreateWithoutMenuInput> | UserMenuActionCreateWithoutMenuInput[] | UserMenuActionUncheckedCreateWithoutMenuInput[]
    connectOrCreate?: UserMenuActionCreateOrConnectWithoutMenuInput | UserMenuActionCreateOrConnectWithoutMenuInput[]
    createMany?: UserMenuActionCreateManyMenuInputEnvelope
    connect?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
  }

  export type UserMenuActionUpdateManyWithoutMenuNestedInput = {
    create?: XOR<UserMenuActionCreateWithoutMenuInput, UserMenuActionUncheckedCreateWithoutMenuInput> | UserMenuActionCreateWithoutMenuInput[] | UserMenuActionUncheckedCreateWithoutMenuInput[]
    connectOrCreate?: UserMenuActionCreateOrConnectWithoutMenuInput | UserMenuActionCreateOrConnectWithoutMenuInput[]
    upsert?: UserMenuActionUpsertWithWhereUniqueWithoutMenuInput | UserMenuActionUpsertWithWhereUniqueWithoutMenuInput[]
    createMany?: UserMenuActionCreateManyMenuInputEnvelope
    set?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
    disconnect?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
    delete?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
    connect?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
    update?: UserMenuActionUpdateWithWhereUniqueWithoutMenuInput | UserMenuActionUpdateWithWhereUniqueWithoutMenuInput[]
    updateMany?: UserMenuActionUpdateManyWithWhereWithoutMenuInput | UserMenuActionUpdateManyWithWhereWithoutMenuInput[]
    deleteMany?: UserMenuActionScalarWhereInput | UserMenuActionScalarWhereInput[]
  }

  export type MasterSubMenuUpdateOneRequiredWithoutActionsNestedInput = {
    create?: XOR<MasterSubMenuCreateWithoutActionsInput, MasterSubMenuUncheckedCreateWithoutActionsInput>
    connectOrCreate?: MasterSubMenuCreateOrConnectWithoutActionsInput
    upsert?: MasterSubMenuUpsertWithoutActionsInput
    connect?: MasterSubMenuWhereUniqueInput
    update?: XOR<XOR<MasterSubMenuUpdateToOneWithWhereWithoutActionsInput, MasterSubMenuUpdateWithoutActionsInput>, MasterSubMenuUncheckedUpdateWithoutActionsInput>
  }

  export type UserMenuActionUncheckedUpdateManyWithoutMenuNestedInput = {
    create?: XOR<UserMenuActionCreateWithoutMenuInput, UserMenuActionUncheckedCreateWithoutMenuInput> | UserMenuActionCreateWithoutMenuInput[] | UserMenuActionUncheckedCreateWithoutMenuInput[]
    connectOrCreate?: UserMenuActionCreateOrConnectWithoutMenuInput | UserMenuActionCreateOrConnectWithoutMenuInput[]
    upsert?: UserMenuActionUpsertWithWhereUniqueWithoutMenuInput | UserMenuActionUpsertWithWhereUniqueWithoutMenuInput[]
    createMany?: UserMenuActionCreateManyMenuInputEnvelope
    set?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
    disconnect?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
    delete?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
    connect?: UserMenuActionWhereUniqueInput | UserMenuActionWhereUniqueInput[]
    update?: UserMenuActionUpdateWithWhereUniqueWithoutMenuInput | UserMenuActionUpdateWithWhereUniqueWithoutMenuInput[]
    updateMany?: UserMenuActionUpdateManyWithWhereWithoutMenuInput | UserMenuActionUpdateManyWithWhereWithoutMenuInput[]
    deleteMany?: UserMenuActionScalarWhereInput | UserMenuActionScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutMenuInput = {
    create?: XOR<CompanyCreateWithoutMenuInput, CompanyUncheckedCreateWithoutMenuInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutMenuInput
    connect?: CompanyWhereUniqueInput
  }

  export type UserMenuCreateNestedManyWithoutMenuInput = {
    create?: XOR<UserMenuCreateWithoutMenuInput, UserMenuUncheckedCreateWithoutMenuInput> | UserMenuCreateWithoutMenuInput[] | UserMenuUncheckedCreateWithoutMenuInput[]
    connectOrCreate?: UserMenuCreateOrConnectWithoutMenuInput | UserMenuCreateOrConnectWithoutMenuInput[]
    createMany?: UserMenuCreateManyMenuInputEnvelope
    connect?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
  }

  export type UserMenuUncheckedCreateNestedManyWithoutMenuInput = {
    create?: XOR<UserMenuCreateWithoutMenuInput, UserMenuUncheckedCreateWithoutMenuInput> | UserMenuCreateWithoutMenuInput[] | UserMenuUncheckedCreateWithoutMenuInput[]
    connectOrCreate?: UserMenuCreateOrConnectWithoutMenuInput | UserMenuCreateOrConnectWithoutMenuInput[]
    createMany?: UserMenuCreateManyMenuInputEnvelope
    connect?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
  }

  export type CompanyUpdateOneRequiredWithoutMenuNestedInput = {
    create?: XOR<CompanyCreateWithoutMenuInput, CompanyUncheckedCreateWithoutMenuInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutMenuInput
    upsert?: CompanyUpsertWithoutMenuInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutMenuInput, CompanyUpdateWithoutMenuInput>, CompanyUncheckedUpdateWithoutMenuInput>
  }

  export type UserMenuUpdateManyWithoutMenuNestedInput = {
    create?: XOR<UserMenuCreateWithoutMenuInput, UserMenuUncheckedCreateWithoutMenuInput> | UserMenuCreateWithoutMenuInput[] | UserMenuUncheckedCreateWithoutMenuInput[]
    connectOrCreate?: UserMenuCreateOrConnectWithoutMenuInput | UserMenuCreateOrConnectWithoutMenuInput[]
    upsert?: UserMenuUpsertWithWhereUniqueWithoutMenuInput | UserMenuUpsertWithWhereUniqueWithoutMenuInput[]
    createMany?: UserMenuCreateManyMenuInputEnvelope
    set?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
    disconnect?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
    delete?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
    connect?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
    update?: UserMenuUpdateWithWhereUniqueWithoutMenuInput | UserMenuUpdateWithWhereUniqueWithoutMenuInput[]
    updateMany?: UserMenuUpdateManyWithWhereWithoutMenuInput | UserMenuUpdateManyWithWhereWithoutMenuInput[]
    deleteMany?: UserMenuScalarWhereInput | UserMenuScalarWhereInput[]
  }

  export type UserMenuUncheckedUpdateManyWithoutMenuNestedInput = {
    create?: XOR<UserMenuCreateWithoutMenuInput, UserMenuUncheckedCreateWithoutMenuInput> | UserMenuCreateWithoutMenuInput[] | UserMenuUncheckedCreateWithoutMenuInput[]
    connectOrCreate?: UserMenuCreateOrConnectWithoutMenuInput | UserMenuCreateOrConnectWithoutMenuInput[]
    upsert?: UserMenuUpsertWithWhereUniqueWithoutMenuInput | UserMenuUpsertWithWhereUniqueWithoutMenuInput[]
    createMany?: UserMenuCreateManyMenuInputEnvelope
    set?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
    disconnect?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
    delete?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
    connect?: UserMenuWhereUniqueInput | UserMenuWhereUniqueInput[]
    update?: UserMenuUpdateWithWhereUniqueWithoutMenuInput | UserMenuUpdateWithWhereUniqueWithoutMenuInput[]
    updateMany?: UserMenuUpdateManyWithWhereWithoutMenuInput | UserMenuUpdateManyWithWhereWithoutMenuInput[]
    deleteMany?: UserMenuScalarWhereInput | UserMenuScalarWhereInput[]
  }

  export type CompanyMenuCreateNestedOneWithoutUser_menuInput = {
    create?: XOR<CompanyMenuCreateWithoutUser_menuInput, CompanyMenuUncheckedCreateWithoutUser_menuInput>
    connectOrCreate?: CompanyMenuCreateOrConnectWithoutUser_menuInput
    connect?: CompanyMenuWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUserMenusInput = {
    create?: XOR<UserCreateWithoutUserMenusInput, UserUncheckedCreateWithoutUserMenusInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserMenusInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CompanyMenuUpdateOneRequiredWithoutUser_menuNestedInput = {
    create?: XOR<CompanyMenuCreateWithoutUser_menuInput, CompanyMenuUncheckedCreateWithoutUser_menuInput>
    connectOrCreate?: CompanyMenuCreateOrConnectWithoutUser_menuInput
    upsert?: CompanyMenuUpsertWithoutUser_menuInput
    connect?: CompanyMenuWhereUniqueInput
    update?: XOR<XOR<CompanyMenuUpdateToOneWithWhereWithoutUser_menuInput, CompanyMenuUpdateWithoutUser_menuInput>, CompanyMenuUncheckedUpdateWithoutUser_menuInput>
  }

  export type UserUpdateOneRequiredWithoutUserMenusNestedInput = {
    create?: XOR<UserCreateWithoutUserMenusInput, UserUncheckedCreateWithoutUserMenusInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserMenusInput
    upsert?: UserUpsertWithoutUserMenusInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserMenusInput, UserUpdateWithoutUserMenusInput>, UserUncheckedUpdateWithoutUserMenusInput>
  }

  export type MasterMenuActionCreateNestedOneWithoutUsersInput = {
    create?: XOR<MasterMenuActionCreateWithoutUsersInput, MasterMenuActionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: MasterMenuActionCreateOrConnectWithoutUsersInput
    connect?: MasterMenuActionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUserMenuActionInput = {
    create?: XOR<UserCreateWithoutUserMenuActionInput, UserUncheckedCreateWithoutUserMenuActionInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserMenuActionInput
    connect?: UserWhereUniqueInput
  }

  export type MasterMenuActionUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<MasterMenuActionCreateWithoutUsersInput, MasterMenuActionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: MasterMenuActionCreateOrConnectWithoutUsersInput
    upsert?: MasterMenuActionUpsertWithoutUsersInput
    connect?: MasterMenuActionWhereUniqueInput
    update?: XOR<XOR<MasterMenuActionUpdateToOneWithWhereWithoutUsersInput, MasterMenuActionUpdateWithoutUsersInput>, MasterMenuActionUncheckedUpdateWithoutUsersInput>
  }

  export type UserUpdateOneRequiredWithoutUserMenuActionNestedInput = {
    create?: XOR<UserCreateWithoutUserMenuActionInput, UserUncheckedCreateWithoutUserMenuActionInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserMenuActionInput
    upsert?: UserUpsertWithoutUserMenuActionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserMenuActionInput, UserUpdateWithoutUserMenuActionInput>, UserUncheckedUpdateWithoutUserMenuActionInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumEmployeeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeStatus | EnumEmployeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeStatus[] | ListEnumEmployeeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmployeeStatus[] | ListEnumEmployeeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmployeeStatusFilter<$PrismaModel> | $Enums.EmployeeStatus
  }

  export type NestedEnumEmployeeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeStatus | EnumEmployeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeStatus[] | ListEnumEmployeeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmployeeStatus[] | ListEnumEmployeeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmployeeStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmployeeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmployeeStatusFilter<$PrismaModel>
    _max?: NestedEnumEmployeeStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CompanyCreateWithoutTenantInput = {
    company_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    divisions?: DivisionCreateNestedManyWithoutCompanyInput
    user_history?: UserCompanyHistoryCreateNestedManyWithoutCompanyInput
    user?: UserCreateNestedManyWithoutCompanyInput
    attendance_location?: AttendanceLocationCreateNestedManyWithoutCompanyInput
    sift_type?: ShiftTypeCreateNestedManyWithoutCompanyInput
    menu?: CompanyMenuCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutTenantInput = {
    id?: number
    company_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    divisions?: DivisionUncheckedCreateNestedManyWithoutCompanyInput
    user_history?: UserCompanyHistoryUncheckedCreateNestedManyWithoutCompanyInput
    user?: UserUncheckedCreateNestedManyWithoutCompanyInput
    attendance_location?: AttendanceLocationUncheckedCreateNestedManyWithoutCompanyInput
    sift_type?: ShiftTypeUncheckedCreateNestedManyWithoutCompanyInput
    menu?: CompanyMenuUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutTenantInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutTenantInput, CompanyUncheckedCreateWithoutTenantInput>
  }

  export type CompanyCreateManyTenantInputEnvelope = {
    data: CompanyCreateManyTenantInput | CompanyCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutTenantInput = {
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryCreateNestedManyWithoutUserInput
    company: CompanyCreateNestedOneWithoutUserInput
    division: DivisionCreateNestedOneWithoutUserInput
    attendances_location?: UserAttendanceLocationCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftCreateNestedManyWithoutUserInput
    userMenus?: UserMenuCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTenantInput = {
    id?: number
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    company_code: string
    division_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryUncheckedCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryUncheckedCreateNestedManyWithoutUserInput
    attendances_location?: UserAttendanceLocationUncheckedCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftUncheckedCreateNestedManyWithoutUserInput
    userMenus?: UserMenuUncheckedCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTenantInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
  }

  export type UserCreateManyTenantInputEnvelope = {
    data: UserCreateManyTenantInput | UserCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithWhereUniqueWithoutTenantInput = {
    where: CompanyWhereUniqueInput
    update: XOR<CompanyUpdateWithoutTenantInput, CompanyUncheckedUpdateWithoutTenantInput>
    create: XOR<CompanyCreateWithoutTenantInput, CompanyUncheckedCreateWithoutTenantInput>
  }

  export type CompanyUpdateWithWhereUniqueWithoutTenantInput = {
    where: CompanyWhereUniqueInput
    data: XOR<CompanyUpdateWithoutTenantInput, CompanyUncheckedUpdateWithoutTenantInput>
  }

  export type CompanyUpdateManyWithWhereWithoutTenantInput = {
    where: CompanyScalarWhereInput
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyWithoutTenantInput>
  }

  export type CompanyScalarWhereInput = {
    AND?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
    OR?: CompanyScalarWhereInput[]
    NOT?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
    id?: IntFilter<"Company"> | number
    company_code?: StringFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    tenant_code?: StringFilter<"Company"> | string
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutTenantInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTenantInput, UserUncheckedUpdateWithoutTenantInput>
    create: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTenantInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTenantInput, UserUncheckedUpdateWithoutTenantInput>
  }

  export type UserUpdateManyWithWhereWithoutTenantInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTenantInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    user_code?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    status?: EnumEmployeeStatusFilter<"User"> | $Enums.EmployeeStatus
    tenant_code?: StringFilter<"User"> | string
    company_code?: StringFilter<"User"> | string
    division_code?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type TenantCreateWithoutCompaniesInput = {
    tenant_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutCompaniesInput = {
    id?: number
    tenant_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutCompaniesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutCompaniesInput, TenantUncheckedCreateWithoutCompaniesInput>
  }

  export type DivisionCreateWithoutCompanyInput = {
    division_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user_history?: UserDivisionHistoryCreateNestedManyWithoutDivisionInput
    user?: UserCreateNestedManyWithoutDivisionInput
  }

  export type DivisionUncheckedCreateWithoutCompanyInput = {
    id?: number
    division_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user_history?: UserDivisionHistoryUncheckedCreateNestedManyWithoutDivisionInput
    user?: UserUncheckedCreateNestedManyWithoutDivisionInput
  }

  export type DivisionCreateOrConnectWithoutCompanyInput = {
    where: DivisionWhereUniqueInput
    create: XOR<DivisionCreateWithoutCompanyInput, DivisionUncheckedCreateWithoutCompanyInput>
  }

  export type DivisionCreateManyCompanyInputEnvelope = {
    data: DivisionCreateManyCompanyInput | DivisionCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type UserCompanyHistoryCreateWithoutCompanyInput = {
    startDate: Date | string
    endDate?: Date | string | null
    user: UserCreateNestedOneWithoutCompany_historyInput
  }

  export type UserCompanyHistoryUncheckedCreateWithoutCompanyInput = {
    id?: number
    user_code: string
    division_code: string
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type UserCompanyHistoryCreateOrConnectWithoutCompanyInput = {
    where: UserCompanyHistoryWhereUniqueInput
    create: XOR<UserCompanyHistoryCreateWithoutCompanyInput, UserCompanyHistoryUncheckedCreateWithoutCompanyInput>
  }

  export type UserCompanyHistoryCreateManyCompanyInputEnvelope = {
    data: UserCompanyHistoryCreateManyCompanyInput | UserCompanyHistoryCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCompanyInput = {
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryCreateNestedManyWithoutUserInput
    tenant: TenantCreateNestedOneWithoutUserInput
    division: DivisionCreateNestedOneWithoutUserInput
    attendances_location?: UserAttendanceLocationCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftCreateNestedManyWithoutUserInput
    userMenus?: UserMenuCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCompanyInput = {
    id?: number
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    division_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryUncheckedCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryUncheckedCreateNestedManyWithoutUserInput
    attendances_location?: UserAttendanceLocationUncheckedCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftUncheckedCreateNestedManyWithoutUserInput
    userMenus?: UserMenuUncheckedCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCompanyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type UserCreateManyCompanyInputEnvelope = {
    data: UserCreateManyCompanyInput | UserCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceLocationCreateWithoutCompanyInput = {
    attendance_location_code: string
    name: string
    lat: string
    lng: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user_attendance_location?: UserAttendanceLocationCreateNestedManyWithoutLocationInput
  }

  export type AttendanceLocationUncheckedCreateWithoutCompanyInput = {
    id?: number
    attendance_location_code: string
    name: string
    lat: string
    lng: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user_attendance_location?: UserAttendanceLocationUncheckedCreateNestedManyWithoutLocationInput
  }

  export type AttendanceLocationCreateOrConnectWithoutCompanyInput = {
    where: AttendanceLocationWhereUniqueInput
    create: XOR<AttendanceLocationCreateWithoutCompanyInput, AttendanceLocationUncheckedCreateWithoutCompanyInput>
  }

  export type AttendanceLocationCreateManyCompanyInputEnvelope = {
    data: AttendanceLocationCreateManyCompanyInput | AttendanceLocationCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type ShiftTypeCreateWithoutCompanyInput = {
    name: string
    startTime: Date | string
    endTime: Date | string
    shift_code: string
    user_shifts?: UserShiftCreateNestedManyWithoutShiftInput
  }

  export type ShiftTypeUncheckedCreateWithoutCompanyInput = {
    id?: number
    name: string
    startTime: Date | string
    endTime: Date | string
    shift_code: string
    user_shifts?: UserShiftUncheckedCreateNestedManyWithoutShiftInput
  }

  export type ShiftTypeCreateOrConnectWithoutCompanyInput = {
    where: ShiftTypeWhereUniqueInput
    create: XOR<ShiftTypeCreateWithoutCompanyInput, ShiftTypeUncheckedCreateWithoutCompanyInput>
  }

  export type ShiftTypeCreateManyCompanyInputEnvelope = {
    data: ShiftTypeCreateManyCompanyInput | ShiftTypeCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type CompanyMenuCreateWithoutCompanyInput = {
    menu_code: string
    sub_menu_code: string
    user_menu?: UserMenuCreateNestedManyWithoutMenuInput
  }

  export type CompanyMenuUncheckedCreateWithoutCompanyInput = {
    id?: number
    menu_code: string
    sub_menu_code: string
    user_menu?: UserMenuUncheckedCreateNestedManyWithoutMenuInput
  }

  export type CompanyMenuCreateOrConnectWithoutCompanyInput = {
    where: CompanyMenuWhereUniqueInput
    create: XOR<CompanyMenuCreateWithoutCompanyInput, CompanyMenuUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyMenuCreateManyCompanyInputEnvelope = {
    data: CompanyMenuCreateManyCompanyInput | CompanyMenuCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type TenantUpsertWithoutCompaniesInput = {
    update: XOR<TenantUpdateWithoutCompaniesInput, TenantUncheckedUpdateWithoutCompaniesInput>
    create: XOR<TenantCreateWithoutCompaniesInput, TenantUncheckedCreateWithoutCompaniesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutCompaniesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutCompaniesInput, TenantUncheckedUpdateWithoutCompaniesInput>
  }

  export type TenantUpdateWithoutCompaniesInput = {
    tenant_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutCompaniesInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenant_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type DivisionUpsertWithWhereUniqueWithoutCompanyInput = {
    where: DivisionWhereUniqueInput
    update: XOR<DivisionUpdateWithoutCompanyInput, DivisionUncheckedUpdateWithoutCompanyInput>
    create: XOR<DivisionCreateWithoutCompanyInput, DivisionUncheckedCreateWithoutCompanyInput>
  }

  export type DivisionUpdateWithWhereUniqueWithoutCompanyInput = {
    where: DivisionWhereUniqueInput
    data: XOR<DivisionUpdateWithoutCompanyInput, DivisionUncheckedUpdateWithoutCompanyInput>
  }

  export type DivisionUpdateManyWithWhereWithoutCompanyInput = {
    where: DivisionScalarWhereInput
    data: XOR<DivisionUpdateManyMutationInput, DivisionUncheckedUpdateManyWithoutCompanyInput>
  }

  export type DivisionScalarWhereInput = {
    AND?: DivisionScalarWhereInput | DivisionScalarWhereInput[]
    OR?: DivisionScalarWhereInput[]
    NOT?: DivisionScalarWhereInput | DivisionScalarWhereInput[]
    id?: IntFilter<"Division"> | number
    division_code?: StringFilter<"Division"> | string
    name?: StringFilter<"Division"> | string
    company_code?: StringFilter<"Division"> | string
    tenant_code?: StringFilter<"Division"> | string
    createdAt?: DateTimeFilter<"Division"> | Date | string
    updatedAt?: DateTimeFilter<"Division"> | Date | string
  }

  export type UserCompanyHistoryUpsertWithWhereUniqueWithoutCompanyInput = {
    where: UserCompanyHistoryWhereUniqueInput
    update: XOR<UserCompanyHistoryUpdateWithoutCompanyInput, UserCompanyHistoryUncheckedUpdateWithoutCompanyInput>
    create: XOR<UserCompanyHistoryCreateWithoutCompanyInput, UserCompanyHistoryUncheckedCreateWithoutCompanyInput>
  }

  export type UserCompanyHistoryUpdateWithWhereUniqueWithoutCompanyInput = {
    where: UserCompanyHistoryWhereUniqueInput
    data: XOR<UserCompanyHistoryUpdateWithoutCompanyInput, UserCompanyHistoryUncheckedUpdateWithoutCompanyInput>
  }

  export type UserCompanyHistoryUpdateManyWithWhereWithoutCompanyInput = {
    where: UserCompanyHistoryScalarWhereInput
    data: XOR<UserCompanyHistoryUpdateManyMutationInput, UserCompanyHistoryUncheckedUpdateManyWithoutCompanyInput>
  }

  export type UserCompanyHistoryScalarWhereInput = {
    AND?: UserCompanyHistoryScalarWhereInput | UserCompanyHistoryScalarWhereInput[]
    OR?: UserCompanyHistoryScalarWhereInput[]
    NOT?: UserCompanyHistoryScalarWhereInput | UserCompanyHistoryScalarWhereInput[]
    id?: IntFilter<"UserCompanyHistory"> | number
    user_code?: StringFilter<"UserCompanyHistory"> | string
    company_code?: StringFilter<"UserCompanyHistory"> | string
    division_code?: StringFilter<"UserCompanyHistory"> | string
    tenant_code?: StringFilter<"UserCompanyHistory"> | string
    startDate?: DateTimeFilter<"UserCompanyHistory"> | Date | string
    endDate?: DateTimeNullableFilter<"UserCompanyHistory"> | Date | string | null
  }

  export type UserUpsertWithWhereUniqueWithoutCompanyInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCompanyInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
  }

  export type UserUpdateManyWithWhereWithoutCompanyInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutCompanyInput>
  }

  export type AttendanceLocationUpsertWithWhereUniqueWithoutCompanyInput = {
    where: AttendanceLocationWhereUniqueInput
    update: XOR<AttendanceLocationUpdateWithoutCompanyInput, AttendanceLocationUncheckedUpdateWithoutCompanyInput>
    create: XOR<AttendanceLocationCreateWithoutCompanyInput, AttendanceLocationUncheckedCreateWithoutCompanyInput>
  }

  export type AttendanceLocationUpdateWithWhereUniqueWithoutCompanyInput = {
    where: AttendanceLocationWhereUniqueInput
    data: XOR<AttendanceLocationUpdateWithoutCompanyInput, AttendanceLocationUncheckedUpdateWithoutCompanyInput>
  }

  export type AttendanceLocationUpdateManyWithWhereWithoutCompanyInput = {
    where: AttendanceLocationScalarWhereInput
    data: XOR<AttendanceLocationUpdateManyMutationInput, AttendanceLocationUncheckedUpdateManyWithoutCompanyInput>
  }

  export type AttendanceLocationScalarWhereInput = {
    AND?: AttendanceLocationScalarWhereInput | AttendanceLocationScalarWhereInput[]
    OR?: AttendanceLocationScalarWhereInput[]
    NOT?: AttendanceLocationScalarWhereInput | AttendanceLocationScalarWhereInput[]
    id?: IntFilter<"AttendanceLocation"> | number
    company_code?: StringFilter<"AttendanceLocation"> | string
    attendance_location_code?: StringFilter<"AttendanceLocation"> | string
    tenant_code?: StringFilter<"AttendanceLocation"> | string
    name?: StringFilter<"AttendanceLocation"> | string
    lat?: StringFilter<"AttendanceLocation"> | string
    lng?: StringFilter<"AttendanceLocation"> | string
    createdAt?: DateTimeFilter<"AttendanceLocation"> | Date | string
    updatedAt?: DateTimeFilter<"AttendanceLocation"> | Date | string
  }

  export type ShiftTypeUpsertWithWhereUniqueWithoutCompanyInput = {
    where: ShiftTypeWhereUniqueInput
    update: XOR<ShiftTypeUpdateWithoutCompanyInput, ShiftTypeUncheckedUpdateWithoutCompanyInput>
    create: XOR<ShiftTypeCreateWithoutCompanyInput, ShiftTypeUncheckedCreateWithoutCompanyInput>
  }

  export type ShiftTypeUpdateWithWhereUniqueWithoutCompanyInput = {
    where: ShiftTypeWhereUniqueInput
    data: XOR<ShiftTypeUpdateWithoutCompanyInput, ShiftTypeUncheckedUpdateWithoutCompanyInput>
  }

  export type ShiftTypeUpdateManyWithWhereWithoutCompanyInput = {
    where: ShiftTypeScalarWhereInput
    data: XOR<ShiftTypeUpdateManyMutationInput, ShiftTypeUncheckedUpdateManyWithoutCompanyInput>
  }

  export type ShiftTypeScalarWhereInput = {
    AND?: ShiftTypeScalarWhereInput | ShiftTypeScalarWhereInput[]
    OR?: ShiftTypeScalarWhereInput[]
    NOT?: ShiftTypeScalarWhereInput | ShiftTypeScalarWhereInput[]
    id?: IntFilter<"ShiftType"> | number
    name?: StringFilter<"ShiftType"> | string
    startTime?: DateTimeFilter<"ShiftType"> | Date | string
    endTime?: DateTimeFilter<"ShiftType"> | Date | string
    company_code?: StringFilter<"ShiftType"> | string
    shift_code?: StringFilter<"ShiftType"> | string
    tenant_code?: StringFilter<"ShiftType"> | string
  }

  export type CompanyMenuUpsertWithWhereUniqueWithoutCompanyInput = {
    where: CompanyMenuWhereUniqueInput
    update: XOR<CompanyMenuUpdateWithoutCompanyInput, CompanyMenuUncheckedUpdateWithoutCompanyInput>
    create: XOR<CompanyMenuCreateWithoutCompanyInput, CompanyMenuUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyMenuUpdateWithWhereUniqueWithoutCompanyInput = {
    where: CompanyMenuWhereUniqueInput
    data: XOR<CompanyMenuUpdateWithoutCompanyInput, CompanyMenuUncheckedUpdateWithoutCompanyInput>
  }

  export type CompanyMenuUpdateManyWithWhereWithoutCompanyInput = {
    where: CompanyMenuScalarWhereInput
    data: XOR<CompanyMenuUpdateManyMutationInput, CompanyMenuUncheckedUpdateManyWithoutCompanyInput>
  }

  export type CompanyMenuScalarWhereInput = {
    AND?: CompanyMenuScalarWhereInput | CompanyMenuScalarWhereInput[]
    OR?: CompanyMenuScalarWhereInput[]
    NOT?: CompanyMenuScalarWhereInput | CompanyMenuScalarWhereInput[]
    id?: IntFilter<"CompanyMenu"> | number
    menu_code?: StringFilter<"CompanyMenu"> | string
    tenant_code?: StringFilter<"CompanyMenu"> | string
    company_code?: StringFilter<"CompanyMenu"> | string
    sub_menu_code?: StringFilter<"CompanyMenu"> | string
  }

  export type CompanyCreateWithoutDivisionsInput = {
    company_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCompaniesInput
    user_history?: UserCompanyHistoryCreateNestedManyWithoutCompanyInput
    user?: UserCreateNestedManyWithoutCompanyInput
    attendance_location?: AttendanceLocationCreateNestedManyWithoutCompanyInput
    sift_type?: ShiftTypeCreateNestedManyWithoutCompanyInput
    menu?: CompanyMenuCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutDivisionsInput = {
    id?: number
    company_code: string
    name: string
    tenant_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user_history?: UserCompanyHistoryUncheckedCreateNestedManyWithoutCompanyInput
    user?: UserUncheckedCreateNestedManyWithoutCompanyInput
    attendance_location?: AttendanceLocationUncheckedCreateNestedManyWithoutCompanyInput
    sift_type?: ShiftTypeUncheckedCreateNestedManyWithoutCompanyInput
    menu?: CompanyMenuUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutDivisionsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutDivisionsInput, CompanyUncheckedCreateWithoutDivisionsInput>
  }

  export type UserDivisionHistoryCreateWithoutDivisionInput = {
    startDate: Date | string
    endDate?: Date | string | null
    user: UserCreateNestedOneWithoutDivision_historyInput
  }

  export type UserDivisionHistoryUncheckedCreateWithoutDivisionInput = {
    id?: number
    user_code: string
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type UserDivisionHistoryCreateOrConnectWithoutDivisionInput = {
    where: UserDivisionHistoryWhereUniqueInput
    create: XOR<UserDivisionHistoryCreateWithoutDivisionInput, UserDivisionHistoryUncheckedCreateWithoutDivisionInput>
  }

  export type UserDivisionHistoryCreateManyDivisionInputEnvelope = {
    data: UserDivisionHistoryCreateManyDivisionInput | UserDivisionHistoryCreateManyDivisionInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutDivisionInput = {
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryCreateNestedManyWithoutUserInput
    tenant: TenantCreateNestedOneWithoutUserInput
    company: CompanyCreateNestedOneWithoutUserInput
    attendances_location?: UserAttendanceLocationCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftCreateNestedManyWithoutUserInput
    userMenus?: UserMenuCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDivisionInput = {
    id?: number
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryUncheckedCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryUncheckedCreateNestedManyWithoutUserInput
    attendances_location?: UserAttendanceLocationUncheckedCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftUncheckedCreateNestedManyWithoutUserInput
    userMenus?: UserMenuUncheckedCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDivisionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDivisionInput, UserUncheckedCreateWithoutDivisionInput>
  }

  export type UserCreateManyDivisionInputEnvelope = {
    data: UserCreateManyDivisionInput | UserCreateManyDivisionInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutDivisionsInput = {
    update: XOR<CompanyUpdateWithoutDivisionsInput, CompanyUncheckedUpdateWithoutDivisionsInput>
    create: XOR<CompanyCreateWithoutDivisionsInput, CompanyUncheckedCreateWithoutDivisionsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutDivisionsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutDivisionsInput, CompanyUncheckedUpdateWithoutDivisionsInput>
  }

  export type CompanyUpdateWithoutDivisionsInput = {
    company_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCompaniesNestedInput
    user_history?: UserCompanyHistoryUpdateManyWithoutCompanyNestedInput
    user?: UserUpdateManyWithoutCompanyNestedInput
    attendance_location?: AttendanceLocationUpdateManyWithoutCompanyNestedInput
    sift_type?: ShiftTypeUpdateManyWithoutCompanyNestedInput
    menu?: CompanyMenuUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutDivisionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_history?: UserCompanyHistoryUncheckedUpdateManyWithoutCompanyNestedInput
    user?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    attendance_location?: AttendanceLocationUncheckedUpdateManyWithoutCompanyNestedInput
    sift_type?: ShiftTypeUncheckedUpdateManyWithoutCompanyNestedInput
    menu?: CompanyMenuUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type UserDivisionHistoryUpsertWithWhereUniqueWithoutDivisionInput = {
    where: UserDivisionHistoryWhereUniqueInput
    update: XOR<UserDivisionHistoryUpdateWithoutDivisionInput, UserDivisionHistoryUncheckedUpdateWithoutDivisionInput>
    create: XOR<UserDivisionHistoryCreateWithoutDivisionInput, UserDivisionHistoryUncheckedCreateWithoutDivisionInput>
  }

  export type UserDivisionHistoryUpdateWithWhereUniqueWithoutDivisionInput = {
    where: UserDivisionHistoryWhereUniqueInput
    data: XOR<UserDivisionHistoryUpdateWithoutDivisionInput, UserDivisionHistoryUncheckedUpdateWithoutDivisionInput>
  }

  export type UserDivisionHistoryUpdateManyWithWhereWithoutDivisionInput = {
    where: UserDivisionHistoryScalarWhereInput
    data: XOR<UserDivisionHistoryUpdateManyMutationInput, UserDivisionHistoryUncheckedUpdateManyWithoutDivisionInput>
  }

  export type UserDivisionHistoryScalarWhereInput = {
    AND?: UserDivisionHistoryScalarWhereInput | UserDivisionHistoryScalarWhereInput[]
    OR?: UserDivisionHistoryScalarWhereInput[]
    NOT?: UserDivisionHistoryScalarWhereInput | UserDivisionHistoryScalarWhereInput[]
    id?: IntFilter<"UserDivisionHistory"> | number
    user_code?: StringFilter<"UserDivisionHistory"> | string
    division_code?: StringFilter<"UserDivisionHistory"> | string
    company_code?: StringFilter<"UserDivisionHistory"> | string
    tenant_code?: StringFilter<"UserDivisionHistory"> | string
    startDate?: DateTimeFilter<"UserDivisionHistory"> | Date | string
    endDate?: DateTimeNullableFilter<"UserDivisionHistory"> | Date | string | null
  }

  export type UserUpsertWithWhereUniqueWithoutDivisionInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutDivisionInput, UserUncheckedUpdateWithoutDivisionInput>
    create: XOR<UserCreateWithoutDivisionInput, UserUncheckedCreateWithoutDivisionInput>
  }

  export type UserUpdateWithWhereUniqueWithoutDivisionInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutDivisionInput, UserUncheckedUpdateWithoutDivisionInput>
  }

  export type UserUpdateManyWithWhereWithoutDivisionInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutDivisionInput>
  }

  export type UserCompanyHistoryCreateWithoutUserInput = {
    startDate: Date | string
    endDate?: Date | string | null
    company: CompanyCreateNestedOneWithoutUser_historyInput
  }

  export type UserCompanyHistoryUncheckedCreateWithoutUserInput = {
    id?: number
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type UserCompanyHistoryCreateOrConnectWithoutUserInput = {
    where: UserCompanyHistoryWhereUniqueInput
    create: XOR<UserCompanyHistoryCreateWithoutUserInput, UserCompanyHistoryUncheckedCreateWithoutUserInput>
  }

  export type UserCompanyHistoryCreateManyUserInputEnvelope = {
    data: UserCompanyHistoryCreateManyUserInput | UserCompanyHistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserDivisionHistoryCreateWithoutUserInput = {
    startDate: Date | string
    endDate?: Date | string | null
    division: DivisionCreateNestedOneWithoutUser_historyInput
  }

  export type UserDivisionHistoryUncheckedCreateWithoutUserInput = {
    id?: number
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type UserDivisionHistoryCreateOrConnectWithoutUserInput = {
    where: UserDivisionHistoryWhereUniqueInput
    create: XOR<UserDivisionHistoryCreateWithoutUserInput, UserDivisionHistoryUncheckedCreateWithoutUserInput>
  }

  export type UserDivisionHistoryCreateManyUserInputEnvelope = {
    data: UserDivisionHistoryCreateManyUserInput | UserDivisionHistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TenantCreateWithoutUserInput = {
    tenant_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutUserInput = {
    id?: number
    tenant_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutUserInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutUserInput, TenantUncheckedCreateWithoutUserInput>
  }

  export type CompanyCreateWithoutUserInput = {
    company_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCompaniesInput
    divisions?: DivisionCreateNestedManyWithoutCompanyInput
    user_history?: UserCompanyHistoryCreateNestedManyWithoutCompanyInput
    attendance_location?: AttendanceLocationCreateNestedManyWithoutCompanyInput
    sift_type?: ShiftTypeCreateNestedManyWithoutCompanyInput
    menu?: CompanyMenuCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutUserInput = {
    id?: number
    company_code: string
    name: string
    tenant_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    divisions?: DivisionUncheckedCreateNestedManyWithoutCompanyInput
    user_history?: UserCompanyHistoryUncheckedCreateNestedManyWithoutCompanyInput
    attendance_location?: AttendanceLocationUncheckedCreateNestedManyWithoutCompanyInput
    sift_type?: ShiftTypeUncheckedCreateNestedManyWithoutCompanyInput
    menu?: CompanyMenuUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutUserInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
  }

  export type DivisionCreateWithoutUserInput = {
    division_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutDivisionsInput
    user_history?: UserDivisionHistoryCreateNestedManyWithoutDivisionInput
  }

  export type DivisionUncheckedCreateWithoutUserInput = {
    id?: number
    division_code: string
    name: string
    company_code: string
    tenant_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user_history?: UserDivisionHistoryUncheckedCreateNestedManyWithoutDivisionInput
  }

  export type DivisionCreateOrConnectWithoutUserInput = {
    where: DivisionWhereUniqueInput
    create: XOR<DivisionCreateWithoutUserInput, DivisionUncheckedCreateWithoutUserInput>
  }

  export type UserAttendanceLocationCreateWithoutUserInput = {
    name: string
    user_attendance_loaction_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    location: AttendanceLocationCreateNestedOneWithoutUser_attendance_locationInput
  }

  export type UserAttendanceLocationUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    user_attendance_loaction_code: string
    attendance_location_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAttendanceLocationCreateOrConnectWithoutUserInput = {
    where: UserAttendanceLocationWhereUniqueInput
    create: XOR<UserAttendanceLocationCreateWithoutUserInput, UserAttendanceLocationUncheckedCreateWithoutUserInput>
  }

  export type UserAttendanceLocationCreateManyUserInputEnvelope = {
    data: UserAttendanceLocationCreateManyUserInput | UserAttendanceLocationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserAttendanceCreateWithoutUserInput = {
    status: string
    clockInLat?: string | null
    clockInLng?: string | null
    clockOutLat?: string | null
    clockOutLng?: string | null
    clockIn?: Date | string | null
    clockOut?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAttendanceUncheckedCreateWithoutUserInput = {
    id?: number
    status: string
    clockInLat?: string | null
    clockInLng?: string | null
    clockOutLat?: string | null
    clockOutLng?: string | null
    clockIn?: Date | string | null
    clockOut?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAttendanceCreateOrConnectWithoutUserInput = {
    where: UserAttendanceWhereUniqueInput
    create: XOR<UserAttendanceCreateWithoutUserInput, UserAttendanceUncheckedCreateWithoutUserInput>
  }

  export type UserAttendanceCreateManyUserInputEnvelope = {
    data: UserAttendanceCreateManyUserInput | UserAttendanceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserRoleUncheckedCreateWithoutUserInput = {
    id?: number
    role_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleCreateOrConnectWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleCreateManyUserInputEnvelope = {
    data: UserRoleCreateManyUserInput | UserRoleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserShiftCreateWithoutUserInput = {
    date: Date | string
    shift: ShiftTypeCreateNestedOneWithoutUser_shiftsInput
  }

  export type UserShiftUncheckedCreateWithoutUserInput = {
    id?: number
    shift_code: string
    date: Date | string
  }

  export type UserShiftCreateOrConnectWithoutUserInput = {
    where: UserShiftWhereUniqueInput
    create: XOR<UserShiftCreateWithoutUserInput, UserShiftUncheckedCreateWithoutUserInput>
  }

  export type UserShiftCreateManyUserInputEnvelope = {
    data: UserShiftCreateManyUserInput | UserShiftCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserMenuCreateWithoutUserInput = {
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    menu: CompanyMenuCreateNestedOneWithoutUser_menuInput
  }

  export type UserMenuUncheckedCreateWithoutUserInput = {
    id?: number
    menu_code: string
    sub_menu_code: string
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMenuCreateOrConnectWithoutUserInput = {
    where: UserMenuWhereUniqueInput
    create: XOR<UserMenuCreateWithoutUserInput, UserMenuUncheckedCreateWithoutUserInput>
  }

  export type UserMenuCreateManyUserInputEnvelope = {
    data: UserMenuCreateManyUserInput | UserMenuCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserMenuActionCreateWithoutUserInput = {
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    menu: MasterMenuActionCreateNestedOneWithoutUsersInput
  }

  export type UserMenuActionUncheckedCreateWithoutUserInput = {
    id?: number
    sub_menu_code: string
    action_code: string
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMenuActionCreateOrConnectWithoutUserInput = {
    where: UserMenuActionWhereUniqueInput
    create: XOR<UserMenuActionCreateWithoutUserInput, UserMenuActionUncheckedCreateWithoutUserInput>
  }

  export type UserMenuActionCreateManyUserInputEnvelope = {
    data: UserMenuActionCreateManyUserInput | UserMenuActionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserCompanyHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: UserCompanyHistoryWhereUniqueInput
    update: XOR<UserCompanyHistoryUpdateWithoutUserInput, UserCompanyHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<UserCompanyHistoryCreateWithoutUserInput, UserCompanyHistoryUncheckedCreateWithoutUserInput>
  }

  export type UserCompanyHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: UserCompanyHistoryWhereUniqueInput
    data: XOR<UserCompanyHistoryUpdateWithoutUserInput, UserCompanyHistoryUncheckedUpdateWithoutUserInput>
  }

  export type UserCompanyHistoryUpdateManyWithWhereWithoutUserInput = {
    where: UserCompanyHistoryScalarWhereInput
    data: XOR<UserCompanyHistoryUpdateManyMutationInput, UserCompanyHistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type UserDivisionHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: UserDivisionHistoryWhereUniqueInput
    update: XOR<UserDivisionHistoryUpdateWithoutUserInput, UserDivisionHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<UserDivisionHistoryCreateWithoutUserInput, UserDivisionHistoryUncheckedCreateWithoutUserInput>
  }

  export type UserDivisionHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: UserDivisionHistoryWhereUniqueInput
    data: XOR<UserDivisionHistoryUpdateWithoutUserInput, UserDivisionHistoryUncheckedUpdateWithoutUserInput>
  }

  export type UserDivisionHistoryUpdateManyWithWhereWithoutUserInput = {
    where: UserDivisionHistoryScalarWhereInput
    data: XOR<UserDivisionHistoryUpdateManyMutationInput, UserDivisionHistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type TenantUpsertWithoutUserInput = {
    update: XOR<TenantUpdateWithoutUserInput, TenantUncheckedUpdateWithoutUserInput>
    create: XOR<TenantCreateWithoutUserInput, TenantUncheckedCreateWithoutUserInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutUserInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutUserInput, TenantUncheckedUpdateWithoutUserInput>
  }

  export type TenantUpdateWithoutUserInput = {
    tenant_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenant_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type CompanyUpsertWithoutUserInput = {
    update: XOR<CompanyUpdateWithoutUserInput, CompanyUncheckedUpdateWithoutUserInput>
    create: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutUserInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutUserInput, CompanyUncheckedUpdateWithoutUserInput>
  }

  export type CompanyUpdateWithoutUserInput = {
    company_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCompaniesNestedInput
    divisions?: DivisionUpdateManyWithoutCompanyNestedInput
    user_history?: UserCompanyHistoryUpdateManyWithoutCompanyNestedInput
    attendance_location?: AttendanceLocationUpdateManyWithoutCompanyNestedInput
    sift_type?: ShiftTypeUpdateManyWithoutCompanyNestedInput
    menu?: CompanyMenuUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    divisions?: DivisionUncheckedUpdateManyWithoutCompanyNestedInput
    user_history?: UserCompanyHistoryUncheckedUpdateManyWithoutCompanyNestedInput
    attendance_location?: AttendanceLocationUncheckedUpdateManyWithoutCompanyNestedInput
    sift_type?: ShiftTypeUncheckedUpdateManyWithoutCompanyNestedInput
    menu?: CompanyMenuUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type DivisionUpsertWithoutUserInput = {
    update: XOR<DivisionUpdateWithoutUserInput, DivisionUncheckedUpdateWithoutUserInput>
    create: XOR<DivisionCreateWithoutUserInput, DivisionUncheckedCreateWithoutUserInput>
    where?: DivisionWhereInput
  }

  export type DivisionUpdateToOneWithWhereWithoutUserInput = {
    where?: DivisionWhereInput
    data: XOR<DivisionUpdateWithoutUserInput, DivisionUncheckedUpdateWithoutUserInput>
  }

  export type DivisionUpdateWithoutUserInput = {
    division_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutDivisionsNestedInput
    user_history?: UserDivisionHistoryUpdateManyWithoutDivisionNestedInput
  }

  export type DivisionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    division_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_history?: UserDivisionHistoryUncheckedUpdateManyWithoutDivisionNestedInput
  }

  export type UserAttendanceLocationUpsertWithWhereUniqueWithoutUserInput = {
    where: UserAttendanceLocationWhereUniqueInput
    update: XOR<UserAttendanceLocationUpdateWithoutUserInput, UserAttendanceLocationUncheckedUpdateWithoutUserInput>
    create: XOR<UserAttendanceLocationCreateWithoutUserInput, UserAttendanceLocationUncheckedCreateWithoutUserInput>
  }

  export type UserAttendanceLocationUpdateWithWhereUniqueWithoutUserInput = {
    where: UserAttendanceLocationWhereUniqueInput
    data: XOR<UserAttendanceLocationUpdateWithoutUserInput, UserAttendanceLocationUncheckedUpdateWithoutUserInput>
  }

  export type UserAttendanceLocationUpdateManyWithWhereWithoutUserInput = {
    where: UserAttendanceLocationScalarWhereInput
    data: XOR<UserAttendanceLocationUpdateManyMutationInput, UserAttendanceLocationUncheckedUpdateManyWithoutUserInput>
  }

  export type UserAttendanceLocationScalarWhereInput = {
    AND?: UserAttendanceLocationScalarWhereInput | UserAttendanceLocationScalarWhereInput[]
    OR?: UserAttendanceLocationScalarWhereInput[]
    NOT?: UserAttendanceLocationScalarWhereInput | UserAttendanceLocationScalarWhereInput[]
    id?: IntFilter<"UserAttendanceLocation"> | number
    name?: StringFilter<"UserAttendanceLocation"> | string
    user_attendance_loaction_code?: StringFilter<"UserAttendanceLocation"> | string
    user_code?: StringFilter<"UserAttendanceLocation"> | string
    company_code?: StringFilter<"UserAttendanceLocation"> | string
    tenant_code?: StringFilter<"UserAttendanceLocation"> | string
    division_code?: StringFilter<"UserAttendanceLocation"> | string
    attendance_location_code?: StringFilter<"UserAttendanceLocation"> | string
    createdAt?: DateTimeFilter<"UserAttendanceLocation"> | Date | string
    updatedAt?: DateTimeFilter<"UserAttendanceLocation"> | Date | string
  }

  export type UserAttendanceUpsertWithWhereUniqueWithoutUserInput = {
    where: UserAttendanceWhereUniqueInput
    update: XOR<UserAttendanceUpdateWithoutUserInput, UserAttendanceUncheckedUpdateWithoutUserInput>
    create: XOR<UserAttendanceCreateWithoutUserInput, UserAttendanceUncheckedCreateWithoutUserInput>
  }

  export type UserAttendanceUpdateWithWhereUniqueWithoutUserInput = {
    where: UserAttendanceWhereUniqueInput
    data: XOR<UserAttendanceUpdateWithoutUserInput, UserAttendanceUncheckedUpdateWithoutUserInput>
  }

  export type UserAttendanceUpdateManyWithWhereWithoutUserInput = {
    where: UserAttendanceScalarWhereInput
    data: XOR<UserAttendanceUpdateManyMutationInput, UserAttendanceUncheckedUpdateManyWithoutUserInput>
  }

  export type UserAttendanceScalarWhereInput = {
    AND?: UserAttendanceScalarWhereInput | UserAttendanceScalarWhereInput[]
    OR?: UserAttendanceScalarWhereInput[]
    NOT?: UserAttendanceScalarWhereInput | UserAttendanceScalarWhereInput[]
    id?: IntFilter<"UserAttendance"> | number
    status?: StringFilter<"UserAttendance"> | string
    clockInLat?: StringNullableFilter<"UserAttendance"> | string | null
    clockInLng?: StringNullableFilter<"UserAttendance"> | string | null
    clockOutLat?: StringNullableFilter<"UserAttendance"> | string | null
    clockOutLng?: StringNullableFilter<"UserAttendance"> | string | null
    clockIn?: DateTimeNullableFilter<"UserAttendance"> | Date | string | null
    clockOut?: DateTimeNullableFilter<"UserAttendance"> | Date | string | null
    company_code?: StringFilter<"UserAttendance"> | string
    tenant_code?: StringFilter<"UserAttendance"> | string
    division_code?: StringFilter<"UserAttendance"> | string
    user_code?: StringFilter<"UserAttendance"> | string
    createdAt?: DateTimeFilter<"UserAttendance"> | Date | string
    updatedAt?: DateTimeFilter<"UserAttendance"> | Date | string
  }

  export type UserRoleUpsertWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutUserInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutUserInput>
  }

  export type UserRoleScalarWhereInput = {
    AND?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    OR?: UserRoleScalarWhereInput[]
    NOT?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    id?: IntFilter<"UserRole"> | number
    company_code?: StringFilter<"UserRole"> | string
    tenant_code?: StringFilter<"UserRole"> | string
    division_code?: StringFilter<"UserRole"> | string
    user_code?: StringFilter<"UserRole"> | string
    role_code?: StringFilter<"UserRole"> | string
    createdAt?: DateTimeFilter<"UserRole"> | Date | string
    updatedAt?: DateTimeFilter<"UserRole"> | Date | string
  }

  export type UserShiftUpsertWithWhereUniqueWithoutUserInput = {
    where: UserShiftWhereUniqueInput
    update: XOR<UserShiftUpdateWithoutUserInput, UserShiftUncheckedUpdateWithoutUserInput>
    create: XOR<UserShiftCreateWithoutUserInput, UserShiftUncheckedCreateWithoutUserInput>
  }

  export type UserShiftUpdateWithWhereUniqueWithoutUserInput = {
    where: UserShiftWhereUniqueInput
    data: XOR<UserShiftUpdateWithoutUserInput, UserShiftUncheckedUpdateWithoutUserInput>
  }

  export type UserShiftUpdateManyWithWhereWithoutUserInput = {
    where: UserShiftScalarWhereInput
    data: XOR<UserShiftUpdateManyMutationInput, UserShiftUncheckedUpdateManyWithoutUserInput>
  }

  export type UserShiftScalarWhereInput = {
    AND?: UserShiftScalarWhereInput | UserShiftScalarWhereInput[]
    OR?: UserShiftScalarWhereInput[]
    NOT?: UserShiftScalarWhereInput | UserShiftScalarWhereInput[]
    id?: IntFilter<"UserShift"> | number
    company_code?: StringFilter<"UserShift"> | string
    tenant_code?: StringFilter<"UserShift"> | string
    division_code?: StringFilter<"UserShift"> | string
    user_code?: StringFilter<"UserShift"> | string
    shift_code?: StringFilter<"UserShift"> | string
    date?: DateTimeFilter<"UserShift"> | Date | string
  }

  export type UserMenuUpsertWithWhereUniqueWithoutUserInput = {
    where: UserMenuWhereUniqueInput
    update: XOR<UserMenuUpdateWithoutUserInput, UserMenuUncheckedUpdateWithoutUserInput>
    create: XOR<UserMenuCreateWithoutUserInput, UserMenuUncheckedCreateWithoutUserInput>
  }

  export type UserMenuUpdateWithWhereUniqueWithoutUserInput = {
    where: UserMenuWhereUniqueInput
    data: XOR<UserMenuUpdateWithoutUserInput, UserMenuUncheckedUpdateWithoutUserInput>
  }

  export type UserMenuUpdateManyWithWhereWithoutUserInput = {
    where: UserMenuScalarWhereInput
    data: XOR<UserMenuUpdateManyMutationInput, UserMenuUncheckedUpdateManyWithoutUserInput>
  }

  export type UserMenuScalarWhereInput = {
    AND?: UserMenuScalarWhereInput | UserMenuScalarWhereInput[]
    OR?: UserMenuScalarWhereInput[]
    NOT?: UserMenuScalarWhereInput | UserMenuScalarWhereInput[]
    id?: IntFilter<"UserMenu"> | number
    menu_code?: StringFilter<"UserMenu"> | string
    sub_menu_code?: StringFilter<"UserMenu"> | string
    company_code?: StringFilter<"UserMenu"> | string
    tenant_code?: StringFilter<"UserMenu"> | string
    division_code?: StringFilter<"UserMenu"> | string
    user_code?: StringFilter<"UserMenu"> | string
    status?: BoolFilter<"UserMenu"> | boolean
    createdAt?: DateTimeFilter<"UserMenu"> | Date | string
    updatedAt?: DateTimeFilter<"UserMenu"> | Date | string
  }

  export type UserMenuActionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserMenuActionWhereUniqueInput
    update: XOR<UserMenuActionUpdateWithoutUserInput, UserMenuActionUncheckedUpdateWithoutUserInput>
    create: XOR<UserMenuActionCreateWithoutUserInput, UserMenuActionUncheckedCreateWithoutUserInput>
  }

  export type UserMenuActionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserMenuActionWhereUniqueInput
    data: XOR<UserMenuActionUpdateWithoutUserInput, UserMenuActionUncheckedUpdateWithoutUserInput>
  }

  export type UserMenuActionUpdateManyWithWhereWithoutUserInput = {
    where: UserMenuActionScalarWhereInput
    data: XOR<UserMenuActionUpdateManyMutationInput, UserMenuActionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserMenuActionScalarWhereInput = {
    AND?: UserMenuActionScalarWhereInput | UserMenuActionScalarWhereInput[]
    OR?: UserMenuActionScalarWhereInput[]
    NOT?: UserMenuActionScalarWhereInput | UserMenuActionScalarWhereInput[]
    id?: IntFilter<"UserMenuAction"> | number
    sub_menu_code?: StringFilter<"UserMenuAction"> | string
    action_code?: StringFilter<"UserMenuAction"> | string
    company_code?: StringFilter<"UserMenuAction"> | string
    tenant_code?: StringFilter<"UserMenuAction"> | string
    division_code?: StringFilter<"UserMenuAction"> | string
    user_code?: StringFilter<"UserMenuAction"> | string
    status?: BoolFilter<"UserMenuAction"> | boolean
    createdAt?: DateTimeFilter<"UserMenuAction"> | Date | string
    updatedAt?: DateTimeFilter<"UserMenuAction"> | Date | string
  }

  export type UserCreateWithoutCompany_historyInput = {
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    division_history?: UserDivisionHistoryCreateNestedManyWithoutUserInput
    tenant: TenantCreateNestedOneWithoutUserInput
    company: CompanyCreateNestedOneWithoutUserInput
    division: DivisionCreateNestedOneWithoutUserInput
    attendances_location?: UserAttendanceLocationCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftCreateNestedManyWithoutUserInput
    userMenus?: UserMenuCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCompany_historyInput = {
    id?: number
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    tenant_code: string
    company_code: string
    division_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    division_history?: UserDivisionHistoryUncheckedCreateNestedManyWithoutUserInput
    attendances_location?: UserAttendanceLocationUncheckedCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftUncheckedCreateNestedManyWithoutUserInput
    userMenus?: UserMenuUncheckedCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCompany_historyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompany_historyInput, UserUncheckedCreateWithoutCompany_historyInput>
  }

  export type CompanyCreateWithoutUser_historyInput = {
    company_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCompaniesInput
    divisions?: DivisionCreateNestedManyWithoutCompanyInput
    user?: UserCreateNestedManyWithoutCompanyInput
    attendance_location?: AttendanceLocationCreateNestedManyWithoutCompanyInput
    sift_type?: ShiftTypeCreateNestedManyWithoutCompanyInput
    menu?: CompanyMenuCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutUser_historyInput = {
    id?: number
    company_code: string
    name: string
    tenant_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    divisions?: DivisionUncheckedCreateNestedManyWithoutCompanyInput
    user?: UserUncheckedCreateNestedManyWithoutCompanyInput
    attendance_location?: AttendanceLocationUncheckedCreateNestedManyWithoutCompanyInput
    sift_type?: ShiftTypeUncheckedCreateNestedManyWithoutCompanyInput
    menu?: CompanyMenuUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutUser_historyInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutUser_historyInput, CompanyUncheckedCreateWithoutUser_historyInput>
  }

  export type UserUpsertWithoutCompany_historyInput = {
    update: XOR<UserUpdateWithoutCompany_historyInput, UserUncheckedUpdateWithoutCompany_historyInput>
    create: XOR<UserCreateWithoutCompany_historyInput, UserUncheckedCreateWithoutCompany_historyInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCompany_historyInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCompany_historyInput, UserUncheckedUpdateWithoutCompany_historyInput>
  }

  export type UserUpdateWithoutCompany_historyInput = {
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    division_history?: UserDivisionHistoryUpdateManyWithoutUserNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUserNestedInput
    company?: CompanyUpdateOneRequiredWithoutUserNestedInput
    division?: DivisionUpdateOneRequiredWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCompany_historyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    tenant_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    division_history?: UserDivisionHistoryUncheckedUpdateManyWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUncheckedUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUncheckedUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUncheckedUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CompanyUpsertWithoutUser_historyInput = {
    update: XOR<CompanyUpdateWithoutUser_historyInput, CompanyUncheckedUpdateWithoutUser_historyInput>
    create: XOR<CompanyCreateWithoutUser_historyInput, CompanyUncheckedCreateWithoutUser_historyInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutUser_historyInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutUser_historyInput, CompanyUncheckedUpdateWithoutUser_historyInput>
  }

  export type CompanyUpdateWithoutUser_historyInput = {
    company_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCompaniesNestedInput
    divisions?: DivisionUpdateManyWithoutCompanyNestedInput
    user?: UserUpdateManyWithoutCompanyNestedInput
    attendance_location?: AttendanceLocationUpdateManyWithoutCompanyNestedInput
    sift_type?: ShiftTypeUpdateManyWithoutCompanyNestedInput
    menu?: CompanyMenuUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutUser_historyInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    divisions?: DivisionUncheckedUpdateManyWithoutCompanyNestedInput
    user?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    attendance_location?: AttendanceLocationUncheckedUpdateManyWithoutCompanyNestedInput
    sift_type?: ShiftTypeUncheckedUpdateManyWithoutCompanyNestedInput
    menu?: CompanyMenuUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type UserCreateWithoutDivision_historyInput = {
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryCreateNestedManyWithoutUserInput
    tenant: TenantCreateNestedOneWithoutUserInput
    company: CompanyCreateNestedOneWithoutUserInput
    division: DivisionCreateNestedOneWithoutUserInput
    attendances_location?: UserAttendanceLocationCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftCreateNestedManyWithoutUserInput
    userMenus?: UserMenuCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDivision_historyInput = {
    id?: number
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    tenant_code: string
    company_code: string
    division_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryUncheckedCreateNestedManyWithoutUserInput
    attendances_location?: UserAttendanceLocationUncheckedCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftUncheckedCreateNestedManyWithoutUserInput
    userMenus?: UserMenuUncheckedCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDivision_historyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDivision_historyInput, UserUncheckedCreateWithoutDivision_historyInput>
  }

  export type DivisionCreateWithoutUser_historyInput = {
    division_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutDivisionsInput
    user?: UserCreateNestedManyWithoutDivisionInput
  }

  export type DivisionUncheckedCreateWithoutUser_historyInput = {
    id?: number
    division_code: string
    name: string
    company_code: string
    tenant_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserUncheckedCreateNestedManyWithoutDivisionInput
  }

  export type DivisionCreateOrConnectWithoutUser_historyInput = {
    where: DivisionWhereUniqueInput
    create: XOR<DivisionCreateWithoutUser_historyInput, DivisionUncheckedCreateWithoutUser_historyInput>
  }

  export type UserUpsertWithoutDivision_historyInput = {
    update: XOR<UserUpdateWithoutDivision_historyInput, UserUncheckedUpdateWithoutDivision_historyInput>
    create: XOR<UserCreateWithoutDivision_historyInput, UserUncheckedCreateWithoutDivision_historyInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDivision_historyInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDivision_historyInput, UserUncheckedUpdateWithoutDivision_historyInput>
  }

  export type UserUpdateWithoutDivision_historyInput = {
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUpdateManyWithoutUserNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUserNestedInput
    company?: CompanyUpdateOneRequiredWithoutUserNestedInput
    division?: DivisionUpdateOneRequiredWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDivision_historyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    tenant_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUncheckedUpdateManyWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUncheckedUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUncheckedUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUncheckedUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DivisionUpsertWithoutUser_historyInput = {
    update: XOR<DivisionUpdateWithoutUser_historyInput, DivisionUncheckedUpdateWithoutUser_historyInput>
    create: XOR<DivisionCreateWithoutUser_historyInput, DivisionUncheckedCreateWithoutUser_historyInput>
    where?: DivisionWhereInput
  }

  export type DivisionUpdateToOneWithWhereWithoutUser_historyInput = {
    where?: DivisionWhereInput
    data: XOR<DivisionUpdateWithoutUser_historyInput, DivisionUncheckedUpdateWithoutUser_historyInput>
  }

  export type DivisionUpdateWithoutUser_historyInput = {
    division_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutDivisionsNestedInput
    user?: UserUpdateManyWithoutDivisionNestedInput
  }

  export type DivisionUncheckedUpdateWithoutUser_historyInput = {
    id?: IntFieldUpdateOperationsInput | number
    division_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUncheckedUpdateManyWithoutDivisionNestedInput
  }

  export type UserAttendanceLocationCreateWithoutLocationInput = {
    name: string
    user_attendance_loaction_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAttendances_locationInput
  }

  export type UserAttendanceLocationUncheckedCreateWithoutLocationInput = {
    id?: number
    name: string
    user_attendance_loaction_code: string
    user_code: string
    division_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAttendanceLocationCreateOrConnectWithoutLocationInput = {
    where: UserAttendanceLocationWhereUniqueInput
    create: XOR<UserAttendanceLocationCreateWithoutLocationInput, UserAttendanceLocationUncheckedCreateWithoutLocationInput>
  }

  export type UserAttendanceLocationCreateManyLocationInputEnvelope = {
    data: UserAttendanceLocationCreateManyLocationInput | UserAttendanceLocationCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type CompanyCreateWithoutAttendance_locationInput = {
    company_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCompaniesInput
    divisions?: DivisionCreateNestedManyWithoutCompanyInput
    user_history?: UserCompanyHistoryCreateNestedManyWithoutCompanyInput
    user?: UserCreateNestedManyWithoutCompanyInput
    sift_type?: ShiftTypeCreateNestedManyWithoutCompanyInput
    menu?: CompanyMenuCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutAttendance_locationInput = {
    id?: number
    company_code: string
    name: string
    tenant_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    divisions?: DivisionUncheckedCreateNestedManyWithoutCompanyInput
    user_history?: UserCompanyHistoryUncheckedCreateNestedManyWithoutCompanyInput
    user?: UserUncheckedCreateNestedManyWithoutCompanyInput
    sift_type?: ShiftTypeUncheckedCreateNestedManyWithoutCompanyInput
    menu?: CompanyMenuUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutAttendance_locationInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutAttendance_locationInput, CompanyUncheckedCreateWithoutAttendance_locationInput>
  }

  export type UserAttendanceLocationUpsertWithWhereUniqueWithoutLocationInput = {
    where: UserAttendanceLocationWhereUniqueInput
    update: XOR<UserAttendanceLocationUpdateWithoutLocationInput, UserAttendanceLocationUncheckedUpdateWithoutLocationInput>
    create: XOR<UserAttendanceLocationCreateWithoutLocationInput, UserAttendanceLocationUncheckedCreateWithoutLocationInput>
  }

  export type UserAttendanceLocationUpdateWithWhereUniqueWithoutLocationInput = {
    where: UserAttendanceLocationWhereUniqueInput
    data: XOR<UserAttendanceLocationUpdateWithoutLocationInput, UserAttendanceLocationUncheckedUpdateWithoutLocationInput>
  }

  export type UserAttendanceLocationUpdateManyWithWhereWithoutLocationInput = {
    where: UserAttendanceLocationScalarWhereInput
    data: XOR<UserAttendanceLocationUpdateManyMutationInput, UserAttendanceLocationUncheckedUpdateManyWithoutLocationInput>
  }

  export type CompanyUpsertWithoutAttendance_locationInput = {
    update: XOR<CompanyUpdateWithoutAttendance_locationInput, CompanyUncheckedUpdateWithoutAttendance_locationInput>
    create: XOR<CompanyCreateWithoutAttendance_locationInput, CompanyUncheckedCreateWithoutAttendance_locationInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutAttendance_locationInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutAttendance_locationInput, CompanyUncheckedUpdateWithoutAttendance_locationInput>
  }

  export type CompanyUpdateWithoutAttendance_locationInput = {
    company_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCompaniesNestedInput
    divisions?: DivisionUpdateManyWithoutCompanyNestedInput
    user_history?: UserCompanyHistoryUpdateManyWithoutCompanyNestedInput
    user?: UserUpdateManyWithoutCompanyNestedInput
    sift_type?: ShiftTypeUpdateManyWithoutCompanyNestedInput
    menu?: CompanyMenuUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutAttendance_locationInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    divisions?: DivisionUncheckedUpdateManyWithoutCompanyNestedInput
    user_history?: UserCompanyHistoryUncheckedUpdateManyWithoutCompanyNestedInput
    user?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    sift_type?: ShiftTypeUncheckedUpdateManyWithoutCompanyNestedInput
    menu?: CompanyMenuUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type UserCreateWithoutAttendances_locationInput = {
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryCreateNestedManyWithoutUserInput
    tenant: TenantCreateNestedOneWithoutUserInput
    company: CompanyCreateNestedOneWithoutUserInput
    division: DivisionCreateNestedOneWithoutUserInput
    user_attendance?: UserAttendanceCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftCreateNestedManyWithoutUserInput
    userMenus?: UserMenuCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAttendances_locationInput = {
    id?: number
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    tenant_code: string
    company_code: string
    division_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryUncheckedCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryUncheckedCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftUncheckedCreateNestedManyWithoutUserInput
    userMenus?: UserMenuUncheckedCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAttendances_locationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAttendances_locationInput, UserUncheckedCreateWithoutAttendances_locationInput>
  }

  export type AttendanceLocationCreateWithoutUser_attendance_locationInput = {
    attendance_location_code: string
    name: string
    lat: string
    lng: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutAttendance_locationInput
  }

  export type AttendanceLocationUncheckedCreateWithoutUser_attendance_locationInput = {
    id?: number
    company_code: string
    attendance_location_code: string
    tenant_code: string
    name: string
    lat: string
    lng: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceLocationCreateOrConnectWithoutUser_attendance_locationInput = {
    where: AttendanceLocationWhereUniqueInput
    create: XOR<AttendanceLocationCreateWithoutUser_attendance_locationInput, AttendanceLocationUncheckedCreateWithoutUser_attendance_locationInput>
  }

  export type UserUpsertWithoutAttendances_locationInput = {
    update: XOR<UserUpdateWithoutAttendances_locationInput, UserUncheckedUpdateWithoutAttendances_locationInput>
    create: XOR<UserCreateWithoutAttendances_locationInput, UserUncheckedCreateWithoutAttendances_locationInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAttendances_locationInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAttendances_locationInput, UserUncheckedUpdateWithoutAttendances_locationInput>
  }

  export type UserUpdateWithoutAttendances_locationInput = {
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUpdateManyWithoutUserNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUserNestedInput
    company?: CompanyUpdateOneRequiredWithoutUserNestedInput
    division?: DivisionUpdateOneRequiredWithoutUserNestedInput
    user_attendance?: UserAttendanceUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAttendances_locationInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    tenant_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUncheckedUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUncheckedUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUncheckedUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUncheckedUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AttendanceLocationUpsertWithoutUser_attendance_locationInput = {
    update: XOR<AttendanceLocationUpdateWithoutUser_attendance_locationInput, AttendanceLocationUncheckedUpdateWithoutUser_attendance_locationInput>
    create: XOR<AttendanceLocationCreateWithoutUser_attendance_locationInput, AttendanceLocationUncheckedCreateWithoutUser_attendance_locationInput>
    where?: AttendanceLocationWhereInput
  }

  export type AttendanceLocationUpdateToOneWithWhereWithoutUser_attendance_locationInput = {
    where?: AttendanceLocationWhereInput
    data: XOR<AttendanceLocationUpdateWithoutUser_attendance_locationInput, AttendanceLocationUncheckedUpdateWithoutUser_attendance_locationInput>
  }

  export type AttendanceLocationUpdateWithoutUser_attendance_locationInput = {
    attendance_location_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutAttendance_locationNestedInput
  }

  export type AttendanceLocationUncheckedUpdateWithoutUser_attendance_locationInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    attendance_location_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutUser_attendanceInput = {
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryCreateNestedManyWithoutUserInput
    tenant: TenantCreateNestedOneWithoutUserInput
    company: CompanyCreateNestedOneWithoutUserInput
    division: DivisionCreateNestedOneWithoutUserInput
    attendances_location?: UserAttendanceLocationCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftCreateNestedManyWithoutUserInput
    userMenus?: UserMenuCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUser_attendanceInput = {
    id?: number
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    tenant_code: string
    company_code: string
    division_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryUncheckedCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryUncheckedCreateNestedManyWithoutUserInput
    attendances_location?: UserAttendanceLocationUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftUncheckedCreateNestedManyWithoutUserInput
    userMenus?: UserMenuUncheckedCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUser_attendanceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUser_attendanceInput, UserUncheckedCreateWithoutUser_attendanceInput>
  }

  export type UserUpsertWithoutUser_attendanceInput = {
    update: XOR<UserUpdateWithoutUser_attendanceInput, UserUncheckedUpdateWithoutUser_attendanceInput>
    create: XOR<UserCreateWithoutUser_attendanceInput, UserUncheckedCreateWithoutUser_attendanceInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUser_attendanceInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUser_attendanceInput, UserUncheckedUpdateWithoutUser_attendanceInput>
  }

  export type UserUpdateWithoutUser_attendanceInput = {
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUpdateManyWithoutUserNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUserNestedInput
    company?: CompanyUpdateOneRequiredWithoutUserNestedInput
    division?: DivisionUpdateOneRequiredWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUser_attendanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    tenant_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUncheckedUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUncheckedUpdateManyWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUncheckedUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUncheckedUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserShiftCreateWithoutShiftInput = {
    date: Date | string
    user: UserCreateNestedOneWithoutUser_shiftsInput
  }

  export type UserShiftUncheckedCreateWithoutShiftInput = {
    id?: number
    division_code: string
    user_code: string
    date: Date | string
  }

  export type UserShiftCreateOrConnectWithoutShiftInput = {
    where: UserShiftWhereUniqueInput
    create: XOR<UserShiftCreateWithoutShiftInput, UserShiftUncheckedCreateWithoutShiftInput>
  }

  export type UserShiftCreateManyShiftInputEnvelope = {
    data: UserShiftCreateManyShiftInput | UserShiftCreateManyShiftInput[]
    skipDuplicates?: boolean
  }

  export type CompanyCreateWithoutSift_typeInput = {
    company_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCompaniesInput
    divisions?: DivisionCreateNestedManyWithoutCompanyInput
    user_history?: UserCompanyHistoryCreateNestedManyWithoutCompanyInput
    user?: UserCreateNestedManyWithoutCompanyInput
    attendance_location?: AttendanceLocationCreateNestedManyWithoutCompanyInput
    menu?: CompanyMenuCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutSift_typeInput = {
    id?: number
    company_code: string
    name: string
    tenant_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    divisions?: DivisionUncheckedCreateNestedManyWithoutCompanyInput
    user_history?: UserCompanyHistoryUncheckedCreateNestedManyWithoutCompanyInput
    user?: UserUncheckedCreateNestedManyWithoutCompanyInput
    attendance_location?: AttendanceLocationUncheckedCreateNestedManyWithoutCompanyInput
    menu?: CompanyMenuUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutSift_typeInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutSift_typeInput, CompanyUncheckedCreateWithoutSift_typeInput>
  }

  export type UserShiftUpsertWithWhereUniqueWithoutShiftInput = {
    where: UserShiftWhereUniqueInput
    update: XOR<UserShiftUpdateWithoutShiftInput, UserShiftUncheckedUpdateWithoutShiftInput>
    create: XOR<UserShiftCreateWithoutShiftInput, UserShiftUncheckedCreateWithoutShiftInput>
  }

  export type UserShiftUpdateWithWhereUniqueWithoutShiftInput = {
    where: UserShiftWhereUniqueInput
    data: XOR<UserShiftUpdateWithoutShiftInput, UserShiftUncheckedUpdateWithoutShiftInput>
  }

  export type UserShiftUpdateManyWithWhereWithoutShiftInput = {
    where: UserShiftScalarWhereInput
    data: XOR<UserShiftUpdateManyMutationInput, UserShiftUncheckedUpdateManyWithoutShiftInput>
  }

  export type CompanyUpsertWithoutSift_typeInput = {
    update: XOR<CompanyUpdateWithoutSift_typeInput, CompanyUncheckedUpdateWithoutSift_typeInput>
    create: XOR<CompanyCreateWithoutSift_typeInput, CompanyUncheckedCreateWithoutSift_typeInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutSift_typeInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutSift_typeInput, CompanyUncheckedUpdateWithoutSift_typeInput>
  }

  export type CompanyUpdateWithoutSift_typeInput = {
    company_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCompaniesNestedInput
    divisions?: DivisionUpdateManyWithoutCompanyNestedInput
    user_history?: UserCompanyHistoryUpdateManyWithoutCompanyNestedInput
    user?: UserUpdateManyWithoutCompanyNestedInput
    attendance_location?: AttendanceLocationUpdateManyWithoutCompanyNestedInput
    menu?: CompanyMenuUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutSift_typeInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    divisions?: DivisionUncheckedUpdateManyWithoutCompanyNestedInput
    user_history?: UserCompanyHistoryUncheckedUpdateManyWithoutCompanyNestedInput
    user?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    attendance_location?: AttendanceLocationUncheckedUpdateManyWithoutCompanyNestedInput
    menu?: CompanyMenuUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type UserCreateWithoutUser_shiftsInput = {
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryCreateNestedManyWithoutUserInput
    tenant: TenantCreateNestedOneWithoutUserInput
    company: CompanyCreateNestedOneWithoutUserInput
    division: DivisionCreateNestedOneWithoutUserInput
    attendances_location?: UserAttendanceLocationCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    userMenus?: UserMenuCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUser_shiftsInput = {
    id?: number
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    tenant_code: string
    company_code: string
    division_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryUncheckedCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryUncheckedCreateNestedManyWithoutUserInput
    attendances_location?: UserAttendanceLocationUncheckedCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    userMenus?: UserMenuUncheckedCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUser_shiftsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUser_shiftsInput, UserUncheckedCreateWithoutUser_shiftsInput>
  }

  export type ShiftTypeCreateWithoutUser_shiftsInput = {
    name: string
    startTime: Date | string
    endTime: Date | string
    shift_code: string
    company: CompanyCreateNestedOneWithoutSift_typeInput
  }

  export type ShiftTypeUncheckedCreateWithoutUser_shiftsInput = {
    id?: number
    name: string
    startTime: Date | string
    endTime: Date | string
    company_code: string
    shift_code: string
    tenant_code: string
  }

  export type ShiftTypeCreateOrConnectWithoutUser_shiftsInput = {
    where: ShiftTypeWhereUniqueInput
    create: XOR<ShiftTypeCreateWithoutUser_shiftsInput, ShiftTypeUncheckedCreateWithoutUser_shiftsInput>
  }

  export type UserUpsertWithoutUser_shiftsInput = {
    update: XOR<UserUpdateWithoutUser_shiftsInput, UserUncheckedUpdateWithoutUser_shiftsInput>
    create: XOR<UserCreateWithoutUser_shiftsInput, UserUncheckedCreateWithoutUser_shiftsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUser_shiftsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUser_shiftsInput, UserUncheckedUpdateWithoutUser_shiftsInput>
  }

  export type UserUpdateWithoutUser_shiftsInput = {
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUpdateManyWithoutUserNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUserNestedInput
    company?: CompanyUpdateOneRequiredWithoutUserNestedInput
    division?: DivisionUpdateOneRequiredWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUser_shiftsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    tenant_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUncheckedUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUncheckedUpdateManyWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUncheckedUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUncheckedUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ShiftTypeUpsertWithoutUser_shiftsInput = {
    update: XOR<ShiftTypeUpdateWithoutUser_shiftsInput, ShiftTypeUncheckedUpdateWithoutUser_shiftsInput>
    create: XOR<ShiftTypeCreateWithoutUser_shiftsInput, ShiftTypeUncheckedCreateWithoutUser_shiftsInput>
    where?: ShiftTypeWhereInput
  }

  export type ShiftTypeUpdateToOneWithWhereWithoutUser_shiftsInput = {
    where?: ShiftTypeWhereInput
    data: XOR<ShiftTypeUpdateWithoutUser_shiftsInput, ShiftTypeUncheckedUpdateWithoutUser_shiftsInput>
  }

  export type ShiftTypeUpdateWithoutUser_shiftsInput = {
    name?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    shift_code?: StringFieldUpdateOperationsInput | string
    company?: CompanyUpdateOneRequiredWithoutSift_typeNestedInput
  }

  export type ShiftTypeUncheckedUpdateWithoutUser_shiftsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    company_code?: StringFieldUpdateOperationsInput | string
    shift_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleCreateWithoutRoleInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRolesInput
  }

  export type UserRoleUncheckedCreateWithoutRoleInput = {
    id?: number
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleCreateOrConnectWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleCreateManyRoleInputEnvelope = {
    data: UserRoleCreateManyRoleInput | UserRoleCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutRoleInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutRoleInput>
  }

  export type UserCreateWithoutRolesInput = {
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryCreateNestedManyWithoutUserInput
    tenant: TenantCreateNestedOneWithoutUserInput
    company: CompanyCreateNestedOneWithoutUserInput
    division: DivisionCreateNestedOneWithoutUserInput
    attendances_location?: UserAttendanceLocationCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftCreateNestedManyWithoutUserInput
    userMenus?: UserMenuCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRolesInput = {
    id?: number
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    tenant_code: string
    company_code: string
    division_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryUncheckedCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryUncheckedCreateNestedManyWithoutUserInput
    attendances_location?: UserAttendanceLocationUncheckedCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceUncheckedCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftUncheckedCreateNestedManyWithoutUserInput
    userMenus?: UserMenuUncheckedCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
  }

  export type RoleCreateWithoutUsersInput = {
    role_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    id?: number
    role_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutRolesInput = {
    update: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRolesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
  }

  export type UserUpdateWithoutRolesInput = {
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUpdateManyWithoutUserNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUserNestedInput
    company?: CompanyUpdateOneRequiredWithoutUserNestedInput
    division?: DivisionUpdateOneRequiredWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    tenant_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUncheckedUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUncheckedUpdateManyWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUncheckedUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUncheckedUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUncheckedUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUncheckedUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoleUpsertWithoutUsersInput = {
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUsersInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateWithoutUsersInput = {
    role_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterSubMenuCreateWithoutMenuInput = {
    sub_menu_code: string
    name: string
    url: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    actions?: MasterMenuActionCreateNestedManyWithoutSub_menuInput
  }

  export type MasterSubMenuUncheckedCreateWithoutMenuInput = {
    id?: number
    sub_menu_code: string
    name: string
    url: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    actions?: MasterMenuActionUncheckedCreateNestedManyWithoutSub_menuInput
  }

  export type MasterSubMenuCreateOrConnectWithoutMenuInput = {
    where: MasterSubMenuWhereUniqueInput
    create: XOR<MasterSubMenuCreateWithoutMenuInput, MasterSubMenuUncheckedCreateWithoutMenuInput>
  }

  export type MasterSubMenuCreateManyMenuInputEnvelope = {
    data: MasterSubMenuCreateManyMenuInput | MasterSubMenuCreateManyMenuInput[]
    skipDuplicates?: boolean
  }

  export type MasterSubMenuUpsertWithWhereUniqueWithoutMenuInput = {
    where: MasterSubMenuWhereUniqueInput
    update: XOR<MasterSubMenuUpdateWithoutMenuInput, MasterSubMenuUncheckedUpdateWithoutMenuInput>
    create: XOR<MasterSubMenuCreateWithoutMenuInput, MasterSubMenuUncheckedCreateWithoutMenuInput>
  }

  export type MasterSubMenuUpdateWithWhereUniqueWithoutMenuInput = {
    where: MasterSubMenuWhereUniqueInput
    data: XOR<MasterSubMenuUpdateWithoutMenuInput, MasterSubMenuUncheckedUpdateWithoutMenuInput>
  }

  export type MasterSubMenuUpdateManyWithWhereWithoutMenuInput = {
    where: MasterSubMenuScalarWhereInput
    data: XOR<MasterSubMenuUpdateManyMutationInput, MasterSubMenuUncheckedUpdateManyWithoutMenuInput>
  }

  export type MasterSubMenuScalarWhereInput = {
    AND?: MasterSubMenuScalarWhereInput | MasterSubMenuScalarWhereInput[]
    OR?: MasterSubMenuScalarWhereInput[]
    NOT?: MasterSubMenuScalarWhereInput | MasterSubMenuScalarWhereInput[]
    id?: IntFilter<"MasterSubMenu"> | number
    sub_menu_code?: StringFilter<"MasterSubMenu"> | string
    menu_code?: StringFilter<"MasterSubMenu"> | string
    name?: StringFilter<"MasterSubMenu"> | string
    url?: StringFilter<"MasterSubMenu"> | string
    description?: StringFilter<"MasterSubMenu"> | string
    createdAt?: DateTimeFilter<"MasterSubMenu"> | Date | string
    updatedAt?: DateTimeFilter<"MasterSubMenu"> | Date | string
  }

  export type MasterMenuCreateWithoutSub_menuInput = {
    menu_code: string
    name: string
    url: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MasterMenuUncheckedCreateWithoutSub_menuInput = {
    id?: number
    menu_code: string
    name: string
    url: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MasterMenuCreateOrConnectWithoutSub_menuInput = {
    where: MasterMenuWhereUniqueInput
    create: XOR<MasterMenuCreateWithoutSub_menuInput, MasterMenuUncheckedCreateWithoutSub_menuInput>
  }

  export type MasterMenuActionCreateWithoutSub_menuInput = {
    action_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserMenuActionCreateNestedManyWithoutMenuInput
  }

  export type MasterMenuActionUncheckedCreateWithoutSub_menuInput = {
    id?: number
    action_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserMenuActionUncheckedCreateNestedManyWithoutMenuInput
  }

  export type MasterMenuActionCreateOrConnectWithoutSub_menuInput = {
    where: MasterMenuActionWhereUniqueInput
    create: XOR<MasterMenuActionCreateWithoutSub_menuInput, MasterMenuActionUncheckedCreateWithoutSub_menuInput>
  }

  export type MasterMenuActionCreateManySub_menuInputEnvelope = {
    data: MasterMenuActionCreateManySub_menuInput | MasterMenuActionCreateManySub_menuInput[]
    skipDuplicates?: boolean
  }

  export type MasterMenuUpsertWithoutSub_menuInput = {
    update: XOR<MasterMenuUpdateWithoutSub_menuInput, MasterMenuUncheckedUpdateWithoutSub_menuInput>
    create: XOR<MasterMenuCreateWithoutSub_menuInput, MasterMenuUncheckedCreateWithoutSub_menuInput>
    where?: MasterMenuWhereInput
  }

  export type MasterMenuUpdateToOneWithWhereWithoutSub_menuInput = {
    where?: MasterMenuWhereInput
    data: XOR<MasterMenuUpdateWithoutSub_menuInput, MasterMenuUncheckedUpdateWithoutSub_menuInput>
  }

  export type MasterMenuUpdateWithoutSub_menuInput = {
    menu_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterMenuUncheckedUpdateWithoutSub_menuInput = {
    id?: IntFieldUpdateOperationsInput | number
    menu_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterMenuActionUpsertWithWhereUniqueWithoutSub_menuInput = {
    where: MasterMenuActionWhereUniqueInput
    update: XOR<MasterMenuActionUpdateWithoutSub_menuInput, MasterMenuActionUncheckedUpdateWithoutSub_menuInput>
    create: XOR<MasterMenuActionCreateWithoutSub_menuInput, MasterMenuActionUncheckedCreateWithoutSub_menuInput>
  }

  export type MasterMenuActionUpdateWithWhereUniqueWithoutSub_menuInput = {
    where: MasterMenuActionWhereUniqueInput
    data: XOR<MasterMenuActionUpdateWithoutSub_menuInput, MasterMenuActionUncheckedUpdateWithoutSub_menuInput>
  }

  export type MasterMenuActionUpdateManyWithWhereWithoutSub_menuInput = {
    where: MasterMenuActionScalarWhereInput
    data: XOR<MasterMenuActionUpdateManyMutationInput, MasterMenuActionUncheckedUpdateManyWithoutSub_menuInput>
  }

  export type MasterMenuActionScalarWhereInput = {
    AND?: MasterMenuActionScalarWhereInput | MasterMenuActionScalarWhereInput[]
    OR?: MasterMenuActionScalarWhereInput[]
    NOT?: MasterMenuActionScalarWhereInput | MasterMenuActionScalarWhereInput[]
    id?: IntFilter<"MasterMenuAction"> | number
    sub_menu_code?: StringFilter<"MasterMenuAction"> | string
    menu_code?: StringFilter<"MasterMenuAction"> | string
    action_code?: StringFilter<"MasterMenuAction"> | string
    name?: StringFilter<"MasterMenuAction"> | string
    createdAt?: DateTimeFilter<"MasterMenuAction"> | Date | string
    updatedAt?: DateTimeFilter<"MasterMenuAction"> | Date | string
  }

  export type UserMenuActionCreateWithoutMenuInput = {
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserMenuActionInput
  }

  export type UserMenuActionUncheckedCreateWithoutMenuInput = {
    id?: number
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMenuActionCreateOrConnectWithoutMenuInput = {
    where: UserMenuActionWhereUniqueInput
    create: XOR<UserMenuActionCreateWithoutMenuInput, UserMenuActionUncheckedCreateWithoutMenuInput>
  }

  export type UserMenuActionCreateManyMenuInputEnvelope = {
    data: UserMenuActionCreateManyMenuInput | UserMenuActionCreateManyMenuInput[]
    skipDuplicates?: boolean
  }

  export type MasterSubMenuCreateWithoutActionsInput = {
    sub_menu_code: string
    name: string
    url: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    menu: MasterMenuCreateNestedOneWithoutSub_menuInput
  }

  export type MasterSubMenuUncheckedCreateWithoutActionsInput = {
    id?: number
    sub_menu_code: string
    menu_code: string
    name: string
    url: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MasterSubMenuCreateOrConnectWithoutActionsInput = {
    where: MasterSubMenuWhereUniqueInput
    create: XOR<MasterSubMenuCreateWithoutActionsInput, MasterSubMenuUncheckedCreateWithoutActionsInput>
  }

  export type UserMenuActionUpsertWithWhereUniqueWithoutMenuInput = {
    where: UserMenuActionWhereUniqueInput
    update: XOR<UserMenuActionUpdateWithoutMenuInput, UserMenuActionUncheckedUpdateWithoutMenuInput>
    create: XOR<UserMenuActionCreateWithoutMenuInput, UserMenuActionUncheckedCreateWithoutMenuInput>
  }

  export type UserMenuActionUpdateWithWhereUniqueWithoutMenuInput = {
    where: UserMenuActionWhereUniqueInput
    data: XOR<UserMenuActionUpdateWithoutMenuInput, UserMenuActionUncheckedUpdateWithoutMenuInput>
  }

  export type UserMenuActionUpdateManyWithWhereWithoutMenuInput = {
    where: UserMenuActionScalarWhereInput
    data: XOR<UserMenuActionUpdateManyMutationInput, UserMenuActionUncheckedUpdateManyWithoutMenuInput>
  }

  export type MasterSubMenuUpsertWithoutActionsInput = {
    update: XOR<MasterSubMenuUpdateWithoutActionsInput, MasterSubMenuUncheckedUpdateWithoutActionsInput>
    create: XOR<MasterSubMenuCreateWithoutActionsInput, MasterSubMenuUncheckedCreateWithoutActionsInput>
    where?: MasterSubMenuWhereInput
  }

  export type MasterSubMenuUpdateToOneWithWhereWithoutActionsInput = {
    where?: MasterSubMenuWhereInput
    data: XOR<MasterSubMenuUpdateWithoutActionsInput, MasterSubMenuUncheckedUpdateWithoutActionsInput>
  }

  export type MasterSubMenuUpdateWithoutActionsInput = {
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menu?: MasterMenuUpdateOneRequiredWithoutSub_menuNestedInput
  }

  export type MasterSubMenuUncheckedUpdateWithoutActionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    menu_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateWithoutMenuInput = {
    company_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCompaniesInput
    divisions?: DivisionCreateNestedManyWithoutCompanyInput
    user_history?: UserCompanyHistoryCreateNestedManyWithoutCompanyInput
    user?: UserCreateNestedManyWithoutCompanyInput
    attendance_location?: AttendanceLocationCreateNestedManyWithoutCompanyInput
    sift_type?: ShiftTypeCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutMenuInput = {
    id?: number
    company_code: string
    name: string
    tenant_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    divisions?: DivisionUncheckedCreateNestedManyWithoutCompanyInput
    user_history?: UserCompanyHistoryUncheckedCreateNestedManyWithoutCompanyInput
    user?: UserUncheckedCreateNestedManyWithoutCompanyInput
    attendance_location?: AttendanceLocationUncheckedCreateNestedManyWithoutCompanyInput
    sift_type?: ShiftTypeUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutMenuInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutMenuInput, CompanyUncheckedCreateWithoutMenuInput>
  }

  export type UserMenuCreateWithoutMenuInput = {
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserMenusInput
  }

  export type UserMenuUncheckedCreateWithoutMenuInput = {
    id?: number
    division_code: string
    user_code: string
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMenuCreateOrConnectWithoutMenuInput = {
    where: UserMenuWhereUniqueInput
    create: XOR<UserMenuCreateWithoutMenuInput, UserMenuUncheckedCreateWithoutMenuInput>
  }

  export type UserMenuCreateManyMenuInputEnvelope = {
    data: UserMenuCreateManyMenuInput | UserMenuCreateManyMenuInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutMenuInput = {
    update: XOR<CompanyUpdateWithoutMenuInput, CompanyUncheckedUpdateWithoutMenuInput>
    create: XOR<CompanyCreateWithoutMenuInput, CompanyUncheckedCreateWithoutMenuInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutMenuInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutMenuInput, CompanyUncheckedUpdateWithoutMenuInput>
  }

  export type CompanyUpdateWithoutMenuInput = {
    company_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCompaniesNestedInput
    divisions?: DivisionUpdateManyWithoutCompanyNestedInput
    user_history?: UserCompanyHistoryUpdateManyWithoutCompanyNestedInput
    user?: UserUpdateManyWithoutCompanyNestedInput
    attendance_location?: AttendanceLocationUpdateManyWithoutCompanyNestedInput
    sift_type?: ShiftTypeUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutMenuInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    divisions?: DivisionUncheckedUpdateManyWithoutCompanyNestedInput
    user_history?: UserCompanyHistoryUncheckedUpdateManyWithoutCompanyNestedInput
    user?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    attendance_location?: AttendanceLocationUncheckedUpdateManyWithoutCompanyNestedInput
    sift_type?: ShiftTypeUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type UserMenuUpsertWithWhereUniqueWithoutMenuInput = {
    where: UserMenuWhereUniqueInput
    update: XOR<UserMenuUpdateWithoutMenuInput, UserMenuUncheckedUpdateWithoutMenuInput>
    create: XOR<UserMenuCreateWithoutMenuInput, UserMenuUncheckedCreateWithoutMenuInput>
  }

  export type UserMenuUpdateWithWhereUniqueWithoutMenuInput = {
    where: UserMenuWhereUniqueInput
    data: XOR<UserMenuUpdateWithoutMenuInput, UserMenuUncheckedUpdateWithoutMenuInput>
  }

  export type UserMenuUpdateManyWithWhereWithoutMenuInput = {
    where: UserMenuScalarWhereInput
    data: XOR<UserMenuUpdateManyMutationInput, UserMenuUncheckedUpdateManyWithoutMenuInput>
  }

  export type CompanyMenuCreateWithoutUser_menuInput = {
    menu_code: string
    sub_menu_code: string
    company: CompanyCreateNestedOneWithoutMenuInput
  }

  export type CompanyMenuUncheckedCreateWithoutUser_menuInput = {
    id?: number
    menu_code: string
    tenant_code: string
    company_code: string
    sub_menu_code: string
  }

  export type CompanyMenuCreateOrConnectWithoutUser_menuInput = {
    where: CompanyMenuWhereUniqueInput
    create: XOR<CompanyMenuCreateWithoutUser_menuInput, CompanyMenuUncheckedCreateWithoutUser_menuInput>
  }

  export type UserCreateWithoutUserMenusInput = {
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryCreateNestedManyWithoutUserInput
    tenant: TenantCreateNestedOneWithoutUserInput
    company: CompanyCreateNestedOneWithoutUserInput
    division: DivisionCreateNestedOneWithoutUserInput
    attendances_location?: UserAttendanceLocationCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserMenusInput = {
    id?: number
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    tenant_code: string
    company_code: string
    division_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryUncheckedCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryUncheckedCreateNestedManyWithoutUserInput
    attendances_location?: UserAttendanceLocationUncheckedCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftUncheckedCreateNestedManyWithoutUserInput
    userMenuAction?: UserMenuActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserMenusInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserMenusInput, UserUncheckedCreateWithoutUserMenusInput>
  }

  export type CompanyMenuUpsertWithoutUser_menuInput = {
    update: XOR<CompanyMenuUpdateWithoutUser_menuInput, CompanyMenuUncheckedUpdateWithoutUser_menuInput>
    create: XOR<CompanyMenuCreateWithoutUser_menuInput, CompanyMenuUncheckedCreateWithoutUser_menuInput>
    where?: CompanyMenuWhereInput
  }

  export type CompanyMenuUpdateToOneWithWhereWithoutUser_menuInput = {
    where?: CompanyMenuWhereInput
    data: XOR<CompanyMenuUpdateWithoutUser_menuInput, CompanyMenuUncheckedUpdateWithoutUser_menuInput>
  }

  export type CompanyMenuUpdateWithoutUser_menuInput = {
    menu_code?: StringFieldUpdateOperationsInput | string
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    company?: CompanyUpdateOneRequiredWithoutMenuNestedInput
  }

  export type CompanyMenuUncheckedUpdateWithoutUser_menuInput = {
    id?: IntFieldUpdateOperationsInput | number
    menu_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    sub_menu_code?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutUserMenusInput = {
    update: XOR<UserUpdateWithoutUserMenusInput, UserUncheckedUpdateWithoutUserMenusInput>
    create: XOR<UserCreateWithoutUserMenusInput, UserUncheckedCreateWithoutUserMenusInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserMenusInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserMenusInput, UserUncheckedUpdateWithoutUserMenusInput>
  }

  export type UserUpdateWithoutUserMenusInput = {
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUpdateManyWithoutUserNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUserNestedInput
    company?: CompanyUpdateOneRequiredWithoutUserNestedInput
    division?: DivisionUpdateOneRequiredWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserMenusInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    tenant_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUncheckedUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUncheckedUpdateManyWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUncheckedUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUncheckedUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MasterMenuActionCreateWithoutUsersInput = {
    action_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sub_menu: MasterSubMenuCreateNestedOneWithoutActionsInput
  }

  export type MasterMenuActionUncheckedCreateWithoutUsersInput = {
    id?: number
    sub_menu_code: string
    menu_code: string
    action_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MasterMenuActionCreateOrConnectWithoutUsersInput = {
    where: MasterMenuActionWhereUniqueInput
    create: XOR<MasterMenuActionCreateWithoutUsersInput, MasterMenuActionUncheckedCreateWithoutUsersInput>
  }

  export type UserCreateWithoutUserMenuActionInput = {
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryCreateNestedManyWithoutUserInput
    tenant: TenantCreateNestedOneWithoutUserInput
    company: CompanyCreateNestedOneWithoutUserInput
    division: DivisionCreateNestedOneWithoutUserInput
    attendances_location?: UserAttendanceLocationCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftCreateNestedManyWithoutUserInput
    userMenus?: UserMenuCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserMenuActionInput = {
    id?: number
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    tenant_code: string
    company_code: string
    division_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company_history?: UserCompanyHistoryUncheckedCreateNestedManyWithoutUserInput
    division_history?: UserDivisionHistoryUncheckedCreateNestedManyWithoutUserInput
    attendances_location?: UserAttendanceLocationUncheckedCreateNestedManyWithoutUserInput
    user_attendance?: UserAttendanceUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    user_shifts?: UserShiftUncheckedCreateNestedManyWithoutUserInput
    userMenus?: UserMenuUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserMenuActionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserMenuActionInput, UserUncheckedCreateWithoutUserMenuActionInput>
  }

  export type MasterMenuActionUpsertWithoutUsersInput = {
    update: XOR<MasterMenuActionUpdateWithoutUsersInput, MasterMenuActionUncheckedUpdateWithoutUsersInput>
    create: XOR<MasterMenuActionCreateWithoutUsersInput, MasterMenuActionUncheckedCreateWithoutUsersInput>
    where?: MasterMenuActionWhereInput
  }

  export type MasterMenuActionUpdateToOneWithWhereWithoutUsersInput = {
    where?: MasterMenuActionWhereInput
    data: XOR<MasterMenuActionUpdateWithoutUsersInput, MasterMenuActionUncheckedUpdateWithoutUsersInput>
  }

  export type MasterMenuActionUpdateWithoutUsersInput = {
    action_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_menu?: MasterSubMenuUpdateOneRequiredWithoutActionsNestedInput
  }

  export type MasterMenuActionUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    menu_code?: StringFieldUpdateOperationsInput | string
    action_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutUserMenuActionInput = {
    update: XOR<UserUpdateWithoutUserMenuActionInput, UserUncheckedUpdateWithoutUserMenuActionInput>
    create: XOR<UserCreateWithoutUserMenuActionInput, UserUncheckedCreateWithoutUserMenuActionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserMenuActionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserMenuActionInput, UserUncheckedUpdateWithoutUserMenuActionInput>
  }

  export type UserUpdateWithoutUserMenuActionInput = {
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUpdateManyWithoutUserNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUserNestedInput
    company?: CompanyUpdateOneRequiredWithoutUserNestedInput
    division?: DivisionUpdateOneRequiredWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserMenuActionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    tenant_code?: StringFieldUpdateOperationsInput | string
    company_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUncheckedUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUncheckedUpdateManyWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUncheckedUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUncheckedUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CompanyCreateManyTenantInput = {
    id?: number
    company_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateManyTenantInput = {
    id?: number
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    company_code: string
    division_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUpdateWithoutTenantInput = {
    company_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    divisions?: DivisionUpdateManyWithoutCompanyNestedInput
    user_history?: UserCompanyHistoryUpdateManyWithoutCompanyNestedInput
    user?: UserUpdateManyWithoutCompanyNestedInput
    attendance_location?: AttendanceLocationUpdateManyWithoutCompanyNestedInput
    sift_type?: ShiftTypeUpdateManyWithoutCompanyNestedInput
    menu?: CompanyMenuUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    divisions?: DivisionUncheckedUpdateManyWithoutCompanyNestedInput
    user_history?: UserCompanyHistoryUncheckedUpdateManyWithoutCompanyNestedInput
    user?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    attendance_location?: AttendanceLocationUncheckedUpdateManyWithoutCompanyNestedInput
    sift_type?: ShiftTypeUncheckedUpdateManyWithoutCompanyNestedInput
    menu?: CompanyMenuUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateManyWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutTenantInput = {
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUpdateManyWithoutUserNestedInput
    company?: CompanyUpdateOneRequiredWithoutUserNestedInput
    division?: DivisionUpdateOneRequiredWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    company_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUncheckedUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUncheckedUpdateManyWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUncheckedUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUncheckedUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUncheckedUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    company_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DivisionCreateManyCompanyInput = {
    id?: number
    division_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCompanyHistoryCreateManyCompanyInput = {
    id?: number
    user_code: string
    division_code: string
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type UserCreateManyCompanyInput = {
    id?: number
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    division_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceLocationCreateManyCompanyInput = {
    id?: number
    attendance_location_code: string
    name: string
    lat: string
    lng: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShiftTypeCreateManyCompanyInput = {
    id?: number
    name: string
    startTime: Date | string
    endTime: Date | string
    shift_code: string
  }

  export type CompanyMenuCreateManyCompanyInput = {
    id?: number
    menu_code: string
    sub_menu_code: string
  }

  export type DivisionUpdateWithoutCompanyInput = {
    division_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_history?: UserDivisionHistoryUpdateManyWithoutDivisionNestedInput
    user?: UserUpdateManyWithoutDivisionNestedInput
  }

  export type DivisionUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    division_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_history?: UserDivisionHistoryUncheckedUpdateManyWithoutDivisionNestedInput
    user?: UserUncheckedUpdateManyWithoutDivisionNestedInput
  }

  export type DivisionUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    division_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCompanyHistoryUpdateWithoutCompanyInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutCompany_historyNestedInput
  }

  export type UserCompanyHistoryUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCompanyHistoryUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUpdateWithoutCompanyInput = {
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUpdateManyWithoutUserNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUserNestedInput
    division?: DivisionUpdateOneRequiredWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    division_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUncheckedUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUncheckedUpdateManyWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUncheckedUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUncheckedUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUncheckedUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    division_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceLocationUpdateWithoutCompanyInput = {
    attendance_location_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_attendance_location?: UserAttendanceLocationUpdateManyWithoutLocationNestedInput
  }

  export type AttendanceLocationUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    attendance_location_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_attendance_location?: UserAttendanceLocationUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type AttendanceLocationUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    attendance_location_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftTypeUpdateWithoutCompanyInput = {
    name?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    shift_code?: StringFieldUpdateOperationsInput | string
    user_shifts?: UserShiftUpdateManyWithoutShiftNestedInput
  }

  export type ShiftTypeUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    shift_code?: StringFieldUpdateOperationsInput | string
    user_shifts?: UserShiftUncheckedUpdateManyWithoutShiftNestedInput
  }

  export type ShiftTypeUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    shift_code?: StringFieldUpdateOperationsInput | string
  }

  export type CompanyMenuUpdateWithoutCompanyInput = {
    menu_code?: StringFieldUpdateOperationsInput | string
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    user_menu?: UserMenuUpdateManyWithoutMenuNestedInput
  }

  export type CompanyMenuUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    menu_code?: StringFieldUpdateOperationsInput | string
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    user_menu?: UserMenuUncheckedUpdateManyWithoutMenuNestedInput
  }

  export type CompanyMenuUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    menu_code?: StringFieldUpdateOperationsInput | string
    sub_menu_code?: StringFieldUpdateOperationsInput | string
  }

  export type UserDivisionHistoryCreateManyDivisionInput = {
    id?: number
    user_code: string
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type UserCreateManyDivisionInput = {
    id?: number
    user_code: string
    email: string
    name: string
    password: string
    status: $Enums.EmployeeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserDivisionHistoryUpdateWithoutDivisionInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutDivision_historyNestedInput
  }

  export type UserDivisionHistoryUncheckedUpdateWithoutDivisionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserDivisionHistoryUncheckedUpdateManyWithoutDivisionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUpdateWithoutDivisionInput = {
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUpdateManyWithoutUserNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUserNestedInput
    company?: CompanyUpdateOneRequiredWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDivisionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company_history?: UserCompanyHistoryUncheckedUpdateManyWithoutUserNestedInput
    division_history?: UserDivisionHistoryUncheckedUpdateManyWithoutUserNestedInput
    attendances_location?: UserAttendanceLocationUncheckedUpdateManyWithoutUserNestedInput
    user_attendance?: UserAttendanceUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    user_shifts?: UserShiftUncheckedUpdateManyWithoutUserNestedInput
    userMenus?: UserMenuUncheckedUpdateManyWithoutUserNestedInput
    userMenuAction?: UserMenuActionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutDivisionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_code?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCompanyHistoryCreateManyUserInput = {
    id?: number
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type UserDivisionHistoryCreateManyUserInput = {
    id?: number
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type UserAttendanceLocationCreateManyUserInput = {
    id?: number
    name: string
    user_attendance_loaction_code: string
    attendance_location_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAttendanceCreateManyUserInput = {
    id?: number
    status: string
    clockInLat?: string | null
    clockInLng?: string | null
    clockOutLat?: string | null
    clockOutLng?: string | null
    clockIn?: Date | string | null
    clockOut?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleCreateManyUserInput = {
    id?: number
    role_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserShiftCreateManyUserInput = {
    id?: number
    shift_code: string
    date: Date | string
  }

  export type UserMenuCreateManyUserInput = {
    id?: number
    menu_code: string
    sub_menu_code: string
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMenuActionCreateManyUserInput = {
    id?: number
    sub_menu_code: string
    action_code: string
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCompanyHistoryUpdateWithoutUserInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    company?: CompanyUpdateOneRequiredWithoutUser_historyNestedInput
  }

  export type UserCompanyHistoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCompanyHistoryUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserDivisionHistoryUpdateWithoutUserInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    division?: DivisionUpdateOneRequiredWithoutUser_historyNestedInput
  }

  export type UserDivisionHistoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserDivisionHistoryUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserAttendanceLocationUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    user_attendance_loaction_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: AttendanceLocationUpdateOneRequiredWithoutUser_attendance_locationNestedInput
  }

  export type UserAttendanceLocationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    user_attendance_loaction_code?: StringFieldUpdateOperationsInput | string
    attendance_location_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAttendanceLocationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    user_attendance_loaction_code?: StringFieldUpdateOperationsInput | string
    attendance_location_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAttendanceUpdateWithoutUserInput = {
    status?: StringFieldUpdateOperationsInput | string
    clockInLat?: NullableStringFieldUpdateOperationsInput | string | null
    clockInLng?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutLat?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutLng?: NullableStringFieldUpdateOperationsInput | string | null
    clockIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAttendanceUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    clockInLat?: NullableStringFieldUpdateOperationsInput | string | null
    clockInLng?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutLat?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutLng?: NullableStringFieldUpdateOperationsInput | string | null
    clockIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAttendanceUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    clockInLat?: NullableStringFieldUpdateOperationsInput | string | null
    clockInLng?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutLat?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutLng?: NullableStringFieldUpdateOperationsInput | string | null
    clockIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserShiftUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    shift?: ShiftTypeUpdateOneRequiredWithoutUser_shiftsNestedInput
  }

  export type UserShiftUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    shift_code?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserShiftUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    shift_code?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMenuUpdateWithoutUserInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menu?: CompanyMenuUpdateOneRequiredWithoutUser_menuNestedInput
  }

  export type UserMenuUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    menu_code?: StringFieldUpdateOperationsInput | string
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMenuUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    menu_code?: StringFieldUpdateOperationsInput | string
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMenuActionUpdateWithoutUserInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menu?: MasterMenuActionUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserMenuActionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    action_code?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMenuActionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    action_code?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAttendanceLocationCreateManyLocationInput = {
    id?: number
    name: string
    user_attendance_loaction_code: string
    user_code: string
    division_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAttendanceLocationUpdateWithoutLocationInput = {
    name?: StringFieldUpdateOperationsInput | string
    user_attendance_loaction_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAttendances_locationNestedInput
  }

  export type UserAttendanceLocationUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    user_attendance_loaction_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAttendanceLocationUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    user_attendance_loaction_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserShiftCreateManyShiftInput = {
    id?: number
    division_code: string
    user_code: string
    date: Date | string
  }

  export type UserShiftUpdateWithoutShiftInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUser_shiftsNestedInput
  }

  export type UserShiftUncheckedUpdateWithoutShiftInput = {
    id?: IntFieldUpdateOperationsInput | number
    division_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserShiftUncheckedUpdateManyWithoutShiftInput = {
    id?: IntFieldUpdateOperationsInput | number
    division_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleCreateManyRoleInput = {
    id?: number
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleUpdateWithoutRoleInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRolesNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterSubMenuCreateManyMenuInput = {
    id?: number
    sub_menu_code: string
    name: string
    url: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MasterSubMenuUpdateWithoutMenuInput = {
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actions?: MasterMenuActionUpdateManyWithoutSub_menuNestedInput
  }

  export type MasterSubMenuUncheckedUpdateWithoutMenuInput = {
    id?: IntFieldUpdateOperationsInput | number
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actions?: MasterMenuActionUncheckedUpdateManyWithoutSub_menuNestedInput
  }

  export type MasterSubMenuUncheckedUpdateManyWithoutMenuInput = {
    id?: IntFieldUpdateOperationsInput | number
    sub_menu_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MasterMenuActionCreateManySub_menuInput = {
    id?: number
    action_code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MasterMenuActionUpdateWithoutSub_menuInput = {
    action_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserMenuActionUpdateManyWithoutMenuNestedInput
  }

  export type MasterMenuActionUncheckedUpdateWithoutSub_menuInput = {
    id?: IntFieldUpdateOperationsInput | number
    action_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserMenuActionUncheckedUpdateManyWithoutMenuNestedInput
  }

  export type MasterMenuActionUncheckedUpdateManyWithoutSub_menuInput = {
    id?: IntFieldUpdateOperationsInput | number
    action_code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMenuActionCreateManyMenuInput = {
    id?: number
    company_code: string
    tenant_code: string
    division_code: string
    user_code: string
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMenuActionUpdateWithoutMenuInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserMenuActionNestedInput
  }

  export type UserMenuActionUncheckedUpdateWithoutMenuInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMenuActionUncheckedUpdateManyWithoutMenuInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_code?: StringFieldUpdateOperationsInput | string
    tenant_code?: StringFieldUpdateOperationsInput | string
    division_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMenuCreateManyMenuInput = {
    id?: number
    division_code: string
    user_code: string
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMenuUpdateWithoutMenuInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserMenusNestedInput
  }

  export type UserMenuUncheckedUpdateWithoutMenuInput = {
    id?: IntFieldUpdateOperationsInput | number
    division_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMenuUncheckedUpdateManyWithoutMenuInput = {
    id?: IntFieldUpdateOperationsInput | number
    division_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use TenantCountOutputTypeDefaultArgs instead
     */
    export type TenantCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyCountOutputTypeDefaultArgs instead
     */
    export type CompanyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DivisionCountOutputTypeDefaultArgs instead
     */
    export type DivisionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DivisionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AttendanceLocationCountOutputTypeDefaultArgs instead
     */
    export type AttendanceLocationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AttendanceLocationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShiftTypeCountOutputTypeDefaultArgs instead
     */
    export type ShiftTypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShiftTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleCountOutputTypeDefaultArgs instead
     */
    export type RoleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MasterMenuCountOutputTypeDefaultArgs instead
     */
    export type MasterMenuCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MasterMenuCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MasterSubMenuCountOutputTypeDefaultArgs instead
     */
    export type MasterSubMenuCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MasterSubMenuCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MasterMenuActionCountOutputTypeDefaultArgs instead
     */
    export type MasterMenuActionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MasterMenuActionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyMenuCountOutputTypeDefaultArgs instead
     */
    export type CompanyMenuCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyMenuCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TenantDefaultArgs instead
     */
    export type TenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyDefaultArgs instead
     */
    export type CompanyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DivisionDefaultArgs instead
     */
    export type DivisionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DivisionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCompanyHistoryDefaultArgs instead
     */
    export type UserCompanyHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCompanyHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDivisionHistoryDefaultArgs instead
     */
    export type UserDivisionHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDivisionHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AttendanceLocationDefaultArgs instead
     */
    export type AttendanceLocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AttendanceLocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserAttendanceLocationDefaultArgs instead
     */
    export type UserAttendanceLocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserAttendanceLocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserAttendanceDefaultArgs instead
     */
    export type UserAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserAttendanceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShiftTypeDefaultArgs instead
     */
    export type ShiftTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShiftTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserShiftDefaultArgs instead
     */
    export type UserShiftArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserShiftDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleDefaultArgs instead
     */
    export type RoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserRoleDefaultArgs instead
     */
    export type UserRoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserRoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MasterMenuDefaultArgs instead
     */
    export type MasterMenuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MasterMenuDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MasterSubMenuDefaultArgs instead
     */
    export type MasterSubMenuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MasterSubMenuDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MasterMenuActionDefaultArgs instead
     */
    export type MasterMenuActionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MasterMenuActionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyMenuDefaultArgs instead
     */
    export type CompanyMenuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyMenuDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserMenuDefaultArgs instead
     */
    export type UserMenuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserMenuDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserMenuActionDefaultArgs instead
     */
    export type UserMenuActionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserMenuActionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}