datasource db {
  provider = "postgresql"
  // url      = "postgresql://postgres.kmtzopdlijuglphypvuj:8rARigH_4q7cHTs@aws-0-ap-southeast-1.pooler.supabase.com:6543/postgres"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/database2"
}

model Tenant {
  id          Int        @id @default(autoincrement())
  tenant_code String     @unique
  name        String
  companies   Company[]
  users       User[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Company {
  id          Int        @id @default(autoincrement())
  company_code String     @unique
  name        String
  tenant_code String
  tenant      Tenant      @relation(fields: [tenant_code], references: [tenant_code])
  divisions   Division[]
  users       User[]
  // location       Location[]
  // siftType ShiftType[]
  // role Role[]
  // menu Menu[]
  // menuAction MenuAction[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
   @@unique([tenant_code, company_code]) // Compound unique constraint
}

model Division {
  id          Int        @id @default(autoincrement())
  division_code        String    
  name        String
  company_code String
  tenant_code  String
  company      Company @relation(fields: [tenant_code, company_code], references: [tenant_code, company_code])
  users       User[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  @@unique([tenant_code, company_code, division_code]) 

}

model User {
  id          Int        @id @default(autoincrement())
  email       String      @unique
  name        String
  password    String
  // tenant_code String
  // tenant      Tenant      @relation(fields: [tenant_code], references: [tenant_code])
  // company_code String
  // company     Company     @relation(fields: [company_code], references: [company_code])
  // division_id  Int
  // division    Division   @relation(fields: [division_id], references: [id])
  // attendances Attendance[]
  // userProjects UserProject[]
  // userRoles   UserRole[]
  // userShifts        UserShift[]
  // userLocation   UserLocation[]
  // userMenus   UserMenu[]
  // userMenuAction UserMenuAction[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}


// model Location {
//   id          Int        @id @default(autoincrement())
//   userLocation   UserLocation[]
//   company_code String
//   company     Company     @relation(fields: [company_code], references: [company_code])
//   code        String
//   name        String
//   lat    String
//   lng    String
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt
// }

// model UserLocation {
//   id          Int        @id @default(autoincrement())
//   name        String
//   userId      Int
//   user        User        @relation(fields: [userId], references: [id])
//   locationId      Int @default(1  )
//   location        Location        @relation(fields: [locationId], references: [id])
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt
// }


// model Attendance {
//   id          Int        @id @default(autoincrement())
//   status      String
//   clockInLat    String?
//   clockInLng    String?
//   clockOutLat    String?
//   clockOutLng    String?
//   clockIn    DateTime?
//   clockOut   DateTime?
//   userId      Int
//   user        User        @relation(fields: [userId], references: [id])
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt
// }


// model ShiftType {
//   id         Int      @id @default(autoincrement())
//   name  String   @db.VarChar(50)
//   startTime  DateTime @db.Time
//   endTime    DateTime @db.Time
//   userShifts UserShift[]   
//   company_code String
//   company     Company     @relation(fields: [company_code], references: [company_code])
// }


// model UserShift {
//   id         Int        @id @default(autoincrement())
//   userId     Int
//   shiftId    Int
//   date  DateTime
//   user       User      @relation(fields: [userId], references: [id])
//   shift      ShiftType @relation(fields: [shiftId], references: [id])
//   @@unique([userId, shiftId, date])
// }


// model Role {
//   id          Int        @id @default(autoincrement())
//   code        String  
//   name        String
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt
//   userRole UserRole[]    
//   company_code String
//   company     Company     @relation(fields: [company_code], references: [company_code])
// }


// model UserRole {
//   id          Int        @id @default(autoincrement())
//   userId      Int
//   roleId      Int
//   user        User        @relation(fields: [userId], references: [id])
//   role        Role        @relation(fields: [roleId], references: [id])
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt

//   @@unique([userId, roleId])
// }


// model Menu {
//   id          Int        @id @default(autoincrement())
//   code        String  @unique
//   name        String
//   url         String
//   description String
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt
//   userMenu UserMenu[]    
//   company_code String
//   company     Company     @relation(fields: [company_code], references: [company_code])
// }


// model UserMenu {
//   id          Int        @id @default(autoincrement())
//   menuId      Int
//   menu        Menu        @relation(fields: [menuId], references: [id])
//   userId      Int
//   user        User        @relation(fields: [userId], references: [id])
//   status      Boolean
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt
// }

// model MenuAction {
//   id          Int        @id @default(autoincrement())
//   code        String  @unique
//   name        String
//   description String
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt
//   userMenuAction UserMenuAction[]   
//   company_code String
//   company     Company     @relation(fields: [company_code], references: [company_code]) 
// }

// model UserMenuAction {
//   id          Int        @id @default(autoincrement())
//   menuActionId      Int
//   menu        MenuAction        @relation(fields: [menuActionId], references: [id])
//   userId      Int
//   user        User        @relation(fields: [userId], references: [id])
//   status      Boolean
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt
// }











// model Permission {
//   id          Int        @id @default(autoincrement())
//   name        String
//   rolePermissions RolePermission[]
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt
// }

// model Project {
//   id          Int        @id @default(autoincrement())
//   name        String
//   company_code String
//   company     Company     @relation(fields: [company_code], references: [company_code])
//   userProjects UserProject[]
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt
// }

// model UserProject {
//   id          Int        @id @default(autoincrement())
//   userId      Int
//   projectId   Int
//   user        User        @relation(fields: [userId], references: [id])
//   project     Project     @relation(fields: [projectId], references: [id])
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt
//   @@unique([userId, projectId])
// }

// model RolePermission {
//   id          Int        @id @default(autoincrement())
//   roleId      Int
//   permissionId Int
//   role        Role        @relation(fields: [roleId], references: [id])
//   permission  Permission  @relation(fields: [permissionId], references: [id])
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt
//   @@unique([roleId, permissionId])
// }